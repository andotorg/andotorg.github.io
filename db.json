{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/resource/wechat.jpg","path":"resource/wechat.jpg","modified":0,"renderable":0},{"_id":"source/resource/zfb.jpg","path":"resource/zfb.jpg","modified":0,"renderable":0},{"_id":"source/resource/music/yq.mp3","path":"resource/music/yq.mp3","modified":0,"renderable":0},{"_id":"source/resource/logo.png","path":"resource/logo.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/child.png","path":"images/mysql/partition/child.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/hash.png","path":"images/mysql/partition/hash.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/index.png","path":"images/mysql/partition/index.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/key.png","path":"images/mysql/partition/key.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/list.png","path":"images/mysql/partition/list.png","modified":0,"renderable":0},{"_id":"source/images/mysql/partition/range.png","path":"images/mysql/partition/range.png","modified":0,"renderable":0},{"_id":"source/images/mysql/index.png","path":"images/mysql/index.png","modified":0,"renderable":0},{"_id":"source/images/mysql/insertupdate/1.png","path":"images/mysql/insertupdate/1.png","modified":0,"renderable":0},{"_id":"source/images/mysql/insertupdate/2.png","path":"images/mysql/insertupdate/2.png","modified":0,"renderable":0},{"_id":"source/images/mysql/insertupdate/3.png","path":"images/mysql/insertupdate/3.png","modified":0,"renderable":0},{"_id":"source/images/mysql/insertupdate/4.png","path":"images/mysql/insertupdate/4.png","modified":0,"renderable":0},{"_id":"source/images/mysql/insertupdate/5.png","path":"images/mysql/insertupdate/5.png","modified":0,"renderable":0},{"_id":"source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":0},{"_id":"source/images/post_index.png","path":"images/post_index.png","modified":0,"renderable":0},{"_id":"source/images/post_banner.jpeg","path":"images/post_banner.jpeg","modified":0,"renderable":0},{"_id":"source/images/banner.jpeg","path":"images/banner.jpeg","modified":0,"renderable":0},{"_id":"source/images/about.jpeg","path":"images/about.jpeg","modified":0,"renderable":0},{"_id":"source/images/compress.png","path":"images/compress.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1602301488932},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1602301535898},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1602301535898},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1602301535898},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1602301535898},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1602301535898},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1602301535905},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1602301535899},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1602301535899},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1602301535899},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1602301535899},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1602301535899},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1602301535899},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1602301535900},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1602301535900},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1602301535900},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1602301535900},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1602301535900},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1602301535900},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1602301535904},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1602301535904},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1602301535904},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1602301535905},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1602301535905},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1602301535905},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1602301535905},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1602301535906},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1602301535900},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1602301535900},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1602301535901},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1602301535902},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1602301535902},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1602301535903},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1602301535903},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1602301535904},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1602301535904},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1602301535904},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1602301535904},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1602301535906},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1602301535909},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1602301535916},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1602301535917},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1602301535917},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1602301535917},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1602301535918},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1602301535918},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1602301535918},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1602301535921},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1602301535921},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1602301535922},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1602301535922},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1602301535902},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1602301535902},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1602301535902},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1602301535903},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1602301535903},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1602301535903},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1602301535906},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1602301535906},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1602301535906},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1602301535907},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1602301535907},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1602301535907},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1602301535907},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1602301535908},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1602301535908},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1602301535908},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1602301535908},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1602301535909},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1602301535910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1602301535910},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1602301535913},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1602301535919},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1602301535919},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1602301535919},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1602301535919},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1602301535920},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1602301535920},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1602301535913},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1602301535912},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1602301535915},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"557aef4c09566a4d09e33c0575ea2fb44786e179","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"8208e970e1f2267a4204b4e2aec0c458b8286395","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"afdfabc2763baa03ceda722c0a05e0f6680166f7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_static_prefix.yml","hash":"d5eb27044090c50bdee4ffcf738662ce469c870a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"2390818b24d2f525bfca6cbc7f55e6650a513f3d","modified":1645276314353},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"49a7f26815a25bbc2ed0ed78a966406f5d8c1c5e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"44d7248fb15361fd23b774f0816c6480b8fdc52e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"03defcd4409dce27447aa8dfe7ce41a2d47e373b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"55f62c4766f5d505e8307e667f83ea459b84dfb6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"7c40672443ba61b62b68a9aa6685ea944dbbb061","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"9f9e40a348771463cc70d6592198604ca49fc050","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"01439b3d7abdeb5e51f810d784181c1d420be55d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"eeb3462cbedd195156aa671fb522bebee0274b5e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"096fef408349db4ebbec84cf20a373dd46c8f4ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"3c254c1b7bc5a4c6bd5b724514d463608408018b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"2b9a49594e9aea4dc8fdd606a63c8c5b9189e325","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"38334350425008d1f64323de221457ee0948af0e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"ee7dfef805af96195c11223cca53983deace8bda","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"a25a40036ef38c8dc92574079007882a0d75338a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4f939807936632f2ff2504f139648033aa351957","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"c443551deb389102e65cbb2441f60e8c20712ee8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"1e7e4290a7653f748e0a46c81cc6aed4564f8bf4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"ec4e9678d2f4df03b1ad773adf57acc83a947687","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"source/about/index.md","hash":"8638ddb98b5319d9a4ab4b28813c252b4caf22b4","modified":1645293455125},{"_id":"public/local-search.xml","hash":"3fee97ff3f00015fe9ed4e4968ebc01aa940da93","modified":1645293183333},{"_id":"public/about/index.html","hash":"8d59f827969f6079a6bef73560c9be0d93da7c51","modified":1645293183333},{"_id":"public/2020/10/10/hello-world/index.html","hash":"28977057dd55f42d3e4e534f2ddeb1fff007c028","modified":1602310545027},{"_id":"public/archives/index.html","hash":"ea726cf6e997a73ec2923dba548e112c2bfb1c4b","modified":1645290292125},{"_id":"public/archives/2020/index.html","hash":"5cacd3bb6ec1351a101fa3ff88b206ad77f40bcd","modified":1645290292125},{"_id":"public/archives/2020/10/index.html","hash":"5bea7e991788ee0cb2ea4d76fdeff1e90b2750ef","modified":1645290292125},{"_id":"public/index.html","hash":"8bd7d4adc71985d1c7add763c2ef974067c3ae82","modified":1645293183333},{"_id":"public/404.html","hash":"ef5c972c5dc1d1ed99e326dc26da0a1b2d1b9304","modified":1645276351432},{"_id":"public/tags/index.html","hash":"17d15b7603fe29e9cc69408095400a376fa00f5b","modified":1645290292125},{"_id":"public/categories/index.html","hash":"95d813c6d86b42707a030b45b3d3f9bbf93c6d93","modified":1645293183333},{"_id":"public/links/index.html","hash":"a6704bcc8242b78d21ba822f95e371203c640aec","modified":1645276351432},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1645276351432},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1645276351432},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1645276351432},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1645276351432},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1645276351432},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1645276351432},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1645276351432},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1645276351432},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1645276351432},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1645276351432},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1645276351432},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1645276351432},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1645276351432},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1645276351432},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1645276351432},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1645276351432},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1645276351432},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1645276351432},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1645276351432},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1645276351432},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1645276351432},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1645276351432},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1645276351432},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1645276351432},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1645276351432},{"_id":"public/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1645276351432},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1645276351432},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1645276351432},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1645276351432},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1645276351432},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1645276351432},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1645276351432},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1645276351432},{"_id":"public/css/main.css","hash":"e0ae8bb467a0130d91334051cdd930d95c353537","modified":1645276351432},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1645276351432},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1645276351432},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1645276351432},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1645276351432},{"_id":"source/.DS_Store","hash":"30028c6ddc7de74462c3cff312bbd8904ad73c1f","modified":1603276868573},{"_id":"source/_posts/hello-andot.md","hash":"cd5670e3b6e62f03b4110acf84462b087d31a4b8","modified":1602418157533},{"_id":"source/_posts/spring/security/oauth/resource-server.md","hash":"5d89c664ec5b7f80b028fd9eb7735ac6e9210164","modified":1603123229853},{"_id":"source/_posts/bigdata/clickhouse/introduction/what-is-clickhouse.md","hash":"0cbdb7110c47fd355b3d4e370faeb288c7f08cd0","modified":1602993752796},{"_id":"public/2020/10/17/bigdata/clickhouse/introduction/what-is-clickhouse/index.html","hash":"f187358524b20947c8fa69537b89d52810209d8d","modified":1645294622836},{"_id":"public/2020/10/11/spring/security/oauth/resource-server/index.html","hash":"11cbb838214d4299a8c08b1317a083df40d61cc8","modified":1603123099952},{"_id":"public/2020/10/11/hello-andot/index.html","hash":"9ef258140c64f47564a13eeb8aebeecfd79d83a5","modified":1645294622836},{"_id":"public/tags/ClickHouse-BigData-Java/index.html","hash":"f783a3eedb81c1601eedef85ab066fbf7b1316b2","modified":1645276351432},{"_id":"public/tags/Security-Spring-Security-OAuth2-Resource-Server-Java/index.html","hash":"40c5cc6c3263a9536af4e92e98aeefa6cce626f4","modified":1645276351432},{"_id":"source/_posts/every_little_bit/docker/docker-compose-restart.md","hash":"3af0adbc9c43ccfbef582fc4fc685100f4c52830","modified":1645275477011},{"_id":"source/_posts/every_little_bit/spring/boot/springboot-log4j2.md","hash":"49f755c40574e4e9026952d81c28489bb7d2b2ee","modified":1645275477011},{"_id":"public/2020/10/11/every_little_bit/docker/docker-compose-restart/index.html","hash":"72854a00f955e7fca84e898cf6704fd3d28ba781","modified":1603123099952},{"_id":"public/tags/docker-docker-compose-start-Linux/index.html","hash":"88538ba38c698befcfbaaa331fe1e54be5c0dae5","modified":1645276351432},{"_id":"public/tags/SpringBoot-Logging-Log4J2-Java/index.html","hash":"db3c1bc64d0e4b38f77897b1701467eb263cb222","modified":1645276351432},{"_id":"public/2020/10/11/every_little_bit/spring/boot/springboot-log4j2/index.html","hash":"bbec90c0f6630f68bdf1dba54989f3ac1a4091a1","modified":1603123099952},{"_id":"public/2020/10/15/spring/security/oauth/resource-server/index.html","hash":"ff0a6e0d8eaf4d633bc8114bb6c6392f0f06e159","modified":1645294622836},{"_id":"public/2020/10/12/every_little_bit/docker/docker-compose-restart/index.html","hash":"3b4d5dd2c332203c41b8e5536ca4f39c49cd4493","modified":1645294622836},{"_id":"public/2020/10/14/every_little_bit/spring/boot/springboot-log4j2/index.html","hash":"b53cdd6e6f395a26d0fabfecb80ba5674c3a83d5","modified":1645294622836},{"_id":"source/CNAME","hash":"2c54afd718058ceb7331f5308515ef19cf1de184","modified":1603160525044},{"_id":"source/_posts/.DS_Store","hash":"b25d331815705b63a2cfae8efb8d489216bbb844","modified":1603164355798},{"_id":"source/_posts/2018/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1603164358795},{"_id":"source/_posts/2018/ShiroVSSpringSecurity.md","hash":"656e88d597f810a4fbbf8e1a95238d385b95aa5b","modified":1603160525045},{"_id":"source/_posts/2018/andot-blog-open-source-by-github.md","hash":"cff93a7aedbcef2f1a8357fa3700d06dd5a7079e","modified":1603160525045},{"_id":"source/_posts/2018/druidremove.md","hash":"d19783799fd3d72092482d3972075fa042a227cf","modified":1603160525045},{"_id":"source/_posts/2018/github_hexo_blog.md","hash":"9c607a69729271201c28300d3b716ceff41ff604","modified":1603160525045},{"_id":"source/_posts/2018/java-custom-annotation-study.md","hash":"e14a3a82463ab920e8e75dc4980c136e93b03d2b","modified":1603160525046},{"_id":"source/_posts/2018/java-package-base-info.md","hash":"bee3b24d446b5add6636b7e3bcae0f0776ebc5d2","modified":1603160525047},{"_id":"source/_posts/2018/pythontojava.md","hash":"b7d95b5a0cc953bef35ee4da6f279fdc22a697fa","modified":1603160525047},{"_id":"source/_posts/2018/springp.md","hash":"c31fd7be1daaed7eb52328095903663cbe03af4c","modified":1603160525048},{"_id":"public/2018/02/21/2018/andot-blog-open-source-by-github/index.html","hash":"204f700c92d3dc276a2d5ef4bf468758f646380a","modified":1645294622836},{"_id":"public/archives/page/2/index.html","hash":"2e844f7362c2fd5dabdf864360a53c771d778112","modified":1645290292125},{"_id":"public/archives/2018/index.html","hash":"3a12f643109cf9bf5ef009c1a16e4d34db2b7b08","modified":1645290292125},{"_id":"public/archives/2018/02/index.html","hash":"ff57e68d26470d5fc1ee1e10aa52421c56de28e2","modified":1645290292125},{"_id":"public/archives/2018/03/index.html","hash":"795088b7cb2ed401c3a6f1db07886541908860bf","modified":1645290292125},{"_id":"public/page/2/index.html","hash":"62fcbfdeb7130788b0d0d8efece7f1d220cbda81","modified":1645293183333},{"_id":"public/tags/github-andot-blog-hexo/index.html","hash":"419ad7ee47e685bc58b5ce928d6742d88ddb440f","modified":1645276351432},{"_id":"public/tags/Shiro-Spring-Security/index.html","hash":"22aa4a1b86f5c7dd8356a278fd6f2c7254dee432","modified":1645276351432},{"_id":"public/tags/druid-springboot-java/index.html","hash":"481eed0609e1b945683dc17335cb6aad70481514","modified":1645276351432},{"_id":"public/tags/GitHub-Hexo-nodejs-javascript/index.html","hash":"aa8417250db952f82f65273f5f7cca5043bed595","modified":1645276351432},{"_id":"public/tags/java-annotation/index.html","hash":"cf32b9dabfbf88fb6bedfc62a383e072e2b14129","modified":1645276351432},{"_id":"public/tags/python-java-urlib2-json-list/index.html","hash":"238abecc4c5eea7b71e133161c760451f4263918","modified":1645276351432},{"_id":"public/tags/spring-p-p/index.html","hash":"84a68c8a2ddb4acb7bcc1bebc2a7439b1f4b0033","modified":1645276351432},{"_id":"public/tags/Java-package/index.html","hash":"049df20c3f40df8d70c2a1c3a20da1d25c3952f3","modified":1645276351432},{"_id":"public/2018/03/01/2018/springp/index.html","hash":"5a15355d933549b38b6bd1f708deb5a9d14ef826","modified":1645294622836},{"_id":"public/2018/03/01/2018/pythontojava/index.html","hash":"3288368d7805d350729a41615850fd731227207a","modified":1645294622836},{"_id":"public/2018/03/01/2018/druidremove/index.html","hash":"0ce325946fde17c53f5fc83af075676c8fad0054","modified":1645294622836},{"_id":"public/2018/02/23/2018/java-package-base-info/index.html","hash":"a37522230b551f9b1e80bdecd2848a33028beedb","modified":1645294622836},{"_id":"public/2018/02/22/2018/java-custom-annotation-study/index.html","hash":"c3c82ee759dead73cf4a030bb84018fcf86fdfa1","modified":1645294622836},{"_id":"public/2018/02/21/2018/ShiroVSSpringSecurity/index.html","hash":"fd929314c1176d43dba9a7d93a20e1bd6930719d","modified":1645294622836},{"_id":"public/2018/02/20/2018/github_hexo_blog/index.html","hash":"a1fb3527d1d8fc69f29dabcfe6eaaa397fdf9231","modified":1645294622836},{"_id":"public/CNAME","hash":"2c54afd718058ceb7331f5308515ef19cf1de184","modified":1645279515867},{"_id":"source/de/zfb.jpg","hash":"3cdff1ac340000528846687feaf315b969f404a5","modified":1603160523246},{"_id":"source/de/wechat.jpg","hash":"0a56b7e571289397209f62faf299ea1aa9b43fcf","modified":1603160523246},{"_id":"public/de/wechat.jpg","hash":"0a56b7e571289397209f62faf299ea1aa9b43fcf","modified":1603164532988},{"_id":"public/de/zfb.jpg","hash":"3cdff1ac340000528846687feaf315b969f404a5","modified":1603164532988},{"_id":"source/resource/zfb.jpg","hash":"3cdff1ac340000528846687feaf315b969f404a5","modified":1603160523246},{"_id":"source/resource/wechat.jpg","hash":"0a56b7e571289397209f62faf299ea1aa9b43fcf","modified":1603160523246},{"_id":"public/resource/wechat.jpg","hash":"0a56b7e571289397209f62faf299ea1aa9b43fcf","modified":1645276351432},{"_id":"public/resource/zfb.jpg","hash":"3cdff1ac340000528846687feaf315b969f404a5","modified":1645276351432},{"_id":"source/resource/.DS_Store","hash":"fdb9aeada8735d3326aa28cb18eaa4b4c0ed9534","modified":1603277095772},{"_id":"source/resource/music/.DS_Store","hash":"db91c2844e29aa4f217d67b523e0c7f595ad8472","modified":1603277100885},{"_id":"source/resource/music/yq.mp3","hash":"eaaf7e86d4eb1e2e1c3af44c5ed49f14181d3b44","modified":1603277073502},{"_id":"source/resource/logo.png","hash":"0a92246f115f87a32953f95fdaa9f9e44bb0794f","modified":1603278192868},{"_id":"public/resource/logo.png","hash":"0a92246f115f87a32953f95fdaa9f9e44bb0794f","modified":1645276351432},{"_id":"public/resource/music/yq.mp3","hash":"eaaf7e86d4eb1e2e1c3af44c5ed49f14181d3b44","modified":1645276351432},{"_id":"source/_posts/mysql/mysql_implment_indeterminate_column.md","hash":"7bb3618adad005bd14606a3b80927057253f85f3","modified":1645292038733},{"_id":"source/_posts/mysql/mysql_inner_not_limit.md","hash":"f53edcefcd044f03bdeeec425dcae3f657b21b3e","modified":1645292035339},{"_id":"source/_posts/maven/maven-auto-package.md","hash":"e7e9733d3b1bbffa151b26e97341aef1fee123a0","modified":1645275477012},{"_id":"source/_posts/java/thread/thread_pool_settings.md","hash":"37872720af7a081b6bae51293018fa9a9c286586","modified":1645291162269},{"_id":"source/_posts/bigdata/elasticsearch/springboot-elasticsearch.md","hash":"8f59a208590559278b9bfc5d5e667e6c2be6f1f5","modified":1645288892402},{"_id":"public/archives/2020/12/index.html","hash":"6b2424896039188ed061fa91b609c2a08e8a2850","modified":1645290292125},{"_id":"public/tags/Java-MySQL-IN-EXISTS-SQL优化-Design/index.html","hash":"79820a6436ea0c220d151c2edb91d94e228b548d","modified":1645279515867},{"_id":"public/tags/Java-MySQL-IN-EXISTS-SQL优化/index.html","hash":"3fcbd5545fce2e87aec33c0f5e490b4c3f162ed1","modified":1645280274642},{"_id":"public/tags/Java-devops-auto-package-Maven-Linux/index.html","hash":"7ca913c1e452356da354013f5d381944235df07a","modified":1645279515867},{"_id":"public/tags/ThreadPoolExecutor-Java-ThreadPool-线程池-高并发/index.html","hash":"224efe52ccc38882d6283e9043654cae09b6ab9f","modified":1645279515867},{"_id":"public/2020/12/09/mysql/mysql_implment_indeterminate_column/index.html","hash":"c85afb5b29c64e2a3157798d30892c705b07eaa2","modified":1645294622836},{"_id":"public/2020/12/09/mysql/mysql_inner_not_limit/index.html","hash":"6d650734c9f6264efd84f1d6dfac1685e765f7dc","modified":1645294622836},{"_id":"public/2020/10/29/maven/maven-auto-package/index.html","hash":"3820510e440a197110d3eab344e80882993f06b1","modified":1645294622836},{"_id":"public/2020/10/20/java/thread/thread_pool_settings/index.html","hash":"abed1c75fa1ef3e66697f7cc87091d2d2982e6cd","modified":1645294622836},{"_id":"source/_posts/mysql/mysql_partition_research.md","hash":"96171e825792503feabf2ad13f10850e70f9cbbd","modified":1645292041760},{"_id":"source/resource/docs/mysql/partition/range.png","hash":"0e1da7dd97dd24a8741d99c1ae761abd9044f057","modified":1645278581138},{"_id":"source/resource/docs/mysql/partition/index.png","hash":"ef1ed654e2ae862493e480d0bac12057d9e020bf","modified":1645278270271},{"_id":"public/archives/2021/index.html","hash":"bdc450435161e4ec04c17aed7fc9c1e8db8f2055","modified":1645290292125},{"_id":"public/archives/2021/11/index.html","hash":"ad65e771f35186e74f727e3204f73d22fa5bc9f1","modified":1645290292125},{"_id":"public/2021/11/17/mysql/mysql_partition_research/index.html","hash":"dad82f1a255515bbc99cbab661517c78f4744d3a","modified":1645294622836},{"_id":"public/resource/docs/mysql/partition/range.png","hash":"0e1da7dd97dd24a8741d99c1ae761abd9044f057","modified":1645279515867},{"_id":"public/resource/docs/mysql/partition/index.png","hash":"ef1ed654e2ae862493e480d0bac12057d9e020bf","modified":1645279515867},{"_id":"source/resource/docs/mysql/partition/child.png","hash":"8bc070058d7fdba970da8da7a193d42c442ebc29","modified":1645278993740},{"_id":"source/resource/docs/mysql/partition/key.png","hash":"cb13063b915059f23af809b6b3e16a4b101e911d","modified":1645278986382},{"_id":"source/resource/docs/mysql/partition/hash.png","hash":"2c543ac876ec9a93d651845673736fa478ec27db","modified":1645278951574},{"_id":"source/resource/docs/mysql/partition/list.png","hash":"79ff8d9c714e52974e3a99ca82f2ee3506d6ab43","modified":1645278899095},{"_id":"public/resource/docs/mysql/partition/hash.png","hash":"2c543ac876ec9a93d651845673736fa478ec27db","modified":1645279515867},{"_id":"public/resource/docs/mysql/partition/key.png","hash":"cb13063b915059f23af809b6b3e16a4b101e911d","modified":1645279515867},{"_id":"public/resource/docs/mysql/partition/child.png","hash":"8bc070058d7fdba970da8da7a193d42c442ebc29","modified":1645279515867},{"_id":"public/resource/docs/mysql/partition/list.png","hash":"79ff8d9c714e52974e3a99ca82f2ee3506d6ab43","modified":1645279515867},{"_id":"source/images/mysql/partition/child.png","hash":"8bc070058d7fdba970da8da7a193d42c442ebc29","modified":1645278993740},{"_id":"source/images/mysql/partition/hash.png","hash":"2c543ac876ec9a93d651845673736fa478ec27db","modified":1645278951574},{"_id":"source/images/mysql/partition/index.png","hash":"ef1ed654e2ae862493e480d0bac12057d9e020bf","modified":1645278270271},{"_id":"source/images/mysql/partition/key.png","hash":"cb13063b915059f23af809b6b3e16a4b101e911d","modified":1645278986382},{"_id":"source/images/mysql/partition/list.png","hash":"79ff8d9c714e52974e3a99ca82f2ee3506d6ab43","modified":1645278899095},{"_id":"source/images/mysql/partition/range.png","hash":"0e1da7dd97dd24a8741d99c1ae761abd9044f057","modified":1645278581138},{"_id":"public/tags/Java-MySQL-Partition/index.html","hash":"bc1ebc4b8cb31987334fb23818272fd886084230","modified":1654335919954},{"_id":"public/images/mysql/partition/child.png","hash":"8bc070058d7fdba970da8da7a193d42c442ebc29","modified":1654335919954},{"_id":"public/images/mysql/partition/hash.png","hash":"2c543ac876ec9a93d651845673736fa478ec27db","modified":1654335919954},{"_id":"public/images/mysql/partition/key.png","hash":"cb13063b915059f23af809b6b3e16a4b101e911d","modified":1654335919954},{"_id":"public/images/mysql/partition/list.png","hash":"79ff8d9c714e52974e3a99ca82f2ee3506d6ab43","modified":1654335919954},{"_id":"public/images/mysql/partition/index.png","hash":"ef1ed654e2ae862493e480d0bac12057d9e020bf","modified":1654335919954},{"_id":"public/images/mysql/partition/range.png","hash":"0e1da7dd97dd24a8741d99c1ae761abd9044f057","modified":1654335919954},{"_id":"source/_posts/mysql/mysql_insert_update.md","hash":"f42c212ff48af5f9e74f2926bad39ea62ab5f603","modified":1645292032253},{"_id":"source/images/mysql/index.png","hash":"6df4be20ace687df2e71f44e2e1e0d18e52e9f5c","modified":1645280828515},{"_id":"source/images/mysql/insertupdate/1.png","hash":"6c8a17e0d462859ed091bd38ce1e91a39885aa6b","modified":1645280932473},{"_id":"source/images/mysql/insertupdate/2.png","hash":"2a9176a1bafe5131394491e9df784e42bd5d19a7","modified":1645280958954},{"_id":"source/images/mysql/insertupdate/3.png","hash":"cb4902f5b12fe4c9e6787ef78f1c59727e1a066c","modified":1645281026733},{"_id":"source/images/mysql/insertupdate/4.png","hash":"cb5986710ee23bc7652f3cb38f5463e293f89975","modified":1645280971188},{"_id":"source/images/mysql/insertupdate/5.png","hash":"6682b2e87ba0ac0cf1e0e9682552b2de3fffd7e0","modified":1645280986570},{"_id":"public/archives/2022/index.html","hash":"62c0b677e1c60c0d12fffad348b5bec5e0af38a7","modified":1645281210591},{"_id":"public/archives/2022/02/index.html","hash":"62c0b677e1c60c0d12fffad348b5bec5e0af38a7","modified":1645281210591},{"_id":"public/tags/replace-duplicate-on-duplicate-key-update-insert-and-update-mysql/index.html","hash":"12ffdb3ba059643a957824a1289bc18605f4db6b","modified":1654335919954},{"_id":"public/2022/02/19/mysql/mysql_insert_update/index.html","hash":"dd7af72cda19742707301f985526fab8bc3f61de","modified":1645281210591},{"_id":"public/images/mysql/insertupdate/2.png","hash":"2a9176a1bafe5131394491e9df784e42bd5d19a7","modified":1654335919954},{"_id":"public/images/mysql/insertupdate/3.png","hash":"cb4902f5b12fe4c9e6787ef78f1c59727e1a066c","modified":1654335919954},{"_id":"public/images/mysql/insertupdate/1.png","hash":"6c8a17e0d462859ed091bd38ce1e91a39885aa6b","modified":1654335919954},{"_id":"public/images/mysql/index.png","hash":"6df4be20ace687df2e71f44e2e1e0d18e52e9f5c","modified":1654335919954},{"_id":"public/images/mysql/insertupdate/4.png","hash":"cb5986710ee23bc7652f3cb38f5463e293f89975","modified":1654335919954},{"_id":"public/images/mysql/insertupdate/5.png","hash":"6682b2e87ba0ac0cf1e0e9682552b2de3fffd7e0","modified":1654335919954},{"_id":"public/archives/2021/10/index.html","hash":"567ece5f5e8333a4c78e8f068c4ded6816dc5022","modified":1654335919954},{"_id":"public/2021/10/14/mysql/mysql_insert_update/index.html","hash":"18424a5976c76d3377bbc09b215caafa45866e21","modified":1654335919954},{"_id":"source/images/banner.jpg","hash":"ae4b4ec45f5c3f54b0751262ebe135b01143b61b","modified":1645281984362},{"_id":"public/images/banner.jpg","hash":"ae4b4ec45f5c3f54b0751262ebe135b01143b61b","modified":1654335919954},{"_id":"source/admin/config.yml","hash":"f6bb68ac24bb5dc46331f3d812b335a222f90dba","modified":1645288759776},{"_id":"source/admin/index.html","hash":"f664c289c27da21a24530ab69e0331e0879311cb","modified":1645288391300},{"_id":"public/admin/config.json","hash":"ee4717855ff6ccc343e96391ac494dac0cc6c3ac","modified":1645290292125},{"_id":"public/admin/config.yml","hash":"96167b5ec80cdbfea3662fb363d8ebb54426a0f8","modified":1645290292125},{"_id":"public/admin/index.html","hash":"f919b9433c96caa16c9fa60919d72da66ba45871","modified":1645290292125},{"_id":"public/tags/Java-springboot-Spring-Linux-Bigdata-NoSQL-Elasticsearch/index.html","hash":"dc594ee04d5bfaebe67da39e054a79f86cfa6b4e","modified":1654335919954},{"_id":"public/2020/10/22/bigdata/elasticsearch/springboot-elasticsearch/index.html","hash":"afce56f6e59b6f4a806d46dcaa9504644537762f","modified":1654335919954},{"_id":"source/images/post_index.png","hash":"76b421e31816806dd636b2ab94b8cc135c3c5989","modified":1645291464646},{"_id":"source/images/post_banner.jpeg","hash":"bef67cc57d7c5b03544967b381613e0528ee9efb","modified":1645291979786},{"_id":"source/images/banner.jpeg","hash":"7f42e34b69252fe84956d89e6aff6d1eb32a456b","modified":1645292204018},{"_id":"source/slide/slide.md","hash":"448db2d6cdb8164acc40cfc9b99db53081e4280e","modified":1645293033894},{"_id":"public/slide/slide.html","hash":"a3da06832495ac0fc416d0cd20c24f080e74c9b2","modified":1654335919954},{"_id":"public/categories/Java-Base/index.html","hash":"dddb38acf6feb6ed5f7fa3b6a7efb2fd2ed249ac","modified":1654335919954},{"_id":"public/categories/MySQL/index.html","hash":"08cc119afe7519acdc954494650ffdbaf1ef7535","modified":1654335919954},{"_id":"public/images/post_banner.jpeg","hash":"bef67cc57d7c5b03544967b381613e0528ee9efb","modified":1654335919954},{"_id":"public/images/banner.jpeg","hash":"7f42e34b69252fe84956d89e6aff6d1eb32a456b","modified":1654335919954},{"_id":"public/images/post_index.png","hash":"76b421e31816806dd636b2ab94b8cc135c3c5989","modified":1654335919954},{"_id":"source/images/about.jpeg","hash":"fe18a98c8b8bed8b88d9839a3e3b13dcd47a8f9a","modified":1645293434552},{"_id":"source/images/compress.png","hash":"18e653aeefcc97406fe6046eefa72f3a62a474f5","modified":1645293319767},{"_id":"public/images/about.jpeg","hash":"fe18a98c8b8bed8b88d9839a3e3b13dcd47a8f9a","modified":1654335919954},{"_id":"public/images/compress.png","hash":"18e653aeefcc97406fe6046eefa72f3a62a474f5","modified":1654335919954}],"Category":[{"name":"Java Base","_id":"ckzu3ypo30000haw13f0hfw3p"},{"name":"MySQL","_id":"ckzu48zib0000tew1d2baf8ow"}],"Data":[],"Page":[{"title":"about","date":"2020-10-10T03:54:51.000Z","layout":"about","banner_img":"/images/about.jpeg","_content":"\nAndotStudio Is Blog.\n\n## 参考\n[^1]: 参考资料1\n[^2]: 参考资料2","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-10 11:54:51\nlayout: about\nbanner_img: /images/about.jpeg # 文章banner图\n---\n\nAndotStudio Is Blog.\n\n## 参考\n[^1]: 参考资料1\n[^2]: 参考资料2","updated":"2022-02-19T17:57:35.125Z","path":"about/index.html","_id":"ckg35c9wy0000orfy14c4220q","comments":1,"content":"<p>AndotStudio Is Blog.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>参考资料1\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>参考资料2\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"excerpt":"","more":"<p>AndotStudio Is Blog.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>参考资料1\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>参考资料2\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"_content":"title: nodeppt markdown 演示\nspeaker: lucas\nurl: https://github.com/andotorg\njs:\n    - https://www.echartsjs.com/asset/theme/shine.js\nprismTheme: solarizedlight\nplugins:\n    - echarts\n    - mermaid\n    - katex\n\n<slide class=\"bg-black-blue aligncenter\" image=\"https://www.10wallpaper.com/wallpaper/1366x768/1606/Samoa_Upolu_Sua_Ocean_Trench-2016_Bing_Desktop_Wallpaper_1366x768.jpg\">\n\n# slide {.text-landing.text-shadow}\n\nBy lucas {.text-intro}\n\n[:fa-github: Github](https://github.com/ksky521/nodeppt){.button.ghost}\n\n\n<slide class=\"bg-black-blue aligncenter\" image=\"https://source.unsplash.com/C1HhAQrbykQ/ .dark\">\n\n# slide {.text-landing.text-shadow}\n\nBy zhangsan {.text-intro}","source":"slide/slide.md","raw":"title: nodeppt markdown 演示\nspeaker: lucas\nurl: https://github.com/andotorg\njs:\n    - https://www.echartsjs.com/asset/theme/shine.js\nprismTheme: solarizedlight\nplugins:\n    - echarts\n    - mermaid\n    - katex\n\n<slide class=\"bg-black-blue aligncenter\" image=\"https://www.10wallpaper.com/wallpaper/1366x768/1606/Samoa_Upolu_Sua_Ocean_Trench-2016_Bing_Desktop_Wallpaper_1366x768.jpg\">\n\n# slide {.text-landing.text-shadow}\n\nBy lucas {.text-intro}\n\n[:fa-github: Github](https://github.com/ksky521/nodeppt){.button.ghost}\n\n\n<slide class=\"bg-black-blue aligncenter\" image=\"https://source.unsplash.com/C1HhAQrbykQ/ .dark\">\n\n# slide {.text-landing.text-shadow}\n\nBy zhangsan {.text-intro}","date":"2022-02-19T17:50:33.894Z","updated":"2022-02-19T17:50:33.894Z","path":"slide/slide.html","title":"","comments":1,"layout":"page","_id":"ckzu52xmg0000ygw1d2we10m2","content":"<p>title: nodeppt markdown 演示<br>speaker: lucas<br>url: <a href=\"https://github.com/andotorg\">https://github.com/andotorg</a><br>js:<br>    - <a href=\"https://www.echartsjs.com/asset/theme/shine.js\">https://www.echartsjs.com/asset/theme/shine.js</a><br>prismTheme: solarizedlight<br>plugins:<br>    - echarts<br>    - mermaid<br>    - katex</p>\n<slide class=\"bg-black-blue aligncenter\" image=\"https://www.10wallpaper.com/wallpaper/1366x768/1606/Samoa_Upolu_Sua_Ocean_Trench-2016_Bing_Desktop_Wallpaper_1366x768.jpg\">\n\n<h1 id=\"slide-text-landing-text-shadow\"><a href=\"#slide-text-landing-text-shadow\" class=\"headerlink\" title=\"slide {.text-landing.text-shadow}\"></a>slide {.text-landing.text-shadow}</h1><p>By lucas {.text-intro}</p>\n<p><a href=\"https://github.com/ksky521/nodeppt\">:fa-github: Github</a>{.button.ghost}</p>\n<slide class=\"bg-black-blue aligncenter\" image=\"https://source.unsplash.com/C1HhAQrbykQ/ .dark\">\n\n<h1 id=\"slide-text-landing-text-shadow-1\"><a href=\"#slide-text-landing-text-shadow-1\" class=\"headerlink\" title=\"slide {.text-landing.text-shadow}\"></a>slide {.text-landing.text-shadow}</h1><p>By zhangsan {.text-intro}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>title: nodeppt markdown 演示<br>speaker: lucas<br>url: <a href=\"https://github.com/andotorg\">https://github.com/andotorg</a><br>js:<br>    - <a href=\"https://www.echartsjs.com/asset/theme/shine.js\">https://www.echartsjs.com/asset/theme/shine.js</a><br>prismTheme: solarizedlight<br>plugins:<br>    - echarts<br>    - mermaid<br>    - katex</p>\n<slide class=\"bg-black-blue aligncenter\" image=\"https://www.10wallpaper.com/wallpaper/1366x768/1606/Samoa_Upolu_Sua_Ocean_Trench-2016_Bing_Desktop_Wallpaper_1366x768.jpg\">\n\n<h1 id=\"slide-text-landing-text-shadow\"><a href=\"#slide-text-landing-text-shadow\" class=\"headerlink\" title=\"slide {.text-landing.text-shadow}\"></a>slide {.text-landing.text-shadow}</h1><p>By lucas {.text-intro}</p>\n<p><a href=\"https://github.com/ksky521/nodeppt\">:fa-github: Github</a>{.button.ghost}</p>\n<slide class=\"bg-black-blue aligncenter\" image=\"https://source.unsplash.com/C1HhAQrbykQ/ .dark\">\n\n<h1 id=\"slide-text-landing-text-shadow-1\"><a href=\"#slide-text-landing-text-shadow-1\" class=\"headerlink\" title=\"slide {.text-landing.text-shadow}\"></a>slide {.text-landing.text-shadow}</h1><p>By zhangsan {.text-intro}</p>\n"}],"Post":[{"title":"Hello Andot Studio","_content":"Welcome to [AndotStudio](https://andot.org/)! \n\n## 欢迎您们来到我的个人博客\n\n### 知乎\n\n> 个人主页：https://www.zhihu.com/people/antsdot\n\n> 知乎专栏：https://www.zhihu.com/column/artskill\n","source":"_posts/hello-andot.md","raw":"---\ntitle: Hello Andot Studio\n---\nWelcome to [AndotStudio](https://andot.org/)! \n\n## 欢迎您们来到我的个人博客\n\n### 知乎\n\n> 个人主页：https://www.zhihu.com/people/antsdot\n\n> 知乎专栏：https://www.zhihu.com/column/artskill\n","slug":"hello-andot","published":1,"date":"2020-10-11T11:56:54.974Z","updated":"2020-10-11T12:09:17.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgdhp5cq00003zfy24ysacga","content":"<p>Welcome to <a href=\"https://andot.org/\">AndotStudio</a>! </p>\n<h2 id=\"欢迎您们来到我的个人博客\"><a href=\"#欢迎您们来到我的个人博客\" class=\"headerlink\" title=\"欢迎您们来到我的个人博客\"></a>欢迎您们来到我的个人博客</h2><h3 id=\"知乎\"><a href=\"#知乎\" class=\"headerlink\" title=\"知乎\"></a>知乎</h3><blockquote>\n<p>个人主页：<a href=\"https://www.zhihu.com/people/antsdot\">https://www.zhihu.com/people/antsdot</a></p>\n</blockquote>\n<blockquote>\n<p>知乎专栏：<a href=\"https://www.zhihu.com/column/artskill\">https://www.zhihu.com/column/artskill</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://andot.org/\">AndotStudio</a>! </p>\n<h2 id=\"欢迎您们来到我的个人博客\"><a href=\"#欢迎您们来到我的个人博客\" class=\"headerlink\" title=\"欢迎您们来到我的个人博客\"></a>欢迎您们来到我的个人博客</h2><h3 id=\"知乎\"><a href=\"#知乎\" class=\"headerlink\" title=\"知乎\"></a>知乎</h3><blockquote>\n<p>个人主页：<a href=\"https://www.zhihu.com/people/antsdot\">https://www.zhihu.com/people/antsdot</a></p>\n</blockquote>\n<blockquote>\n<p>知乎专栏：<a href=\"https://www.zhihu.com/column/artskill\">https://www.zhihu.com/column/artskill</a></p>\n</blockquote>\n"},{"title":"什么是ClickHouse？","date":"2020-10-17T12:04:38.000Z","_content":"\n# 什么是ClickHouse\n\n> ClickHouse是一个面向列的数据库管理系统（DBMS），用于联机分析处理查询（OLAP）。\n\n在面向行的“普通”DBMS中，数据按以下顺序存储：\n\n| Row | WatchID | JavaEnable | Title | GoodEvent | EventTime\n|---|---|---|---|---|---|\n|#0 | 89354350662 | 1 | Investor Relations | 1 | 2016-05-18 05:19:20|\n|#1 | 90329509958 | 0 | Contact us | 1 | 2016-05-18 08:10:20|\n|#2 | 89953706054 | 1 | Mission | 1 | 2016-05-18 07:38:00|\n|#N | … | … | … | … | …|\n\n\n","source":"_posts/bigdata/clickhouse/introduction/what-is-clickhouse.md","raw":"---\ntitle: 什么是ClickHouse？\ndate: 2020-10-17 20:04:38\ntags: ClickHouse,BigData,Java\n---\n\n# 什么是ClickHouse\n\n> ClickHouse是一个面向列的数据库管理系统（DBMS），用于联机分析处理查询（OLAP）。\n\n在面向行的“普通”DBMS中，数据按以下顺序存储：\n\n| Row | WatchID | JavaEnable | Title | GoodEvent | EventTime\n|---|---|---|---|---|---|\n|#0 | 89354350662 | 1 | Investor Relations | 1 | 2016-05-18 05:19:20|\n|#1 | 90329509958 | 0 | Contact us | 1 | 2016-05-18 08:10:20|\n|#2 | 89953706054 | 1 | Mission | 1 | 2016-05-18 07:38:00|\n|#N | … | … | … | … | …|\n\n\n","slug":"bigdata/clickhouse/introduction/what-is-clickhouse","published":1,"updated":"2020-10-18T04:02:32.796Z","_id":"ckgdhp5cx00013zfyfypwd9kb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是ClickHouse\"><a href=\"#什么是ClickHouse\" class=\"headerlink\" title=\"什么是ClickHouse\"></a>什么是ClickHouse</h1><blockquote>\n<p>ClickHouse是一个面向列的数据库管理系统（DBMS），用于联机分析处理查询（OLAP）。</p>\n</blockquote>\n<p>在面向行的“普通”DBMS中，数据按以下顺序存储：</p>\n<table>\n<thead>\n<tr>\n<th>Row</th>\n<th>WatchID</th>\n<th>JavaEnable</th>\n<th>Title</th>\n<th>GoodEvent</th>\n<th>EventTime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#0</td>\n<td>89354350662</td>\n<td>1</td>\n<td>Investor Relations</td>\n<td>1</td>\n<td>2016-05-18 05:19:20</td>\n</tr>\n<tr>\n<td>#1</td>\n<td>90329509958</td>\n<td>0</td>\n<td>Contact us</td>\n<td>1</td>\n<td>2016-05-18 08:10:20</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>89953706054</td>\n<td>1</td>\n<td>Mission</td>\n<td>1</td>\n<td>2016-05-18 07:38:00</td>\n</tr>\n<tr>\n<td>#N</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是ClickHouse\"><a href=\"#什么是ClickHouse\" class=\"headerlink\" title=\"什么是ClickHouse\"></a>什么是ClickHouse</h1><blockquote>\n<p>ClickHouse是一个面向列的数据库管理系统（DBMS），用于联机分析处理查询（OLAP）。</p>\n</blockquote>\n<p>在面向行的“普通”DBMS中，数据按以下顺序存储：</p>\n<table>\n<thead>\n<tr>\n<th>Row</th>\n<th>WatchID</th>\n<th>JavaEnable</th>\n<th>Title</th>\n<th>GoodEvent</th>\n<th>EventTime</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#0</td>\n<td>89354350662</td>\n<td>1</td>\n<td>Investor Relations</td>\n<td>1</td>\n<td>2016-05-18 05:19:20</td>\n</tr>\n<tr>\n<td>#1</td>\n<td>90329509958</td>\n<td>0</td>\n<td>Contact us</td>\n<td>1</td>\n<td>2016-05-18 08:10:20</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>89953706054</td>\n<td>1</td>\n<td>Mission</td>\n<td>1</td>\n<td>2016-05-18 07:38:00</td>\n</tr>\n<tr>\n<td>#N</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n"},{"title":"Spring Security OAuth2 Resource Server 创建","date":"2020-10-14T16:00:00.000Z","_content":"\n# Spring Security OAuth2 Resource Server 创建\n","source":"_posts/spring/security/oauth/resource-server.md","raw":"---\ntitle: Spring Security OAuth2 Resource Server 创建\ndate: 2020-10-15\ntags: Security,Spring Security,OAuth2,Resource Server,Java\n---\n\n# Spring Security OAuth2 Resource Server 创建\n","slug":"spring/security/oauth/resource-server","published":1,"updated":"2020-10-19T16:00:29.853Z","_id":"ckgdhp5cz00023zfy1idwhm7z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring-Security-OAuth2-Resource-Server-创建\"><a href=\"#Spring-Security-OAuth2-Resource-Server-创建\" class=\"headerlink\" title=\"Spring Security OAuth2 Resource Server 创建\"></a>Spring Security OAuth2 Resource Server 创建</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Security-OAuth2-Resource-Server-创建\"><a href=\"#Spring-Security-OAuth2-Resource-Server-创建\" class=\"headerlink\" title=\"Spring Security OAuth2 Resource Server 创建\"></a>Spring Security OAuth2 Resource Server 创建</h1>"},{"title":"Docker compose 启动的容器设置开启自动启该容器","date":"2020-10-11T16:00:00.000Z","_content":"\n# Docker compose 启动的容器设置开启自动启该容器\n\n### 在docker配置文件 docker-compose.yml 添加属性\n\n```\nversion: '3.3'\nservices:\nweb:\n    image: demo:1.0.0\n    ports:\n      - 8000:8000\n    restart: always\n```\n\n","source":"_posts/every_little_bit/docker/docker-compose-restart.md","raw":"---\ntitle: Docker compose 启动的容器设置开启自动启该容器\ndate: 2020-10-12\ntags: docker,docker compose,start,Linux\n---\n\n# Docker compose 启动的容器设置开启自动启该容器\n\n### 在docker配置文件 docker-compose.yml 添加属性\n\n```\nversion: '3.3'\nservices:\nweb:\n    image: demo:1.0.0\n    ports:\n      - 8000:8000\n    restart: always\n```\n\n","slug":"every_little_bit/docker/docker-compose-restart","published":1,"updated":"2022-02-19T12:57:57.011Z","_id":"ckggpzfu900000ufy78z44npa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Docker-compose-启动的容器设置开启自动启该容器\"><a href=\"#Docker-compose-启动的容器设置开启自动启该容器\" class=\"headerlink\" title=\"Docker compose 启动的容器设置开启自动启该容器\"></a>Docker compose 启动的容器设置开启自动启该容器</h1><h3 id=\"在docker配置文件-docker-compose-yml-添加属性\"><a href=\"#在docker配置文件-docker-compose-yml-添加属性\" class=\"headerlink\" title=\"在docker配置文件 docker-compose.yml 添加属性\"></a>在docker配置文件 docker-compose.yml 添加属性</h3><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">version</span>: <span class=\"hljs-string\">&#x27;3.3&#x27;</span>\n<span class=\"hljs-attribute\">services</span>:\n<span class=\"hljs-attribute\">web</span>:\n    <span class=\"hljs-attribute\">image</span>: <span class=\"hljs-attribute\">demo</span>:<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attribute\">ports</span>:\n      - <span class=\"hljs-number\">8000</span>:<span class=\"hljs-number\">8000</span>\n    <span class=\"hljs-attribute\">restart</span>: always</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker-compose-启动的容器设置开启自动启该容器\"><a href=\"#Docker-compose-启动的容器设置开启自动启该容器\" class=\"headerlink\" title=\"Docker compose 启动的容器设置开启自动启该容器\"></a>Docker compose 启动的容器设置开启自动启该容器</h1><h3 id=\"在docker配置文件-docker-compose-yml-添加属性\"><a href=\"#在docker配置文件-docker-compose-yml-添加属性\" class=\"headerlink\" title=\"在docker配置文件 docker-compose.yml 添加属性\"></a>在docker配置文件 docker-compose.yml 添加属性</h3><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">version</span>: <span class=\"hljs-string\">&#x27;3.3&#x27;</span>\n<span class=\"hljs-attribute\">services</span>:\n<span class=\"hljs-attribute\">web</span>:\n    <span class=\"hljs-attribute\">image</span>: <span class=\"hljs-attribute\">demo</span>:<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attribute\">ports</span>:\n      - <span class=\"hljs-number\">8000</span>:<span class=\"hljs-number\">8000</span>\n    <span class=\"hljs-attribute\">restart</span>: always</code></pre>\n\n"},{"title":"Spring Boot 更换 Logging 框架为 Log4J2","date":"2020-10-13T16:00:00.000Z","_content":"\n# Spring Boot 更换 Logging 框架为 Log4J2\n\n### 排除掉SpringBoot现有Logback依赖\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n### 加入Log4J2 的依赖\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n### 配置application.yml 配置文件\n\n```\nlogging:\n    config: classpath: config/log4j2-dev.xml\n```\n\n### log4j2-dev.xml 根据官方文档进行配置\n\n地址： https://logging.apache.org/log4j/2.x/manual/layouts.html\n\n推荐配置：(网络上找到的不错的配置)\n\n```\n<Configuration status=\"INFO\" monitorInterval=\"30\">\n    <Properties>\n        <!--  输出路径  -->\n        <Property name=\"logpath\">/Log4j/logs/log/dev</Property>\n    </Properties>\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout\n                    pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n        </Console>\n        <RollingFile name=\"debug\" fileName=\"${logpath}/debug/erp_debug.log\"\n                     filePattern=\"${logpath}/debug/erp_debug_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"info\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/debug\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_debug_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"info\" fileName=\"${logpath}/info/erp_info.log\"\n                     filePattern=\"${logpath}/info/erp_info_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"warn\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/info\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_info_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"warn\" fileName=\"${logpath}/warn/erp_warn.log\"\n                     filePattern=\"${logpath}/warn/erp_warn_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"warn\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/warn\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_warn_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"error\" fileName=\"${logpath}/error/erp_error.log\"\n                     filePattern=\"${logpath}/error/erp_error_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                  <!--   每个文件最大50M -->\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/error\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_error_*.log\"/>\n                     <!-- 设置最大保存时间为15天-->\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n\n    </Appenders>\n   <!--切换输出级别-->\n    <Loggers>\n        <Root level=\"info\">\n            <AppenderRef ref=\"Console\"/>\n            <AppenderRef ref=\"debug\"/>\n            <AppenderRef ref=\"info\"/>\n            <AppenderRef ref=\"warn\"/>\n            <AppenderRef ref=\"error\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n### 注意的地方\n\nlog4j2的配置文件是支持yml格式，但是如果使用yml格式的需要加入yml解析依赖包才能起作用，要不然有错误\n\n\n```\n<dependency>\n    <groupId>com.fasterxml.jackson.dataformat</groupId>\n    <artifactId>jackson-dataformat-yaml</artifactId>\n</dependency>\n```\n\n> 如果不加这个依赖，会有项目启动报错：Could not initialize Log4J2 logging from classpath:log4j2-dev.yml\n\n### SpringBoot配置文件中还可以加入打印级别指定\n\n```\nlogging:\n    level:\n        org.springframework=INFO\n```","source":"_posts/every_little_bit/spring/boot/springboot-log4j2.md","raw":"---\ntitle: Spring Boot 更换 Logging 框架为 Log4J2\ndate: 2020-10-14\ntags: SpringBoot,Logging,Log4J2,Java\n---\n\n# Spring Boot 更换 Logging 框架为 Log4J2\n\n### 排除掉SpringBoot现有Logback依赖\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n### 加入Log4J2 的依赖\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```\n\n### 配置application.yml 配置文件\n\n```\nlogging:\n    config: classpath: config/log4j2-dev.xml\n```\n\n### log4j2-dev.xml 根据官方文档进行配置\n\n地址： https://logging.apache.org/log4j/2.x/manual/layouts.html\n\n推荐配置：(网络上找到的不错的配置)\n\n```\n<Configuration status=\"INFO\" monitorInterval=\"30\">\n    <Properties>\n        <!--  输出路径  -->\n        <Property name=\"logpath\">/Log4j/logs/log/dev</Property>\n    </Properties>\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout\n                    pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n        </Console>\n        <RollingFile name=\"debug\" fileName=\"${logpath}/debug/erp_debug.log\"\n                     filePattern=\"${logpath}/debug/erp_debug_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"info\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/debug\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_debug_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"info\" fileName=\"${logpath}/info/erp_info.log\"\n                     filePattern=\"${logpath}/info/erp_info_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"warn\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/info\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_info_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"warn\" fileName=\"${logpath}/warn/erp_warn.log\"\n                     filePattern=\"${logpath}/warn/erp_warn_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"warn\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/warn\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_warn_*.log\"/>\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n        <RollingFile name=\"error\" fileName=\"${logpath}/error/erp_error.log\"\n                     filePattern=\"${logpath}/error/erp_error_%d{yyyy-MM-dd}-%i.log\">\n            <Filters>\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            </Filters>\n            <PatternLayout pattern=\"[%d][%-5p][%t] %m (%F:%L)%n\"/>\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"24\" modulate=\"true\"/>\n                  <!--   每个文件最大50M -->\n                <SizeBasedTriggeringPolicy size=\"50 MB\"/>\\\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\">\n                <Delete basePath=\"${logpath}/error\" maxDepth=\"1\">\n                    <IfFileName glob=\"erp_error_*.log\"/>\n                     <!-- 设置最大保存时间为15天-->\n                    <IfLastModified age=\"15d\"/>\n                </Delete>\n            </DefaultRolloverStrategy>\n        </RollingFile>\n\n    </Appenders>\n   <!--切换输出级别-->\n    <Loggers>\n        <Root level=\"info\">\n            <AppenderRef ref=\"Console\"/>\n            <AppenderRef ref=\"debug\"/>\n            <AppenderRef ref=\"info\"/>\n            <AppenderRef ref=\"warn\"/>\n            <AppenderRef ref=\"error\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n### 注意的地方\n\nlog4j2的配置文件是支持yml格式，但是如果使用yml格式的需要加入yml解析依赖包才能起作用，要不然有错误\n\n\n```\n<dependency>\n    <groupId>com.fasterxml.jackson.dataformat</groupId>\n    <artifactId>jackson-dataformat-yaml</artifactId>\n</dependency>\n```\n\n> 如果不加这个依赖，会有项目启动报错：Could not initialize Log4J2 logging from classpath:log4j2-dev.yml\n\n### SpringBoot配置文件中还可以加入打印级别指定\n\n```\nlogging:\n    level:\n        org.springframework=INFO\n```","slug":"every_little_bit/spring/boot/springboot-log4j2","published":1,"updated":"2022-02-19T12:57:57.011Z","_id":"ckggpzfuh00020ufydh42ezkz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring-Boot-更换-Logging-框架为-Log4J2\"><a href=\"#Spring-Boot-更换-Logging-框架为-Log4J2\" class=\"headerlink\" title=\"Spring Boot 更换 Logging 框架为 Log4J2\"></a>Spring Boot 更换 Logging 框架为 Log4J2</h1><h3 id=\"排除掉SpringBoot现有Logback依赖\"><a href=\"#排除掉SpringBoot现有Logback依赖\" class=\"headerlink\" title=\"排除掉SpringBoot现有Logback依赖\"></a>排除掉SpringBoot现有Logback依赖</h3><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<h3 id=\"加入Log4J2-的依赖\"><a href=\"#加入Log4J2-的依赖\" class=\"headerlink\" title=\"加入Log4J2 的依赖\"></a>加入Log4J2 的依赖</h3><pre><code class=\"hljs apache\"><span class=\"hljs-section\">&lt;dependency&gt;</span>\n    <span class=\"hljs-section\">&lt;groupId&gt;</span><span class=\"hljs-attribute\">org</span>.springframework.boot&lt;/groupId&gt;\n    <span class=\"hljs-section\">&lt;artifactId&gt;</span><span class=\"hljs-attribute\">spring</span>-boot-starter-log<span class=\"hljs-number\">4</span>j<span class=\"hljs-number\">2</span>&lt;/artifactId&gt;\n<span class=\"hljs-section\">&lt;/dependency&gt;</span></code></pre>\n\n<h3 id=\"配置application-yml-配置文件\"><a href=\"#配置application-yml-配置文件\" class=\"headerlink\" title=\"配置application.yml 配置文件\"></a>配置application.yml 配置文件</h3><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">logging</span>:\n    <span class=\"hljs-attribute\">config</span>: <span class=\"hljs-attribute\">classpath</span>: config/log4j2-dev.xml</code></pre>\n\n<h3 id=\"log4j2-dev-xml-根据官方文档进行配置\"><a href=\"#log4j2-dev-xml-根据官方文档进行配置\" class=\"headerlink\" title=\"log4j2-dev.xml 根据官方文档进行配置\"></a>log4j2-dev.xml 根据官方文档进行配置</h3><p>地址： <a href=\"https://logging.apache.org/log4j/2.x/manual/layouts.html\">https://logging.apache.org/log4j/2.x/manual/layouts.html</a></p>\n<p>推荐配置：(网络上找到的不错的配置)</p>\n<pre><code class=\"hljs dust\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Configuration</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;INFO&quot;</span> <span class=\"hljs-attr\">monitorInterval</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Properties</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-comment\">&lt;!--  输出路径  --&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;logpath&quot;</span>&gt;</span>/Log4j/logs/log/dev<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Property</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Properties</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appenders</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Console</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Console&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span></span></span>\n<span class=\"xml\">                    pattern=&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;/&gt;</span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Console</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/debug/erp_debug.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/debug/erp_debug_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/debug&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_debug_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/info/erp_info.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/info/erp_info_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/info&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_info_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/warn/erp_warn.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/warn/erp_warn_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/warn&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_warn_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/error/erp_error.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/error/erp_error_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;fatal&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                  <span class=\"hljs-comment\">&lt;!--   每个文件最大50M --&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/error&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_error_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                     <span class=\"hljs-comment\">&lt;!-- 设置最大保存时间为15天--&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appenders</span>&gt;</span></span>\n<span class=\"xml\">   <span class=\"hljs-comment\">&lt;!--切换输出级别--&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loggers</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;Console&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;debug&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;info&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;warn&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;error&quot;</span>/&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Root</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Loggers</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Configuration</span>&gt;</span></span></code></pre>\n\n<h3 id=\"注意的地方\"><a href=\"#注意的地方\" class=\"headerlink\" title=\"注意的地方\"></a>注意的地方</h3><p>log4j2的配置文件是支持yml格式，但是如果使用yml格式的需要加入yml解析依赖包才能起作用，要不然有错误</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<blockquote>\n<p>如果不加这个依赖，会有项目启动报错：Could not initialize Log4J2 logging from classpath:log4j2-dev.yml</p>\n</blockquote>\n<h3 id=\"SpringBoot配置文件中还可以加入打印级别指定\"><a href=\"#SpringBoot配置文件中还可以加入打印级别指定\" class=\"headerlink\" title=\"SpringBoot配置文件中还可以加入打印级别指定\"></a>SpringBoot配置文件中还可以加入打印级别指定</h3><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">logging:</span>\n<span class=\"hljs-symbol\">    level:</span>\n        org.springframework=INFO</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Boot-更换-Logging-框架为-Log4J2\"><a href=\"#Spring-Boot-更换-Logging-框架为-Log4J2\" class=\"headerlink\" title=\"Spring Boot 更换 Logging 框架为 Log4J2\"></a>Spring Boot 更换 Logging 框架为 Log4J2</h1><h3 id=\"排除掉SpringBoot现有Logback依赖\"><a href=\"#排除掉SpringBoot现有Logback依赖\" class=\"headerlink\" title=\"排除掉SpringBoot现有Logback依赖\"></a>排除掉SpringBoot现有Logback依赖</h3><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<h3 id=\"加入Log4J2-的依赖\"><a href=\"#加入Log4J2-的依赖\" class=\"headerlink\" title=\"加入Log4J2 的依赖\"></a>加入Log4J2 的依赖</h3><pre><code class=\"hljs apache\"><span class=\"hljs-section\">&lt;dependency&gt;</span>\n    <span class=\"hljs-section\">&lt;groupId&gt;</span><span class=\"hljs-attribute\">org</span>.springframework.boot&lt;/groupId&gt;\n    <span class=\"hljs-section\">&lt;artifactId&gt;</span><span class=\"hljs-attribute\">spring</span>-boot-starter-log<span class=\"hljs-number\">4</span>j<span class=\"hljs-number\">2</span>&lt;/artifactId&gt;\n<span class=\"hljs-section\">&lt;/dependency&gt;</span></code></pre>\n\n<h3 id=\"配置application-yml-配置文件\"><a href=\"#配置application-yml-配置文件\" class=\"headerlink\" title=\"配置application.yml 配置文件\"></a>配置application.yml 配置文件</h3><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">logging</span>:\n    <span class=\"hljs-attribute\">config</span>: <span class=\"hljs-attribute\">classpath</span>: config/log4j2-dev.xml</code></pre>\n\n<h3 id=\"log4j2-dev-xml-根据官方文档进行配置\"><a href=\"#log4j2-dev-xml-根据官方文档进行配置\" class=\"headerlink\" title=\"log4j2-dev.xml 根据官方文档进行配置\"></a>log4j2-dev.xml 根据官方文档进行配置</h3><p>地址： <a href=\"https://logging.apache.org/log4j/2.x/manual/layouts.html\">https://logging.apache.org/log4j/2.x/manual/layouts.html</a></p>\n<p>推荐配置：(网络上找到的不错的配置)</p>\n<pre><code class=\"hljs dust\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Configuration</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;INFO&quot;</span> <span class=\"hljs-attr\">monitorInterval</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Properties</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-comment\">&lt;!--  输出路径  --&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;logpath&quot;</span>&gt;</span>/Log4j/logs/log/dev<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Property</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Properties</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appenders</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Console</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Console&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span></span></span>\n<span class=\"xml\">                    pattern=&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;/&gt;</span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Console</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/debug/erp_debug.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/debug/erp_debug_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/debug&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_debug_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/info/erp_info.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/info/erp_info_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/info&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_info_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/warn/erp_warn.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/warn/erp_warn_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;warn&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/warn&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_warn_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RollingFile</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/error/erp_error.log&quot;</span></span></span>\n<span class=\"xml\">                     filePattern=&quot;$</span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\">/error/erp_error_%d</span><span class=\"hljs-template-variable\">&#123;yyyy-MM-dd&#125;</span><span class=\"xml\">-%i.log&quot;&gt;</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;fatal&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThresholdFilter</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;error&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PatternLayout</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;[%d][%-5p][%t] %m (%F:%L)%n&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TimeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;24&quot;</span> <span class=\"hljs-attr\">modulate</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                  <span class=\"hljs-comment\">&lt;!--   每个文件最大50M --&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SizeBasedTriggeringPolicy</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;50 MB&quot;</span>/&gt;</span>\\</span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Policies</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DefaultRolloverStrategy</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">&quot;30&quot;</span>&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Delete</span> <span class=\"hljs-attr\">basePath</span>=<span class=\"hljs-string\">&quot;$</span></span></span><span class=\"hljs-template-variable\">&#123;logpath&#125;</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">/error&quot;</span> <span class=\"hljs-attr\">maxDepth</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfFileName</span> <span class=\"hljs-attr\">glob</span>=<span class=\"hljs-string\">&quot;erp_error_*.log&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                     <span class=\"hljs-comment\">&lt;!-- 设置最大保存时间为15天--&gt;</span></span>\n<span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfLastModified</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">&quot;15d&quot;</span>/&gt;</span></span>\n<span class=\"xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Delete</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DefaultRolloverStrategy</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">RollingFile</span>&gt;</span></span>\n\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appenders</span>&gt;</span></span>\n<span class=\"xml\">   <span class=\"hljs-comment\">&lt;!--切换输出级别--&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loggers</span>&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;Console&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;debug&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;info&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;warn&quot;</span>/&gt;</span></span>\n<span class=\"xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;error&quot;</span>/&gt;</span></span>\n<span class=\"xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Root</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Loggers</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Configuration</span>&gt;</span></span></code></pre>\n\n<h3 id=\"注意的地方\"><a href=\"#注意的地方\" class=\"headerlink\" title=\"注意的地方\"></a>注意的地方</h3><p>log4j2的配置文件是支持yml格式，但是如果使用yml格式的需要加入yml解析依赖包才能起作用，要不然有错误</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<blockquote>\n<p>如果不加这个依赖，会有项目启动报错：Could not initialize Log4J2 logging from classpath:log4j2-dev.yml</p>\n</blockquote>\n<h3 id=\"SpringBoot配置文件中还可以加入打印级别指定\"><a href=\"#SpringBoot配置文件中还可以加入打印级别指定\" class=\"headerlink\" title=\"SpringBoot配置文件中还可以加入打印级别指定\"></a>SpringBoot配置文件中还可以加入打印级别指定</h3><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">logging:</span>\n<span class=\"hljs-symbol\">    level:</span>\n        org.springframework=INFO</code></pre>"},{"title":"andot-blog-open-source-by-github","date":"2018-02-21T13:17:04.000Z","_content":"## andot blog 蚁点博客开放源代码\n\n#### 源代码已经上传到github，点击此链接下载\n\n> git同步地址： https://github.com/andotorg/andotorg_source.git\n\n[蚁点博客源代码](https://github.com/andotorg/andotorg_source \"蚁点博客源代码\")\n","source":"_posts/2018/andot-blog-open-source-by-github.md","raw":"---\ntitle: andot-blog-open-source-by-github\ndate: 2018-02-21 21:17:04\ntags: github, andot, blog, hexo\n---\n## andot blog 蚁点博客开放源代码\n\n#### 源代码已经上传到github，点击此链接下载\n\n> git同步地址： https://github.com/andotorg/andotorg_source.git\n\n[蚁点博客源代码](https://github.com/andotorg/andotorg_source \"蚁点博客源代码\")\n","slug":"2018/andot-blog-open-source-by-github","published":1,"updated":"2020-10-20T02:22:05.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvog0000p4fy96b70qav","content":"<h2 id=\"andot-blog-蚁点博客开放源代码\"><a href=\"#andot-blog-蚁点博客开放源代码\" class=\"headerlink\" title=\"andot blog 蚁点博客开放源代码\"></a>andot blog 蚁点博客开放源代码</h2><h4 id=\"源代码已经上传到github，点击此链接下载\"><a href=\"#源代码已经上传到github，点击此链接下载\" class=\"headerlink\" title=\"源代码已经上传到github，点击此链接下载\"></a>源代码已经上传到github，点击此链接下载</h4><blockquote>\n<p>git同步地址： <a href=\"https://github.com/andotorg/andotorg_source.git\">https://github.com/andotorg/andotorg_source.git</a></p>\n</blockquote>\n<p><a href=\"https://github.com/andotorg/andotorg_source\" title=\"蚁点博客源代码\">蚁点博客源代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"andot-blog-蚁点博客开放源代码\"><a href=\"#andot-blog-蚁点博客开放源代码\" class=\"headerlink\" title=\"andot blog 蚁点博客开放源代码\"></a>andot blog 蚁点博客开放源代码</h2><h4 id=\"源代码已经上传到github，点击此链接下载\"><a href=\"#源代码已经上传到github，点击此链接下载\" class=\"headerlink\" title=\"源代码已经上传到github，点击此链接下载\"></a>源代码已经上传到github，点击此链接下载</h4><blockquote>\n<p>git同步地址： <a href=\"https://github.com/andotorg/andotorg_source.git\">https://github.com/andotorg/andotorg_source.git</a></p>\n</blockquote>\n<p><a href=\"https://github.com/andotorg/andotorg_source\" title=\"蚁点博客源代码\">蚁点博客源代码</a></p>\n"},{"title":"ShiroVSSpringSecurity","date":"2018-02-21T12:08:29.000Z","_content":"## Shiro\n\n> 首先Shiro较之 Spring Security，Shiro在保持强大功能的同时，还在简单性和灵活性方面拥有巨大优势。\n\n> Shiro是一个强大而灵活的开源安全框架，能够非常清晰的处理认证、授权、管理会话以及密码加密。如下是它所具有的特点：\n\n1. 易于理解的 Java Security API；\n2. 简单的身份认证（登录），支持多种数据源（LDAP，JDBC，Kerberos，ActiveDirectory 等）；\n3. 对角色的简单的签权（访问控制），支持细粒度的签权；\n4. 支持一级缓存，以提升应用程序的性能；\n5. 内置的基于 POJO 企业会话管理，适用于 Web 以及非 Web 的环境；\n6. 异构客户端会话访问；\n7. 非常简单的加密 API；\n8. 不跟任何的框架或者容器捆绑，可以独立运行。\n\n## Spring Security\n> 除了不能脱离Spring，shiro的功能它都有。而且Spring Security对Oauth、OpenID也有支持,Shiro则需要自己手动实现。Spring Security的权限细粒度更高（笔者还未发现高在哪里）。\n\n> 注：\nOAuth在\"客户端\"与\"服务提供商\"之间，设置了一个授权层（authorization layer）。\"客户端\"不能直接登录\"服务提供商\"，只能登录授权层，以此将用户与客户端区分开来。\"客户端\"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。\n\n> \"客户端\"登录授权层以后，\"服务提供商\"根据令牌的权限范围和有效期，向\"客户端\"开放用户储存的资料。\n\n> OpenID 系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。\n\n> 与OpenID同属性的身份识别服务商还有ⅥeID,ClaimID,CardSpace,Rapleaf,Trufina ID Card等，其中ⅥeID通用账户的应用最为广泛。\n\n## 综述\n\n> 个人认为现阶段需求，权限的操作粒度能控制在路径及按钮上，数据粒度通过sql实现。Shrio简单够用。\n\n> 至于OAuth，OpenID 站点间统一登录功能，现租户与各个产品间单点登录已经通过cookies实现，所以Spring Security的这两个功能可以不考虑。\n\n> SpringSide网站的权限也是用Shrio做的。","source":"_posts/2018/ShiroVSSpringSecurity.md","raw":"---\ntitle: ShiroVSSpringSecurity\ndate: 2018-02-21 20:08:29\ntags: Shiro, Spring Security\n---\n## Shiro\n\n> 首先Shiro较之 Spring Security，Shiro在保持强大功能的同时，还在简单性和灵活性方面拥有巨大优势。\n\n> Shiro是一个强大而灵活的开源安全框架，能够非常清晰的处理认证、授权、管理会话以及密码加密。如下是它所具有的特点：\n\n1. 易于理解的 Java Security API；\n2. 简单的身份认证（登录），支持多种数据源（LDAP，JDBC，Kerberos，ActiveDirectory 等）；\n3. 对角色的简单的签权（访问控制），支持细粒度的签权；\n4. 支持一级缓存，以提升应用程序的性能；\n5. 内置的基于 POJO 企业会话管理，适用于 Web 以及非 Web 的环境；\n6. 异构客户端会话访问；\n7. 非常简单的加密 API；\n8. 不跟任何的框架或者容器捆绑，可以独立运行。\n\n## Spring Security\n> 除了不能脱离Spring，shiro的功能它都有。而且Spring Security对Oauth、OpenID也有支持,Shiro则需要自己手动实现。Spring Security的权限细粒度更高（笔者还未发现高在哪里）。\n\n> 注：\nOAuth在\"客户端\"与\"服务提供商\"之间，设置了一个授权层（authorization layer）。\"客户端\"不能直接登录\"服务提供商\"，只能登录授权层，以此将用户与客户端区分开来。\"客户端\"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。\n\n> \"客户端\"登录授权层以后，\"服务提供商\"根据令牌的权限范围和有效期，向\"客户端\"开放用户储存的资料。\n\n> OpenID 系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。\n\n> 与OpenID同属性的身份识别服务商还有ⅥeID,ClaimID,CardSpace,Rapleaf,Trufina ID Card等，其中ⅥeID通用账户的应用最为广泛。\n\n## 综述\n\n> 个人认为现阶段需求，权限的操作粒度能控制在路径及按钮上，数据粒度通过sql实现。Shrio简单够用。\n\n> 至于OAuth，OpenID 站点间统一登录功能，现租户与各个产品间单点登录已经通过cookies实现，所以Spring Security的这两个功能可以不考虑。\n\n> SpringSide网站的权限也是用Shrio做的。","slug":"2018/ShiroVSSpringSecurity","published":1,"updated":"2020-10-20T02:22:05.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvol0001p4fy542u9fqd","content":"<h2 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h2><blockquote>\n<p>首先Shiro较之 Spring Security，Shiro在保持强大功能的同时，还在简单性和灵活性方面拥有巨大优势。</p>\n</blockquote>\n<blockquote>\n<p>Shiro是一个强大而灵活的开源安全框架，能够非常清晰的处理认证、授权、管理会话以及密码加密。如下是它所具有的特点：</p>\n</blockquote>\n<ol>\n<li>易于理解的 Java Security API；</li>\n<li>简单的身份认证（登录），支持多种数据源（LDAP，JDBC，Kerberos，ActiveDirectory 等）；</li>\n<li>对角色的简单的签权（访问控制），支持细粒度的签权；</li>\n<li>支持一级缓存，以提升应用程序的性能；</li>\n<li>内置的基于 POJO 企业会话管理，适用于 Web 以及非 Web 的环境；</li>\n<li>异构客户端会话访问；</li>\n<li>非常简单的加密 API；</li>\n<li>不跟任何的框架或者容器捆绑，可以独立运行。</li>\n</ol>\n<h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2><blockquote>\n<p>除了不能脱离Spring，shiro的功能它都有。而且Spring Security对Oauth、OpenID也有支持,Shiro则需要自己手动实现。Spring Security的权限细粒度更高（笔者还未发现高在哪里）。</p>\n</blockquote>\n<blockquote>\n<p>注：<br>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p>\n</blockquote>\n<blockquote>\n<p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>\n</blockquote>\n<blockquote>\n<p>OpenID 系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。</p>\n</blockquote>\n<blockquote>\n<p>与OpenID同属性的身份识别服务商还有ⅥeID,ClaimID,CardSpace,Rapleaf,Trufina ID Card等，其中ⅥeID通用账户的应用最为广泛。</p>\n</blockquote>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><blockquote>\n<p>个人认为现阶段需求，权限的操作粒度能控制在路径及按钮上，数据粒度通过sql实现。Shrio简单够用。</p>\n</blockquote>\n<blockquote>\n<p>至于OAuth，OpenID 站点间统一登录功能，现租户与各个产品间单点登录已经通过cookies实现，所以Spring Security的这两个功能可以不考虑。</p>\n</blockquote>\n<blockquote>\n<p>SpringSide网站的权限也是用Shrio做的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h2><blockquote>\n<p>首先Shiro较之 Spring Security，Shiro在保持强大功能的同时，还在简单性和灵活性方面拥有巨大优势。</p>\n</blockquote>\n<blockquote>\n<p>Shiro是一个强大而灵活的开源安全框架，能够非常清晰的处理认证、授权、管理会话以及密码加密。如下是它所具有的特点：</p>\n</blockquote>\n<ol>\n<li>易于理解的 Java Security API；</li>\n<li>简单的身份认证（登录），支持多种数据源（LDAP，JDBC，Kerberos，ActiveDirectory 等）；</li>\n<li>对角色的简单的签权（访问控制），支持细粒度的签权；</li>\n<li>支持一级缓存，以提升应用程序的性能；</li>\n<li>内置的基于 POJO 企业会话管理，适用于 Web 以及非 Web 的环境；</li>\n<li>异构客户端会话访问；</li>\n<li>非常简单的加密 API；</li>\n<li>不跟任何的框架或者容器捆绑，可以独立运行。</li>\n</ol>\n<h2 id=\"Spring-Security\"><a href=\"#Spring-Security\" class=\"headerlink\" title=\"Spring Security\"></a>Spring Security</h2><blockquote>\n<p>除了不能脱离Spring，shiro的功能它都有。而且Spring Security对Oauth、OpenID也有支持,Shiro则需要自己手动实现。Spring Security的权限细粒度更高（笔者还未发现高在哪里）。</p>\n</blockquote>\n<blockquote>\n<p>注：<br>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p>\n</blockquote>\n<blockquote>\n<p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>\n</blockquote>\n<blockquote>\n<p>OpenID 系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。</p>\n</blockquote>\n<blockquote>\n<p>与OpenID同属性的身份识别服务商还有ⅥeID,ClaimID,CardSpace,Rapleaf,Trufina ID Card等，其中ⅥeID通用账户的应用最为广泛。</p>\n</blockquote>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><blockquote>\n<p>个人认为现阶段需求，权限的操作粒度能控制在路径及按钮上，数据粒度通过sql实现。Shrio简单够用。</p>\n</blockquote>\n<blockquote>\n<p>至于OAuth，OpenID 站点间统一登录功能，现租户与各个产品间单点登录已经通过cookies实现，所以Spring Security的这两个功能可以不考虑。</p>\n</blockquote>\n<blockquote>\n<p>SpringSide网站的权限也是用Shrio做的。</p>\n</blockquote>\n"},{"title":"使用druid连接池的超时回收机制排查连接泄露问题","date":"2018-03-01T14:48:52.000Z","_content":"### 在工程中使用了druid连接池，运行一段时间后系统出现异常：\n\n```base\nCaused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60009, active 50  \n                at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)  \n                at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:280)  \n                ... 64 more  \nCaused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 50  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1071)  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:898)  \n                at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)  \n```\n\n> mysql数据库最大连接数设置为500，使用客户端能正常连接。连接数被未被占满。\n\n### 分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\n\n```\n<!-- 超过时间限制是否回收 -->  \n<property name=\"removeAbandoned\" value=\"true\" />  \n<!-- 超时时间；单位为秒。180秒=3分钟 -->  \n<property name=\"removeAbandonedTimeout\" value=\"180\" />  \n<!-- 关闭abanded连接时输出错误日志 -->  \n<property name=\"logAbandoned\" value=\"true\" />     \n```\n\n### 运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\n\n```\n2014-10-13 16:02:28,919 ERROR [com.alibaba.druid.pool.DruidDataSource] - <abandon connection, open stackTrace  \n        at java.lang.Thread.getStackTrace(Thread.java:1567)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:995)  \n        at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)  \n        at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:661)  \n        at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4540)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:919)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)  \n          \n        at cn.org.xxx.xxx.xxx.PaginationInterceptor.intercept(PaginationInterceptor.java:96)  \n          \n        at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:60)  \n        at com.sun.proxy.$Proxy59.query(Unknown Source)  \n        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:108)  \n```\n\n> 很清楚地看到是在哪里打开的连接未关闭一直在占有。","source":"_posts/2018/druidremove.md","raw":"---\ntitle: 使用druid连接池的超时回收机制排查连接泄露问题\ndate: 2018-03-01 22:48:52\ntags: druid, springboot, java\n---\n### 在工程中使用了druid连接池，运行一段时间后系统出现异常：\n\n```base\nCaused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60009, active 50  \n                at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)  \n                at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:280)  \n                ... 64 more  \nCaused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 50  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1071)  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:898)  \n                at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)  \n```\n\n> mysql数据库最大连接数设置为500，使用客户端能正常连接。连接数被未被占满。\n\n### 分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\n\n```\n<!-- 超过时间限制是否回收 -->  \n<property name=\"removeAbandoned\" value=\"true\" />  \n<!-- 超时时间；单位为秒。180秒=3分钟 -->  \n<property name=\"removeAbandonedTimeout\" value=\"180\" />  \n<!-- 关闭abanded连接时输出错误日志 -->  \n<property name=\"logAbandoned\" value=\"true\" />     \n```\n\n### 运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\n\n```\n2014-10-13 16:02:28,919 ERROR [com.alibaba.druid.pool.DruidDataSource] - <abandon connection, open stackTrace  \n        at java.lang.Thread.getStackTrace(Thread.java:1567)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:995)  \n        at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)  \n        at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:661)  \n        at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4540)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:919)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:911)  \n        at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:98)  \n          \n        at cn.org.xxx.xxx.xxx.PaginationInterceptor.intercept(PaginationInterceptor.java:96)  \n          \n        at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:60)  \n        at com.sun.proxy.$Proxy59.query(Unknown Source)  \n        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:108)  \n```\n\n> 很清楚地看到是在哪里打开的连接未关闭一直在占有。","slug":"2018/druidremove","published":1,"updated":"2020-10-20T02:22:05.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvop0003p4fy2myp4kup","content":"<h3 id=\"在工程中使用了druid连接池，运行一段时间后系统出现异常：\"><a href=\"#在工程中使用了druid连接池，运行一段时间后系统出现异常：\" class=\"headerlink\" title=\"在工程中使用了druid连接池，运行一段时间后系统出现异常：\"></a>在工程中使用了druid连接池，运行一段时间后系统出现异常：</h3><pre><code class=\"hljs base\">Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60009, active 50  \n                at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)  \n                at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:280)  \n                ... 64 more  \nCaused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 50  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1071)  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:898)  \n                at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)</code></pre>\n\n<blockquote>\n<p>mysql数据库最大连接数设置为500，使用客户端能正常连接。连接数被未被占满。</p>\n</blockquote>\n<h3 id=\"分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\"><a href=\"#分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\" class=\"headerlink\" title=\"分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\"></a>分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：</h3><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 超过时间限制是否回收 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;removeAbandoned&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span>  \n<span class=\"hljs-comment\">&lt;!-- 超时时间；单位为秒。180秒=3分钟 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;removeAbandonedTimeout&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;180&quot;</span> /&gt;</span>  \n<span class=\"hljs-comment\">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;logAbandoned&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span></code></pre>\n\n<h3 id=\"运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\"><a href=\"#运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\" class=\"headerlink\" title=\"运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\"></a>运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。</h3><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2014</span>-<span class=\"hljs-number\">10</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">919</span> ERROR [com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span>.DruidDataSource] - &lt;abandon connection, open stackTrace  \n        at java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span>.getStackTrace(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">1567</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnectionDirect(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">995</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.FilterChainImpl</span>.dataSource_connect(FilterChainImpl<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">4544</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.stat</span><span class=\"hljs-selector-class\">.StatFilter</span>.dataSource_getConnection(StatFilter<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">661</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.FilterChainImpl</span>.dataSource_connect(FilterChainImpl<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">4540</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">919</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">911</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">98</span>)  \n          \n        at cn<span class=\"hljs-selector-class\">.org</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.PaginationInterceptor</span>.intercept(PaginationInterceptor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">96</span>)  \n          \n        at org<span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.ibatis</span><span class=\"hljs-selector-class\">.plugin</span><span class=\"hljs-selector-class\">.Plugin</span>.invoke(Plugin<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">60</span>)  \n        at com<span class=\"hljs-selector-class\">.sun</span><span class=\"hljs-selector-class\">.proxy</span>.<span class=\"hljs-variable\">$Proxy59</span>.query(Unknown Source)  \n        at org<span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.ibatis</span><span class=\"hljs-selector-class\">.session</span><span class=\"hljs-selector-class\">.defaults</span><span class=\"hljs-selector-class\">.DefaultSqlSession</span>.selectList(DefaultSqlSession<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">108</span>)</code></pre>\n\n<blockquote>\n<p>很清楚地看到是在哪里打开的连接未关闭一直在占有。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在工程中使用了druid连接池，运行一段时间后系统出现异常：\"><a href=\"#在工程中使用了druid连接池，运行一段时间后系统出现异常：\" class=\"headerlink\" title=\"在工程中使用了druid连接池，运行一段时间后系统出现异常：\"></a>在工程中使用了druid连接池，运行一段时间后系统出现异常：</h3><pre><code class=\"hljs base\">Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60009, active 50  \n                at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)  \n                at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:280)  \n                ... 64 more  \nCaused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 50  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1071)  \n                at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:898)  \n                at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:4544)</code></pre>\n\n<blockquote>\n<p>mysql数据库最大连接数设置为500，使用客户端能正常连接。连接数被未被占满。</p>\n</blockquote>\n<h3 id=\"分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\"><a href=\"#分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\" class=\"headerlink\" title=\"分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：\"></a>分析原因应该是程序中有地方连接未关闭造成的。那如何来定呢？使用druid连接池的超时回收机制，在配置中增加以下内容：</h3><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 超过时间限制是否回收 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;removeAbandoned&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span>  \n<span class=\"hljs-comment\">&lt;!-- 超时时间；单位为秒。180秒=3分钟 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;removeAbandonedTimeout&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;180&quot;</span> /&gt;</span>  \n<span class=\"hljs-comment\">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span>  \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;logAbandoned&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span></code></pre>\n\n<h3 id=\"运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\"><a href=\"#运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\" class=\"headerlink\" title=\"运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。\"></a>运行程序，当连接超过3分钟后会强制进行回收，并输出异常日志。</h3><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2014</span>-<span class=\"hljs-number\">10</span>-<span class=\"hljs-number\">13</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">919</span> ERROR [com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span>.DruidDataSource] - &lt;abandon connection, open stackTrace  \n        at java<span class=\"hljs-selector-class\">.lang</span><span class=\"hljs-selector-class\">.Thread</span>.getStackTrace(Thread<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">1567</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnectionDirect(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">995</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.FilterChainImpl</span>.dataSource_connect(FilterChainImpl<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">4544</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.stat</span><span class=\"hljs-selector-class\">.StatFilter</span>.dataSource_getConnection(StatFilter<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">661</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.filter</span><span class=\"hljs-selector-class\">.FilterChainImpl</span>.dataSource_connect(FilterChainImpl<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">4540</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">919</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">911</span>)  \n        at com<span class=\"hljs-selector-class\">.alibaba</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.pool</span><span class=\"hljs-selector-class\">.DruidDataSource</span>.getConnection(DruidDataSource<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">98</span>)  \n          \n        at cn<span class=\"hljs-selector-class\">.org</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.xxx</span><span class=\"hljs-selector-class\">.PaginationInterceptor</span>.intercept(PaginationInterceptor<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">96</span>)  \n          \n        at org<span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.ibatis</span><span class=\"hljs-selector-class\">.plugin</span><span class=\"hljs-selector-class\">.Plugin</span>.invoke(Plugin<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">60</span>)  \n        at com<span class=\"hljs-selector-class\">.sun</span><span class=\"hljs-selector-class\">.proxy</span>.<span class=\"hljs-variable\">$Proxy59</span>.query(Unknown Source)  \n        at org<span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.ibatis</span><span class=\"hljs-selector-class\">.session</span><span class=\"hljs-selector-class\">.defaults</span><span class=\"hljs-selector-class\">.DefaultSqlSession</span>.selectList(DefaultSqlSession<span class=\"hljs-selector-class\">.java</span>:<span class=\"hljs-number\">108</span>)</code></pre>\n\n<blockquote>\n<p>很清楚地看到是在哪里打开的连接未关闭一直在占有。</p>\n</blockquote>\n"},{"title":"GitHub利用Hexo搭建博客教程","date":"2018-02-20T04:43:23.000Z","_content":"\n### 安装Nodejs\n\nnodo.js 下载与安装\n\n下载地址：\n官网\n中文站\n安装就不用多说了，跟安装普通软件没有区别，可以一路按提示Next。完成之后，打开命令行窗口 WIN + R，输入如下命令：\n\n``` bash\nnode -v    \nnpm -v  \n```\n\n### 安装git\n\n百度自行安装\n\n### 安装 Hexo\n\n在命令行输入如下命令:\n> $ npm install -g hexo-cli\n\n由于众所周知的原因,可能你执行这条命令会报错，如果你不会调整姿势上网，可以使用淘宝 npm 镜像，执行如下命令即可：\n\n> $ npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n之后很多 npm 命令可以使用 cnpm 代替。执行下面命令即可安装 Hexo :\n\n> $ cnpm install -g hexo-cli\n\n可能出现一些 WARN ,可以不用理会，然后执行：\n\n> $ cnpm install hexo --save\n\n输入 \n\n> $ hexo -v \n\n出现所示的版本信息，则说明安装成功\n\n### 本地搭建博客\n\n-初始化 hexo\n新建一个文件夹，这个文件夹即为以后博客的文件存放路径。打开命令行，cd 到该文件夹，执行\n> hexo init\n\n-生成静态文件，执行：\n> hexo g\n\nOK,本地的博客搭建好了，下面可以执行 \n> hexo s\n\n进行本地调试，执行完之后，打开浏览器，输入 http://localhost:4000,可以访问就成功了\n那么恭喜你，本地博客搭建已经完成了。下一步就是部署到远程服务器上。\n\n### 将本地博客部署到远程服务器端\n\n本地博客搭建好了，我们还需要将它部署到远程服务器上。因为博客主要都是一些静态的页面，不涉及与后台的数据传送，所以我们可以利用 Github 上提供的一个免费空间，那么，首先需要有一个 Github 账号，相信同行都有，非猿类请登录官网注册。做法是建立一个仓库，将文件上传到该仓库即可，这个仓库的起名要注意，为 yourname.github.io，yourname与你的注册用户名一致,比如的github用户名是 zhangsan，那么起名就为 zhangsan.github.io ,这个就是你博客的域名了。\n\n下面还需要做相应的配置，在你项目的文件夹下，找到 _config.yml 文件，注意是修改整个项目的配置文件，不是主题文件夹下的配置文件。打开文件修改配置如下：\n``` bash\ndeploy:    \n  type: git     \n  repo: <repository url>      \n  branch: [branch]      \n  message: [message]      \n ```\n参数描述：\n\n> repo： 库（Repository）地址\n\n> branch： 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n\n> message: 自定义提交信息 (默认为 Site updated: 'YYYY-MM-DD HH:mm:ss'\n","source":"_posts/2018/github_hexo_blog.md","raw":"---\ntitle: GitHub利用Hexo搭建博客教程\ndate: 2018-02-20 12:43:23\ntags: GitHub, Hexo, nodejs, javascript\n---\n\n### 安装Nodejs\n\nnodo.js 下载与安装\n\n下载地址：\n官网\n中文站\n安装就不用多说了，跟安装普通软件没有区别，可以一路按提示Next。完成之后，打开命令行窗口 WIN + R，输入如下命令：\n\n``` bash\nnode -v    \nnpm -v  \n```\n\n### 安装git\n\n百度自行安装\n\n### 安装 Hexo\n\n在命令行输入如下命令:\n> $ npm install -g hexo-cli\n\n由于众所周知的原因,可能你执行这条命令会报错，如果你不会调整姿势上网，可以使用淘宝 npm 镜像，执行如下命令即可：\n\n> $ npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n之后很多 npm 命令可以使用 cnpm 代替。执行下面命令即可安装 Hexo :\n\n> $ cnpm install -g hexo-cli\n\n可能出现一些 WARN ,可以不用理会，然后执行：\n\n> $ cnpm install hexo --save\n\n输入 \n\n> $ hexo -v \n\n出现所示的版本信息，则说明安装成功\n\n### 本地搭建博客\n\n-初始化 hexo\n新建一个文件夹，这个文件夹即为以后博客的文件存放路径。打开命令行，cd 到该文件夹，执行\n> hexo init\n\n-生成静态文件，执行：\n> hexo g\n\nOK,本地的博客搭建好了，下面可以执行 \n> hexo s\n\n进行本地调试，执行完之后，打开浏览器，输入 http://localhost:4000,可以访问就成功了\n那么恭喜你，本地博客搭建已经完成了。下一步就是部署到远程服务器上。\n\n### 将本地博客部署到远程服务器端\n\n本地博客搭建好了，我们还需要将它部署到远程服务器上。因为博客主要都是一些静态的页面，不涉及与后台的数据传送，所以我们可以利用 Github 上提供的一个免费空间，那么，首先需要有一个 Github 账号，相信同行都有，非猿类请登录官网注册。做法是建立一个仓库，将文件上传到该仓库即可，这个仓库的起名要注意，为 yourname.github.io，yourname与你的注册用户名一致,比如的github用户名是 zhangsan，那么起名就为 zhangsan.github.io ,这个就是你博客的域名了。\n\n下面还需要做相应的配置，在你项目的文件夹下，找到 _config.yml 文件，注意是修改整个项目的配置文件，不是主题文件夹下的配置文件。打开文件修改配置如下：\n``` bash\ndeploy:    \n  type: git     \n  repo: <repository url>      \n  branch: [branch]      \n  message: [message]      \n ```\n参数描述：\n\n> repo： 库（Repository）地址\n\n> branch： 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\n\n> message: 自定义提交信息 (默认为 Site updated: 'YYYY-MM-DD HH:mm:ss'\n","slug":"2018/github_hexo_blog","published":1,"updated":"2020-10-20T02:22:05.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvoq0004p4fyeho6ap17","content":"<h3 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h3><p>nodo.js 下载与安装</p>\n<p>下载地址：<br>官网<br>中文站<br>安装就不用多说了，跟安装普通软件没有区别，可以一路按提示Next。完成之后，打开命令行窗口 WIN + R，输入如下命令：</p>\n<pre><code class=\"hljs bash\">node -v    \nnpm -v</code></pre>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>百度自行安装</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>在命令行输入如下命令:</p>\n<blockquote>\n<p>$ npm install -g hexo-cli</p>\n</blockquote>\n<p>由于众所周知的原因,可能你执行这条命令会报错，如果你不会调整姿势上网，可以使用淘宝 npm 镜像，执行如下命令即可：</p>\n<blockquote>\n<p>$ npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<p>之后很多 npm 命令可以使用 cnpm 代替。执行下面命令即可安装 Hexo :</p>\n<blockquote>\n<p>$ cnpm install -g hexo-cli</p>\n</blockquote>\n<p>可能出现一些 WARN ,可以不用理会，然后执行：</p>\n<blockquote>\n<p>$ cnpm install hexo –save</p>\n</blockquote>\n<p>输入 </p>\n<blockquote>\n<p>$ hexo -v </p>\n</blockquote>\n<p>出现所示的版本信息，则说明安装成功</p>\n<h3 id=\"本地搭建博客\"><a href=\"#本地搭建博客\" class=\"headerlink\" title=\"本地搭建博客\"></a>本地搭建博客</h3><p>-初始化 hexo<br>新建一个文件夹，这个文件夹即为以后博客的文件存放路径。打开命令行，cd 到该文件夹，执行</p>\n<blockquote>\n<p>hexo init</p>\n</blockquote>\n<p>-生成静态文件，执行：</p>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<p>OK,本地的博客搭建好了，下面可以执行 </p>\n<blockquote>\n<p>hexo s</p>\n</blockquote>\n<p>进行本地调试，执行完之后，打开浏览器，输入 <a href=\"http://localhost:4000,可以访问就成功了\">http://localhost:4000,可以访问就成功了</a><br>那么恭喜你，本地博客搭建已经完成了。下一步就是部署到远程服务器上。</p>\n<h3 id=\"将本地博客部署到远程服务器端\"><a href=\"#将本地博客部署到远程服务器端\" class=\"headerlink\" title=\"将本地博客部署到远程服务器端\"></a>将本地博客部署到远程服务器端</h3><p>本地博客搭建好了，我们还需要将它部署到远程服务器上。因为博客主要都是一些静态的页面，不涉及与后台的数据传送，所以我们可以利用 Github 上提供的一个免费空间，那么，首先需要有一个 Github 账号，相信同行都有，非猿类请登录官网注册。做法是建立一个仓库，将文件上传到该仓库即可，这个仓库的起名要注意，为 yourname.github.io，yourname与你的注册用户名一致,比如的github用户名是 zhangsan，那么起名就为 zhangsan.github.io ,这个就是你博客的域名了。</p>\n<p>下面还需要做相应的配置，在你项目的文件夹下，找到 _config.yml 文件，注意是修改整个项目的配置文件，不是主题文件夹下的配置文件。打开文件修改配置如下：</p>\n<pre><code class=\"hljs bash\">deploy:    \n  <span class=\"hljs-built_in\">type</span>: git     \n  repo: &lt;repository url&gt;      \n  branch: [branch]      \n  message: [message]</code></pre>\n<p>参数描述：</p>\n<blockquote>\n<p>repo： 库（Repository）地址</p>\n</blockquote>\n<blockquote>\n<p>branch： 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</p>\n</blockquote>\n<blockquote>\n<p>message: 自定义提交信息 (默认为 Site updated: ‘YYYY-MM-DD HH:mm:ss’</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h3><p>nodo.js 下载与安装</p>\n<p>下载地址：<br>官网<br>中文站<br>安装就不用多说了，跟安装普通软件没有区别，可以一路按提示Next。完成之后，打开命令行窗口 WIN + R，输入如下命令：</p>\n<pre><code class=\"hljs bash\">node -v    \nnpm -v</code></pre>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>百度自行安装</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>在命令行输入如下命令:</p>\n<blockquote>\n<p>$ npm install -g hexo-cli</p>\n</blockquote>\n<p>由于众所周知的原因,可能你执行这条命令会报错，如果你不会调整姿势上网，可以使用淘宝 npm 镜像，执行如下命令即可：</p>\n<blockquote>\n<p>$ npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<p>之后很多 npm 命令可以使用 cnpm 代替。执行下面命令即可安装 Hexo :</p>\n<blockquote>\n<p>$ cnpm install -g hexo-cli</p>\n</blockquote>\n<p>可能出现一些 WARN ,可以不用理会，然后执行：</p>\n<blockquote>\n<p>$ cnpm install hexo –save</p>\n</blockquote>\n<p>输入 </p>\n<blockquote>\n<p>$ hexo -v </p>\n</blockquote>\n<p>出现所示的版本信息，则说明安装成功</p>\n<h3 id=\"本地搭建博客\"><a href=\"#本地搭建博客\" class=\"headerlink\" title=\"本地搭建博客\"></a>本地搭建博客</h3><p>-初始化 hexo<br>新建一个文件夹，这个文件夹即为以后博客的文件存放路径。打开命令行，cd 到该文件夹，执行</p>\n<blockquote>\n<p>hexo init</p>\n</blockquote>\n<p>-生成静态文件，执行：</p>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<p>OK,本地的博客搭建好了，下面可以执行 </p>\n<blockquote>\n<p>hexo s</p>\n</blockquote>\n<p>进行本地调试，执行完之后，打开浏览器，输入 <a href=\"http://localhost:4000,可以访问就成功了\">http://localhost:4000,可以访问就成功了</a><br>那么恭喜你，本地博客搭建已经完成了。下一步就是部署到远程服务器上。</p>\n<h3 id=\"将本地博客部署到远程服务器端\"><a href=\"#将本地博客部署到远程服务器端\" class=\"headerlink\" title=\"将本地博客部署到远程服务器端\"></a>将本地博客部署到远程服务器端</h3><p>本地博客搭建好了，我们还需要将它部署到远程服务器上。因为博客主要都是一些静态的页面，不涉及与后台的数据传送，所以我们可以利用 Github 上提供的一个免费空间，那么，首先需要有一个 Github 账号，相信同行都有，非猿类请登录官网注册。做法是建立一个仓库，将文件上传到该仓库即可，这个仓库的起名要注意，为 yourname.github.io，yourname与你的注册用户名一致,比如的github用户名是 zhangsan，那么起名就为 zhangsan.github.io ,这个就是你博客的域名了。</p>\n<p>下面还需要做相应的配置，在你项目的文件夹下，找到 _config.yml 文件，注意是修改整个项目的配置文件，不是主题文件夹下的配置文件。打开文件修改配置如下：</p>\n<pre><code class=\"hljs bash\">deploy:    \n  <span class=\"hljs-built_in\">type</span>: git     \n  repo: &lt;repository url&gt;      \n  branch: [branch]      \n  message: [message]</code></pre>\n<p>参数描述：</p>\n<blockquote>\n<p>repo： 库（Repository）地址</p>\n</blockquote>\n<blockquote>\n<p>branch： 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</p>\n</blockquote>\n<blockquote>\n<p>message: 自定义提交信息 (默认为 Site updated: ‘YYYY-MM-DD HH:mm:ss’</p>\n</blockquote>\n"},{"title":"Java自定义注解学习写一个小例子","date":"2018-02-22T13:37:28.000Z","_content":"\n# Java自定义注解书写例子学习\n\n## 1、先新建一个注解TestC\n\n```base\n@Target({ ElementType.TYPE, ElementType.METHOD })   //说明次注解可以作用于类和方法\n@Retention(RetentionPolicy.RUNTIME)  //说明此类是从JVM运行开始使用\npublic @interface TestC {\n\t/**\n\t * 获取被注解方法的参数\n\t * \n\t * */\n\tString value() default \"\";    //方法名称自己定义，返回值根据需要\n}\n```\n\n## 2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\n\n```base\n@Aspect\n@Component\npublic class ParamInterception {\n\t\n\t@Pointcut(\"execution(* cn.zup.*.service.*.*(..)) && @annotation(cn.zup.framework.aop.TestC)\")\n\tprivate void anyMethod(){}\n\t\n\t@Before(value=\"anyMethod()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tSystem.err.println(\"================================================================\");\n\t\tSignature signature = joinPoint.getSignature();\n        MethodSignature methodSignature = (MethodSignature) signature;\n        Method method = methodSignature.getMethod();\n        System.err.println(method.getName());\n        Class<?> c = joinPoint.getClass();\n\t\t// 获取类中的所有定义字段    \n        Field[] fields = c.getDeclaredFields();\n        // 循环遍历字段，获取字段对应的属性值    \n        for (Field field : fields) {    \n            // 如果不为空，设置可见性，然后返回    \n            field.setAccessible(true); \n            try {    \n                // 设置字段可见，即可用get方法获取属性值。    \n            \tif(field.get(joinPoint) != null){\n            \t\tSystem.err.println(field.getName() + \"==============\" + field.get(joinPoint));\n            \t}\n            } catch (Exception e) {    \n            \tSystem.err.println(\"error--------\"+this.getClass().getMethods()+\".Reason is:\"+e.getMessage());    \n            }    \n        }   \n        \n\t}\n\t\n}\n```\n\n## 在方法上进行添加注解\n\n```\n@TestC\npublic String method(){\n    //TODO IS CODING\n}\n```\n\n> 以上就是一个最简单的注解的写法\n\n\n","source":"_posts/2018/java-custom-annotation-study.md","raw":"---\ntitle: Java自定义注解学习写一个小例子\ndate: 2018-02-22 21:37:28\ntags: java, annotation\n---\n\n# Java自定义注解书写例子学习\n\n## 1、先新建一个注解TestC\n\n```base\n@Target({ ElementType.TYPE, ElementType.METHOD })   //说明次注解可以作用于类和方法\n@Retention(RetentionPolicy.RUNTIME)  //说明此类是从JVM运行开始使用\npublic @interface TestC {\n\t/**\n\t * 获取被注解方法的参数\n\t * \n\t * */\n\tString value() default \"\";    //方法名称自己定义，返回值根据需要\n}\n```\n\n## 2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\n\n```base\n@Aspect\n@Component\npublic class ParamInterception {\n\t\n\t@Pointcut(\"execution(* cn.zup.*.service.*.*(..)) && @annotation(cn.zup.framework.aop.TestC)\")\n\tprivate void anyMethod(){}\n\t\n\t@Before(value=\"anyMethod()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tSystem.err.println(\"================================================================\");\n\t\tSignature signature = joinPoint.getSignature();\n        MethodSignature methodSignature = (MethodSignature) signature;\n        Method method = methodSignature.getMethod();\n        System.err.println(method.getName());\n        Class<?> c = joinPoint.getClass();\n\t\t// 获取类中的所有定义字段    \n        Field[] fields = c.getDeclaredFields();\n        // 循环遍历字段，获取字段对应的属性值    \n        for (Field field : fields) {    \n            // 如果不为空，设置可见性，然后返回    \n            field.setAccessible(true); \n            try {    \n                // 设置字段可见，即可用get方法获取属性值。    \n            \tif(field.get(joinPoint) != null){\n            \t\tSystem.err.println(field.getName() + \"==============\" + field.get(joinPoint));\n            \t}\n            } catch (Exception e) {    \n            \tSystem.err.println(\"error--------\"+this.getClass().getMethods()+\".Reason is:\"+e.getMessage());    \n            }    \n        }   \n        \n\t}\n\t\n}\n```\n\n## 在方法上进行添加注解\n\n```\n@TestC\npublic String method(){\n    //TODO IS CODING\n}\n```\n\n> 以上就是一个最简单的注解的写法\n\n\n","slug":"2018/java-custom-annotation-study","published":1,"updated":"2020-10-20T02:22:05.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvor0005p4fydl73b239","content":"<h1 id=\"Java自定义注解书写例子学习\"><a href=\"#Java自定义注解书写例子学习\" class=\"headerlink\" title=\"Java自定义注解书写例子学习\"></a>Java自定义注解书写例子学习</h1><h2 id=\"1、先新建一个注解TestC\"><a href=\"#1、先新建一个注解TestC\" class=\"headerlink\" title=\"1、先新建一个注解TestC\"></a>1、先新建一个注解TestC</h2><pre><code class=\"hljs base\">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)   &#x2F;&#x2F;说明次注解可以作用于类和方法\n@Retention(RetentionPolicy.RUNTIME)  &#x2F;&#x2F;说明此类是从JVM运行开始使用\npublic @interface TestC &#123;\n\t&#x2F;**\n\t * 获取被注解方法的参数\n\t * \n\t * *&#x2F;\n\tString value() default &quot;&quot;;    &#x2F;&#x2F;方法名称自己定义，返回值根据需要\n&#125;</code></pre>\n\n<h2 id=\"2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\"><a href=\"#2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\" class=\"headerlink\" title=\"2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\"></a>2、然后新建一个AOP拦截器进行拦截注解和备注解的方法</h2><pre><code class=\"hljs base\">@Aspect\n@Component\npublic class ParamInterception &#123;\n\t\n\t@Pointcut(&quot;execution(* cn.zup.*.service.*.*(..)) &amp;&amp; @annotation(cn.zup.framework.aop.TestC)&quot;)\n\tprivate void anyMethod()&#123;&#125;\n\t\n\t@Before(value&#x3D;&quot;anyMethod()&quot;)\n\tpublic void before(JoinPoint joinPoint)&#123;\n\t\tSystem.err.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n\t\tSignature signature &#x3D; joinPoint.getSignature();\n        MethodSignature methodSignature &#x3D; (MethodSignature) signature;\n        Method method &#x3D; methodSignature.getMethod();\n        System.err.println(method.getName());\n        Class&lt;?&gt; c &#x3D; joinPoint.getClass();\n\t\t&#x2F;&#x2F; 获取类中的所有定义字段    \n        Field[] fields &#x3D; c.getDeclaredFields();\n        &#x2F;&#x2F; 循环遍历字段，获取字段对应的属性值    \n        for (Field field : fields) &#123;    \n            &#x2F;&#x2F; 如果不为空，设置可见性，然后返回    \n            field.setAccessible(true); \n            try &#123;    \n                &#x2F;&#x2F; 设置字段可见，即可用get方法获取属性值。    \n            \tif(field.get(joinPoint) !&#x3D; null)&#123;\n            \t\tSystem.err.println(field.getName() + &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + field.get(joinPoint));\n            \t&#125;\n            &#125; catch (Exception e) &#123;    \n            \tSystem.err.println(&quot;error--------&quot;+this.getClass().getMethods()+&quot;.Reason is:&quot;+e.getMessage());    \n            &#125;    \n        &#125;   \n        \n\t&#125;\n\t\n&#125;</code></pre>\n\n<h2 id=\"在方法上进行添加注解\"><a href=\"#在方法上进行添加注解\" class=\"headerlink\" title=\"在方法上进行添加注解\"></a>在方法上进行添加注解</h2><pre><code class=\"hljs oxygene\">@TestC\n<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">&#123;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-comment\">    //TODO IS CODING</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-comment\">&#125;</span></span></code></pre>\n\n<blockquote>\n<p>以上就是一个最简单的注解的写法</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java自定义注解书写例子学习\"><a href=\"#Java自定义注解书写例子学习\" class=\"headerlink\" title=\"Java自定义注解书写例子学习\"></a>Java自定义注解书写例子学习</h1><h2 id=\"1、先新建一个注解TestC\"><a href=\"#1、先新建一个注解TestC\" class=\"headerlink\" title=\"1、先新建一个注解TestC\"></a>1、先新建一个注解TestC</h2><pre><code class=\"hljs base\">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)   &#x2F;&#x2F;说明次注解可以作用于类和方法\n@Retention(RetentionPolicy.RUNTIME)  &#x2F;&#x2F;说明此类是从JVM运行开始使用\npublic @interface TestC &#123;\n\t&#x2F;**\n\t * 获取被注解方法的参数\n\t * \n\t * *&#x2F;\n\tString value() default &quot;&quot;;    &#x2F;&#x2F;方法名称自己定义，返回值根据需要\n&#125;</code></pre>\n\n<h2 id=\"2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\"><a href=\"#2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\" class=\"headerlink\" title=\"2、然后新建一个AOP拦截器进行拦截注解和备注解的方法\"></a>2、然后新建一个AOP拦截器进行拦截注解和备注解的方法</h2><pre><code class=\"hljs base\">@Aspect\n@Component\npublic class ParamInterception &#123;\n\t\n\t@Pointcut(&quot;execution(* cn.zup.*.service.*.*(..)) &amp;&amp; @annotation(cn.zup.framework.aop.TestC)&quot;)\n\tprivate void anyMethod()&#123;&#125;\n\t\n\t@Before(value&#x3D;&quot;anyMethod()&quot;)\n\tpublic void before(JoinPoint joinPoint)&#123;\n\t\tSystem.err.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n\t\tSignature signature &#x3D; joinPoint.getSignature();\n        MethodSignature methodSignature &#x3D; (MethodSignature) signature;\n        Method method &#x3D; methodSignature.getMethod();\n        System.err.println(method.getName());\n        Class&lt;?&gt; c &#x3D; joinPoint.getClass();\n\t\t&#x2F;&#x2F; 获取类中的所有定义字段    \n        Field[] fields &#x3D; c.getDeclaredFields();\n        &#x2F;&#x2F; 循环遍历字段，获取字段对应的属性值    \n        for (Field field : fields) &#123;    \n            &#x2F;&#x2F; 如果不为空，设置可见性，然后返回    \n            field.setAccessible(true); \n            try &#123;    \n                &#x2F;&#x2F; 设置字段可见，即可用get方法获取属性值。    \n            \tif(field.get(joinPoint) !&#x3D; null)&#123;\n            \t\tSystem.err.println(field.getName() + &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + field.get(joinPoint));\n            \t&#125;\n            &#125; catch (Exception e) &#123;    \n            \tSystem.err.println(&quot;error--------&quot;+this.getClass().getMethods()+&quot;.Reason is:&quot;+e.getMessage());    \n            &#125;    \n        &#125;   \n        \n\t&#125;\n\t\n&#125;</code></pre>\n\n<h2 id=\"在方法上进行添加注解\"><a href=\"#在方法上进行添加注解\" class=\"headerlink\" title=\"在方法上进行添加注解\"></a>在方法上进行添加注解</h2><pre><code class=\"hljs oxygene\">@TestC\n<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">&#123;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-comment\">    //TODO IS CODING</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-comment\">&#125;</span></span></code></pre>\n\n<blockquote>\n<p>以上就是一个最简单的注解的写法</p>\n</blockquote>\n"},{"title":"Python利用urlib2传输一个超大的集合给Java后端","date":"2018-03-01T14:50:48.000Z","_content":"### 我们需求中需要传输的超大集合\n\n> 集合长度为：492*6条\n\n```\narr = [{\n    \"cityName\": \"北京\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"beijing\"\n}, {\n    \"cityName\": \"山东省\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"shandong\"\n}, {\n    \"cityName\": \"上海\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"shanghai\"\n}, ...]\n```\n\n### Python通过POST发送集合\n\n> 集合传输只能依靠于JSON字符串传输，这里就需要非常的注意了\n\n1. 集合转为JSON字符串，中文按照UTF-8编码\n\n```\n    strs = json.dumps(result, ensure_ascii=False, encoding='UTF-8')\n    params = urllib.urlencode({\"saveList\": strs})\n```\n\n2. 发送POST请求，get请求不合适，也不能传输大文本\n\n```\n    # 定义一些文件头\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\", \"Connection\": \"Keep-Alive\",\n               \"Referer\": 'http://127.0.0.1:8080/test'};\n    # 与网站构建一个连接\n    conn = httplib.HTTPConnection(\"127.0.0.1\", 8080);\n    # 开始进行数据提交，同时也可以使用get进行\n    conn.request(method=\"POST\", url=\"/test\", body=params, headers=headers);\n    # 返回处理后的数据\n    response = conn.getresponse();\n    # 判断是否提交成功\n    if response.status == 200:\n        print\"发布成功!^_^!\";\n    else:\n        print\"发布失败\\^0^/\";\n    # 关闭连接\n    conn.close();strs = json.dumps(result, ensure_ascii=False, encoding='UTF-8')\n    params = urllib.urlencode({\"saveList\": strs})\n```\n### 这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\n\n```\n    @RequestMapping(value=\"/test\", produces=\"text/html;charset=UTF-8\")\n\t@ResponseBody\n\tpublic String getWeatherList(HttpServletRequest request){\n\t    String json = request.getParameter(\"saveList\");\n\t    JSONArray jsonArray = JSONArray.fromObject(json);\n        Object[] os = jsonArray .toArray();\n        for(int i=0; i<os.length; i++) {\n            JSONObject jsonObj = JSONObject.fromObject(os[i]);\n            System.out.println(jsonObj.get(\"cityName\"));\n        }\n\t}\n    \n```\n> 打印结果: 上海\n","source":"_posts/2018/pythontojava.md","raw":"---\ntitle: Python利用urlib2传输一个超大的集合给Java后端\ndate: 2018-03-01 22:50:48\ntags: python, java, urlib2, json, list\n---\n### 我们需求中需要传输的超大集合\n\n> 集合长度为：492*6条\n\n```\narr = [{\n    \"cityName\": \"北京\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"beijing\"\n}, {\n    \"cityName\": \"山东省\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"shandong\"\n}, {\n    \"cityName\": \"上海\",\n    \"temperature\": 25, \n    \"humidity\": 23,\n    \"population\": 23,\n    \"english\": \"shanghai\"\n}, ...]\n```\n\n### Python通过POST发送集合\n\n> 集合传输只能依靠于JSON字符串传输，这里就需要非常的注意了\n\n1. 集合转为JSON字符串，中文按照UTF-8编码\n\n```\n    strs = json.dumps(result, ensure_ascii=False, encoding='UTF-8')\n    params = urllib.urlencode({\"saveList\": strs})\n```\n\n2. 发送POST请求，get请求不合适，也不能传输大文本\n\n```\n    # 定义一些文件头\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\", \"Connection\": \"Keep-Alive\",\n               \"Referer\": 'http://127.0.0.1:8080/test'};\n    # 与网站构建一个连接\n    conn = httplib.HTTPConnection(\"127.0.0.1\", 8080);\n    # 开始进行数据提交，同时也可以使用get进行\n    conn.request(method=\"POST\", url=\"/test\", body=params, headers=headers);\n    # 返回处理后的数据\n    response = conn.getresponse();\n    # 判断是否提交成功\n    if response.status == 200:\n        print\"发布成功!^_^!\";\n    else:\n        print\"发布失败\\^0^/\";\n    # 关闭连接\n    conn.close();strs = json.dumps(result, ensure_ascii=False, encoding='UTF-8')\n    params = urllib.urlencode({\"saveList\": strs})\n```\n### 这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\n\n```\n    @RequestMapping(value=\"/test\", produces=\"text/html;charset=UTF-8\")\n\t@ResponseBody\n\tpublic String getWeatherList(HttpServletRequest request){\n\t    String json = request.getParameter(\"saveList\");\n\t    JSONArray jsonArray = JSONArray.fromObject(json);\n        Object[] os = jsonArray .toArray();\n        for(int i=0; i<os.length; i++) {\n            JSONObject jsonObj = JSONObject.fromObject(os[i]);\n            System.out.println(jsonObj.get(\"cityName\"));\n        }\n\t}\n    \n```\n> 打印结果: 上海\n","slug":"2018/pythontojava","published":1,"updated":"2020-10-20T02:22:05.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvot0008p4fyfxyedlbb","content":"<h3 id=\"我们需求中需要传输的超大集合\"><a href=\"#我们需求中需要传输的超大集合\" class=\"headerlink\" title=\"我们需求中需要传输的超大集合\"></a>我们需求中需要传输的超大集合</h3><blockquote>\n<p>集合长度为：492*6条</p>\n</blockquote>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-string\">arr</span> <span class=\"hljs-string\">=</span> [&#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;北京&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;beijing&quot;</span>\n&#125;, &#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;山东省&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;shandong&quot;</span>\n&#125;, &#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;上海&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;shanghai&quot;</span>\n&#125;, <span class=\"hljs-string\">...</span>]</code></pre>\n\n<h3 id=\"Python通过POST发送集合\"><a href=\"#Python通过POST发送集合\" class=\"headerlink\" title=\"Python通过POST发送集合\"></a>Python通过POST发送集合</h3><blockquote>\n<p>集合传输只能依靠于JSON字符串传输，这里就需要非常的注意了</p>\n</blockquote>\n<ol>\n<li>集合转为JSON字符串，中文按照UTF-8编码</li>\n</ol>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">strs</span> = json.dumps(result, ensure_ascii=<span class=\"hljs-literal\">False</span>, encoding=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)\n<span class=\"hljs-attr\">params</span> = urllib.urlencode(&#123;<span class=\"hljs-string\">&quot;saveList&quot;</span>: strs&#125;)</code></pre>\n\n<ol start=\"2\">\n<li>发送POST请求，get请求不合适，也不能传输大文本</li>\n</ol>\n<pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 定义一些文件头</span>\nheaders = &#123;<span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/x-www-form-urlencoded&quot;</span>, <span class=\"hljs-string\">&quot;Connection&quot;</span>: <span class=\"hljs-string\">&quot;Keep-Alive&quot;</span>,\n           <span class=\"hljs-string\">&quot;Referer&quot;</span>: <span class=\"hljs-string\">&#x27;http://127.0.0.1:8080/test&#x27;</span>&#125;;\n<span class=\"hljs-comment\"># 与网站构建一个连接</span>\nconn = httplib.HTTPConnection(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, 8080);\n<span class=\"hljs-comment\"># 开始进行数据提交，同时也可以使用get进行</span>\nconn.request(<span class=\"hljs-attribute\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-attribute\">url</span>=<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-attribute\">body</span>=params, <span class=\"hljs-attribute\">headers</span>=headers);\n<span class=\"hljs-comment\"># 返回处理后的数据</span>\nresponse = conn.getresponse();\n<span class=\"hljs-comment\"># 判断是否提交成功</span>\n<span class=\"hljs-keyword\">if</span> response.status == 200:\n    print<span class=\"hljs-string\">&quot;发布成功!^_^!&quot;</span>;\n<span class=\"hljs-keyword\">else</span>:\n    print<span class=\"hljs-string\">&quot;发布失败\\^0^/&quot;</span>;\n<span class=\"hljs-comment\"># 关闭连接</span>\nconn.close();strs = json.dumps(result, <span class=\"hljs-attribute\">ensure_ascii</span>=<span class=\"hljs-literal\">False</span>, <span class=\"hljs-attribute\">encoding</span>=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)\nparams = urllib.urlencode(&#123;<span class=\"hljs-string\">&quot;saveList&quot;</span>: strs&#125;)</code></pre>\n<h3 id=\"这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\"><a href=\"#这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\" class=\"headerlink\" title=\"这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\"></a>这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了</h3><pre><code class=\"hljs reasonml\">   @<span class=\"hljs-constructor\">RequestMapping(<span class=\"hljs-params\">value</span>=<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-params\">produces</span>=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span>)</span>\n@ResponseBody\npublic String get<span class=\"hljs-constructor\">WeatherList(HttpServletRequest <span class=\"hljs-params\">request</span>)</span>&#123;\n    String json = request.get<span class=\"hljs-constructor\">Parameter(<span class=\"hljs-string\">&quot;saveList&quot;</span>)</span>;\n    JSONArray jsonArray = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSONArray</span>.</span></span>from<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">json</span>)</span>;\n       Object<span class=\"hljs-literal\">[]</span> os = jsonArray .<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Array()</span>;\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;os.length; i++) &#123;\n           JSONObject jsonObj = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSONObject</span>.</span></span>from<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">os</span>[<span class=\"hljs-params\">i</span>])</span>;\n           <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(jsonObj.get(<span class=\"hljs-string\">&quot;cityName&quot;</span>));\n       &#125;\n&#125;</code></pre>\n<blockquote>\n<p>打印结果: 上海</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"我们需求中需要传输的超大集合\"><a href=\"#我们需求中需要传输的超大集合\" class=\"headerlink\" title=\"我们需求中需要传输的超大集合\"></a>我们需求中需要传输的超大集合</h3><blockquote>\n<p>集合长度为：492*6条</p>\n</blockquote>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-string\">arr</span> <span class=\"hljs-string\">=</span> [&#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;北京&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;beijing&quot;</span>\n&#125;, &#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;山东省&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;shandong&quot;</span>\n&#125;, &#123;\n    <span class=\"hljs-attr\">&quot;cityName&quot;:</span> <span class=\"hljs-string\">&quot;上海&quot;</span>,\n    <span class=\"hljs-attr\">&quot;temperature&quot;:</span> <span class=\"hljs-number\">25</span>, \n    <span class=\"hljs-attr\">&quot;humidity&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;population&quot;:</span> <span class=\"hljs-number\">23</span>,\n    <span class=\"hljs-attr\">&quot;english&quot;:</span> <span class=\"hljs-string\">&quot;shanghai&quot;</span>\n&#125;, <span class=\"hljs-string\">...</span>]</code></pre>\n\n<h3 id=\"Python通过POST发送集合\"><a href=\"#Python通过POST发送集合\" class=\"headerlink\" title=\"Python通过POST发送集合\"></a>Python通过POST发送集合</h3><blockquote>\n<p>集合传输只能依靠于JSON字符串传输，这里就需要非常的注意了</p>\n</blockquote>\n<ol>\n<li>集合转为JSON字符串，中文按照UTF-8编码</li>\n</ol>\n<pre><code class=\"hljs ini\"><span class=\"hljs-attr\">strs</span> = json.dumps(result, ensure_ascii=<span class=\"hljs-literal\">False</span>, encoding=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)\n<span class=\"hljs-attr\">params</span> = urllib.urlencode(&#123;<span class=\"hljs-string\">&quot;saveList&quot;</span>: strs&#125;)</code></pre>\n\n<ol start=\"2\">\n<li>发送POST请求，get请求不合适，也不能传输大文本</li>\n</ol>\n<pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 定义一些文件头</span>\nheaders = &#123;<span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;application/x-www-form-urlencoded&quot;</span>, <span class=\"hljs-string\">&quot;Connection&quot;</span>: <span class=\"hljs-string\">&quot;Keep-Alive&quot;</span>,\n           <span class=\"hljs-string\">&quot;Referer&quot;</span>: <span class=\"hljs-string\">&#x27;http://127.0.0.1:8080/test&#x27;</span>&#125;;\n<span class=\"hljs-comment\"># 与网站构建一个连接</span>\nconn = httplib.HTTPConnection(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, 8080);\n<span class=\"hljs-comment\"># 开始进行数据提交，同时也可以使用get进行</span>\nconn.request(<span class=\"hljs-attribute\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-attribute\">url</span>=<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-attribute\">body</span>=params, <span class=\"hljs-attribute\">headers</span>=headers);\n<span class=\"hljs-comment\"># 返回处理后的数据</span>\nresponse = conn.getresponse();\n<span class=\"hljs-comment\"># 判断是否提交成功</span>\n<span class=\"hljs-keyword\">if</span> response.status == 200:\n    print<span class=\"hljs-string\">&quot;发布成功!^_^!&quot;</span>;\n<span class=\"hljs-keyword\">else</span>:\n    print<span class=\"hljs-string\">&quot;发布失败\\^0^/&quot;</span>;\n<span class=\"hljs-comment\"># 关闭连接</span>\nconn.close();strs = json.dumps(result, <span class=\"hljs-attribute\">ensure_ascii</span>=<span class=\"hljs-literal\">False</span>, <span class=\"hljs-attribute\">encoding</span>=<span class=\"hljs-string\">&#x27;UTF-8&#x27;</span>)\nparams = urllib.urlencode(&#123;<span class=\"hljs-string\">&quot;saveList&quot;</span>: strs&#125;)</code></pre>\n<h3 id=\"这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\"><a href=\"#这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\" class=\"headerlink\" title=\"这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了\"></a>这样传输，既可以解决传输大量数据，也可以传输中文，java直接接受到字符串，也不需要转码，转成JSON字符串，就可以循环遍历存储数据库了</h3><pre><code class=\"hljs reasonml\">   @<span class=\"hljs-constructor\">RequestMapping(<span class=\"hljs-params\">value</span>=<span class=\"hljs-string\">&quot;/test&quot;</span>, <span class=\"hljs-params\">produces</span>=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span>)</span>\n@ResponseBody\npublic String get<span class=\"hljs-constructor\">WeatherList(HttpServletRequest <span class=\"hljs-params\">request</span>)</span>&#123;\n    String json = request.get<span class=\"hljs-constructor\">Parameter(<span class=\"hljs-string\">&quot;saveList&quot;</span>)</span>;\n    JSONArray jsonArray = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSONArray</span>.</span></span>from<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">json</span>)</span>;\n       Object<span class=\"hljs-literal\">[]</span> os = jsonArray .<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Array()</span>;\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;os.length; i++) &#123;\n           JSONObject jsonObj = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSONObject</span>.</span></span>from<span class=\"hljs-constructor\">Object(<span class=\"hljs-params\">os</span>[<span class=\"hljs-params\">i</span>])</span>;\n           <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(jsonObj.get(<span class=\"hljs-string\">&quot;cityName&quot;</span>));\n       &#125;\n&#125;</code></pre>\n<blockquote>\n<p>打印结果: 上海</p>\n</blockquote>\n"},{"title":"Spring配置文件p冒号driverClass等元素错误","date":"2018-03-01T14:52:01.000Z","_content":"\n### 在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误\n\n```\nThe prefix \"p\" for attribute \"p:jdbc.driverClassName\" associatedwith an element type \"bean\" is not bound\n意思是: 前缀“p”属性“p:jdbc。driverClassName”与某个元素类型相关“bean”却不被捆绑\n \n这是因为在使用XML Schema作为配置文件的语义约束时,没有添加下面这条语句\n<?xml version=\"1.0\"encoding=\"UTF-8\"?> \n<beansxmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:tx=\"http://www.springframework.org/schema/tx\"xmlns:aop=\"http://www.springframework.org/schema/aop\"xmlns:context=\"http://www.springframework.org/schema/context\"xmlns:jee=\"http://www.springframework.org/schema/jee\"\n**** 重要的一句****>   xmlns:p=\"http://www.springframework.org/schema/p\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx-3.2.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop-3.2.xsdhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-3.2.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-3.2.xsdhttp://www.springframework.org/schema/jeehttp://www.springframework.org/schema/jee/spring-jee-3.2.xsd\">\n<!-- 使用c3p0配置数据源--> \n<bean id=\"dataSource\"class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"destroy-method=\"close\"p:jdbc.driverClassName=\"com.mysql.jdbc.Driver\"\n p:jdbcUrl=\"jdbc:mysql://localhost:3306/hrSystem\"\n p:user=\"root\"\n p:password=\"mrxing\"\n p:maxPoolSize=\"40\"\n p:minPoolSize=\"1\" \n p:initialPoolSize=\"1\"\n p:maxIdleTime=\"20\"\n</bean>\n</beans>\n```\n\n<html>\n    <h4 style=\"color:#F00;\">XML Schema 中加入：xmlns:p=\"http://www.springframework.org/schema/p\"</h4>\n</html>\n\n","source":"_posts/2018/springp.md","raw":"---\ntitle: Spring配置文件p冒号driverClass等元素错误\ndate: 2018-03-01 22:52:01\ntags: spring, p, <p>\n---\n\n### 在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误\n\n```\nThe prefix \"p\" for attribute \"p:jdbc.driverClassName\" associatedwith an element type \"bean\" is not bound\n意思是: 前缀“p”属性“p:jdbc。driverClassName”与某个元素类型相关“bean”却不被捆绑\n \n这是因为在使用XML Schema作为配置文件的语义约束时,没有添加下面这条语句\n<?xml version=\"1.0\"encoding=\"UTF-8\"?> \n<beansxmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:tx=\"http://www.springframework.org/schema/tx\"xmlns:aop=\"http://www.springframework.org/schema/aop\"xmlns:context=\"http://www.springframework.org/schema/context\"xmlns:jee=\"http://www.springframework.org/schema/jee\"\n**** 重要的一句****>   xmlns:p=\"http://www.springframework.org/schema/p\"\n  xsi:schemaLocation=\"http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx-3.2.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop-3.2.xsdhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-3.2.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-3.2.xsdhttp://www.springframework.org/schema/jeehttp://www.springframework.org/schema/jee/spring-jee-3.2.xsd\">\n<!-- 使用c3p0配置数据源--> \n<bean id=\"dataSource\"class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"destroy-method=\"close\"p:jdbc.driverClassName=\"com.mysql.jdbc.Driver\"\n p:jdbcUrl=\"jdbc:mysql://localhost:3306/hrSystem\"\n p:user=\"root\"\n p:password=\"mrxing\"\n p:maxPoolSize=\"40\"\n p:minPoolSize=\"1\" \n p:initialPoolSize=\"1\"\n p:maxIdleTime=\"20\"\n</bean>\n</beans>\n```\n\n<html>\n    <h4 style=\"color:#F00;\">XML Schema 中加入：xmlns:p=\"http://www.springframework.org/schema/p\"</h4>\n</html>\n\n","slug":"2018/springp","published":1,"updated":"2020-10-20T02:22:05.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvou0009p4fy95qp11eu","content":"<h3 id=\"在Spring配置文件中配置数据源使用SpEL、p-driverClass等元素时不小心会出现下面错误\"><a href=\"#在Spring配置文件中配置数据源使用SpEL、p-driverClass等元素时不小心会出现下面错误\" class=\"headerlink\" title=\"在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误\"></a>在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误</h3><pre><code class=\"hljs django\"><span class=\"xml\">The prefix &quot;p&quot; for attribute &quot;p:jdbc.driverClassName&quot; associatedwith an element type &quot;bean&quot; is not bound</span>\n<span class=\"xml\">意思是: 前缀“p”属性“p:jdbc。driverClassName”与某个元素类型相关“bean”却不被捆绑</span>\n<span class=\"xml\"> </span>\n<span class=\"xml\">这是因为在使用XML Schema作为配置文件的语义约束时,没有添加下面这条语句</span>\n<span class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;</span> </span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beansxmlns=&quot;http:</span>//<span class=\"hljs-attr\">www.springframework.org</span>/<span class=\"hljs-attr\">schema</span>/<span class=\"hljs-attr\">beans</span>&quot;<span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class=\"hljs-attr\">xmlns:tx</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/tx&quot;</span><span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span><span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span><span class=\"hljs-attr\">xmlns:jee</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/jee&quot;</span></span></span>\n<span class=\"xml\">**** 重要的一句****&gt;   xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span>\n<span class=\"xml\">  xsi:schemaLocation=&quot;http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx-3.2.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop-3.2.xsdhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-3.2.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-3.2.xsdhttp://www.springframework.org/schema/jeehttp://www.springframework.org/schema/jee/spring-jee-3.2.xsd&quot;&gt;</span>\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- 使用c3p0配置数据源--&gt;</span> </span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span><span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;close&quot;</span><span class=\"hljs-attr\">p:jdbc.driverClassName</span>=<span class=\"hljs-string\">&quot;com.mysql.jdbc.Driver&quot;</span></span></span>\n<span class=\"xml\"> p:jdbcUrl=&quot;jdbc:mysql://localhost:3306/hrSystem&quot;</span>\n<span class=\"xml\"> p:user=&quot;root&quot;</span>\n<span class=\"xml\"> p:password=&quot;mrxing&quot;</span>\n<span class=\"xml\"> p:maxPoolSize=&quot;40&quot;</span>\n<span class=\"xml\"> p:minPoolSize=&quot;1&quot; </span>\n<span class=\"xml\"> p:initialPoolSize=&quot;1&quot;</span>\n<span class=\"xml\"> p:maxIdleTime=&quot;20&quot;</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></span></code></pre>\n\n<html>\n    <h4 style=\"color:#F00;\">XML Schema 中加入：xmlns:p=\"http://www.springframework.org/schema/p\"</h4>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在Spring配置文件中配置数据源使用SpEL、p-driverClass等元素时不小心会出现下面错误\"><a href=\"#在Spring配置文件中配置数据源使用SpEL、p-driverClass等元素时不小心会出现下面错误\" class=\"headerlink\" title=\"在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误\"></a>在Spring配置文件中配置数据源使用SpEL、p:driverClass等元素时不小心会出现下面错误</h3><pre><code class=\"hljs django\"><span class=\"xml\">The prefix &quot;p&quot; for attribute &quot;p:jdbc.driverClassName&quot; associatedwith an element type &quot;bean&quot; is not bound</span>\n<span class=\"xml\">意思是: 前缀“p”属性“p:jdbc。driverClassName”与某个元素类型相关“bean”却不被捆绑</span>\n<span class=\"xml\"> </span>\n<span class=\"xml\">这是因为在使用XML Schema作为配置文件的语义约束时,没有添加下面这条语句</span>\n<span class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;</span> </span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beansxmlns=&quot;http:</span>//<span class=\"hljs-attr\">www.springframework.org</span>/<span class=\"hljs-attr\">schema</span>/<span class=\"hljs-attr\">beans</span>&quot;<span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span class=\"hljs-attr\">xmlns:tx</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/tx&quot;</span><span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span><span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span><span class=\"hljs-attr\">xmlns:jee</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/jee&quot;</span></span></span>\n<span class=\"xml\">**** 重要的一句****&gt;   xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span>\n<span class=\"xml\">  xsi:schemaLocation=&quot;http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx-3.2.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop-3.2.xsdhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-3.2.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-3.2.xsdhttp://www.springframework.org/schema/jeehttp://www.springframework.org/schema/jee/spring-jee-3.2.xsd&quot;&gt;</span>\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- 使用c3p0配置数据源--&gt;</span> </span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span><span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;close&quot;</span><span class=\"hljs-attr\">p:jdbc.driverClassName</span>=<span class=\"hljs-string\">&quot;com.mysql.jdbc.Driver&quot;</span></span></span>\n<span class=\"xml\"> p:jdbcUrl=&quot;jdbc:mysql://localhost:3306/hrSystem&quot;</span>\n<span class=\"xml\"> p:user=&quot;root&quot;</span>\n<span class=\"xml\"> p:password=&quot;mrxing&quot;</span>\n<span class=\"xml\"> p:maxPoolSize=&quot;40&quot;</span>\n<span class=\"xml\"> p:minPoolSize=&quot;1&quot; </span>\n<span class=\"xml\"> p:initialPoolSize=&quot;1&quot;</span>\n<span class=\"xml\"> p:maxIdleTime=&quot;20&quot;</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></span></code></pre>\n\n<html>\n    <h4 style=\"color:#F00;\">XML Schema 中加入：xmlns:p=\"http://www.springframework.org/schema/p\"</h4>\n</html>\n\n"},{"title":"Java中 VO、 PO、DO、DTO、 BO、 QO、DAO、POJO的概念","date":"2018-02-23T10:59:51.000Z","_content":"\n### PO(persistant object) 持久对象\n\n> 在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。\n\n### DO（Domain Object）领域对象\n\n> 就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。\n\n### TO(Transfer Object) ，数据传输对象\n\n> 在应用程序不同 tie( 关系 ) 之间传输的对象\n\n### DTO（Data Transfer Object）数据传输对象\n\n> 这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\n\n> 主要用于远程调用等需要大量传输对象的地方。\n比如我们一张表有100个字段，那么对应的PO就有100个属性。\n但是我们界面上只要显示10个字段，\n客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，\n这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO\n\n###  VO(view object) 值对象\n\n>  视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\n\n> 通常用于业务层之间的数据传递,和PO一样也是仅仅包含数据而已.但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递.\n\n### BO(business object) 业务对象\n\n> 从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。\n\n### POJO(plain ordinary java object) 简单无规则 java 对象\n\n> 纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。\n\n### DAO(data access object) 数据访问对象\n\n> 是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作\n\n### O/R Mapper 对象/关系 映射\n\n> 定义好所有的mapping之后,这个O/R Mapper可以帮我们做很多的工作.通过这些mappings,这个O/R Mapper可以生成所有的关于对象保存,删除,读取的SQL语句,我们不再需要写那么多行的DAL代码了.\n\n> 实体Model(实体模式)\n\n> DAL(数据访问层)\n\n> IDAL(接口层)\n\n> DALFactory(类工厂)\n\n> BLL(业务逻辑层)\n\n> BOF    Business Object Framework      业务对象框架\n\n> SOA    Service Orient Architecture    面向服务的设计\n\n> EMF    Eclipse Model Framework        Eclipse建模框架\n","source":"_posts/2018/java-package-base-info.md","raw":"---\ntitle: Java中 VO、 PO、DO、DTO、 BO、 QO、DAO、POJO的概念\ndate: 2018-02-23 18:59:51\ntags: Java, package\n---\n\n### PO(persistant object) 持久对象\n\n> 在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。\n\n### DO（Domain Object）领域对象\n\n> 就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。\n\n### TO(Transfer Object) ，数据传输对象\n\n> 在应用程序不同 tie( 关系 ) 之间传输的对象\n\n### DTO（Data Transfer Object）数据传输对象\n\n> 这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\n\n> 主要用于远程调用等需要大量传输对象的地方。\n比如我们一张表有100个字段，那么对应的PO就有100个属性。\n但是我们界面上只要显示10个字段，\n客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，\n这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO\n\n###  VO(view object) 值对象\n\n>  视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\n\n> 通常用于业务层之间的数据传递,和PO一样也是仅仅包含数据而已.但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递.\n\n### BO(business object) 业务对象\n\n> 从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。\n\n### POJO(plain ordinary java object) 简单无规则 java 对象\n\n> 纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。\n\n### DAO(data access object) 数据访问对象\n\n> 是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作\n\n### O/R Mapper 对象/关系 映射\n\n> 定义好所有的mapping之后,这个O/R Mapper可以帮我们做很多的工作.通过这些mappings,这个O/R Mapper可以生成所有的关于对象保存,删除,读取的SQL语句,我们不再需要写那么多行的DAL代码了.\n\n> 实体Model(实体模式)\n\n> DAL(数据访问层)\n\n> IDAL(接口层)\n\n> DALFactory(类工厂)\n\n> BLL(业务逻辑层)\n\n> BOF    Business Object Framework      业务对象框架\n\n> SOA    Service Orient Architecture    面向服务的设计\n\n> EMF    Eclipse Model Framework        Eclipse建模框架\n","slug":"2018/java-package-base-info","published":1,"updated":"2020-10-20T02:22:05.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckghepvov000bp4fy9xs70jsj","content":"<h3 id=\"PO-persistant-object-持久对象\"><a href=\"#PO-persistant-object-持久对象\" class=\"headerlink\" title=\"PO(persistant object) 持久对象\"></a>PO(persistant object) 持久对象</h3><blockquote>\n<p>在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p>\n</blockquote>\n<h3 id=\"DO（Domain-Object）领域对象\"><a href=\"#DO（Domain-Object）领域对象\" class=\"headerlink\" title=\"DO（Domain Object）领域对象\"></a>DO（Domain Object）领域对象</h3><blockquote>\n<p>就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。</p>\n</blockquote>\n<h3 id=\"TO-Transfer-Object-，数据传输对象\"><a href=\"#TO-Transfer-Object-，数据传输对象\" class=\"headerlink\" title=\"TO(Transfer Object) ，数据传输对象\"></a>TO(Transfer Object) ，数据传输对象</h3><blockquote>\n<p>在应用程序不同 tie( 关系 ) 之间传输的对象</p>\n</blockquote>\n<h3 id=\"DTO（Data-Transfer-Object）数据传输对象\"><a href=\"#DTO（Data-Transfer-Object）数据传输对象\" class=\"headerlink\" title=\"DTO（Data Transfer Object）数据传输对象\"></a>DTO（Data Transfer Object）数据传输对象</h3><blockquote>\n<p>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>\n</blockquote>\n<blockquote>\n<p>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p>\n</blockquote>\n<h3 id=\"VO-view-object-值对象\"><a href=\"#VO-view-object-值对象\" class=\"headerlink\" title=\"VO(view object) 值对象\"></a>VO(view object) 值对象</h3><blockquote>\n<p> 视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>\n</blockquote>\n<blockquote>\n<p>通常用于业务层之间的数据传递,和PO一样也是仅仅包含数据而已.但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递.</p>\n</blockquote>\n<h3 id=\"BO-business-object-业务对象\"><a href=\"#BO-business-object-业务对象\" class=\"headerlink\" title=\"BO(business object) 业务对象\"></a>BO(business object) 业务对象</h3><blockquote>\n<p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p>\n</blockquote>\n<h3 id=\"POJO-plain-ordinary-java-object-简单无规则-java-对象\"><a href=\"#POJO-plain-ordinary-java-object-简单无规则-java-对象\" class=\"headerlink\" title=\"POJO(plain ordinary java object) 简单无规则 java 对象\"></a>POJO(plain ordinary java object) 简单无规则 java 对象</h3><blockquote>\n<p>纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。</p>\n</blockquote>\n<h3 id=\"DAO-data-access-object-数据访问对象\"><a href=\"#DAO-data-access-object-数据访问对象\" class=\"headerlink\" title=\"DAO(data access object) 数据访问对象\"></a>DAO(data access object) 数据访问对象</h3><blockquote>\n<p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p>\n</blockquote>\n<h3 id=\"O-R-Mapper-对象-关系-映射\"><a href=\"#O-R-Mapper-对象-关系-映射\" class=\"headerlink\" title=\"O/R Mapper 对象/关系 映射\"></a>O/R Mapper 对象/关系 映射</h3><blockquote>\n<p>定义好所有的mapping之后,这个O/R Mapper可以帮我们做很多的工作.通过这些mappings,这个O/R Mapper可以生成所有的关于对象保存,删除,读取的SQL语句,我们不再需要写那么多行的DAL代码了.</p>\n</blockquote>\n<blockquote>\n<p>实体Model(实体模式)</p>\n</blockquote>\n<blockquote>\n<p>DAL(数据访问层)</p>\n</blockquote>\n<blockquote>\n<p>IDAL(接口层)</p>\n</blockquote>\n<blockquote>\n<p>DALFactory(类工厂)</p>\n</blockquote>\n<blockquote>\n<p>BLL(业务逻辑层)</p>\n</blockquote>\n<blockquote>\n<p>BOF    Business Object Framework      业务对象框架</p>\n</blockquote>\n<blockquote>\n<p>SOA    Service Orient Architecture    面向服务的设计</p>\n</blockquote>\n<blockquote>\n<p>EMF    Eclipse Model Framework        Eclipse建模框架</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PO-persistant-object-持久对象\"><a href=\"#PO-persistant-object-持久对象\" class=\"headerlink\" title=\"PO(persistant object) 持久对象\"></a>PO(persistant object) 持久对象</h3><blockquote>\n<p>在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p>\n</blockquote>\n<h3 id=\"DO（Domain-Object）领域对象\"><a href=\"#DO（Domain-Object）领域对象\" class=\"headerlink\" title=\"DO（Domain Object）领域对象\"></a>DO（Domain Object）领域对象</h3><blockquote>\n<p>就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。</p>\n</blockquote>\n<h3 id=\"TO-Transfer-Object-，数据传输对象\"><a href=\"#TO-Transfer-Object-，数据传输对象\" class=\"headerlink\" title=\"TO(Transfer Object) ，数据传输对象\"></a>TO(Transfer Object) ，数据传输对象</h3><blockquote>\n<p>在应用程序不同 tie( 关系 ) 之间传输的对象</p>\n</blockquote>\n<h3 id=\"DTO（Data-Transfer-Object）数据传输对象\"><a href=\"#DTO（Data-Transfer-Object）数据传输对象\" class=\"headerlink\" title=\"DTO（Data Transfer Object）数据传输对象\"></a>DTO（Data Transfer Object）数据传输对象</h3><blockquote>\n<p>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p>\n</blockquote>\n<blockquote>\n<p>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p>\n</blockquote>\n<h3 id=\"VO-view-object-值对象\"><a href=\"#VO-view-object-值对象\" class=\"headerlink\" title=\"VO(view object) 值对象\"></a>VO(view object) 值对象</h3><blockquote>\n<p> 视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p>\n</blockquote>\n<blockquote>\n<p>通常用于业务层之间的数据传递,和PO一样也是仅仅包含数据而已.但应是抽象出的业务对象,可以和表对应,也可以不,这根据业务的需要.个人觉得同DTO(数据传输对象),在web上传递.</p>\n</blockquote>\n<h3 id=\"BO-business-object-业务对象\"><a href=\"#BO-business-object-业务对象\" class=\"headerlink\" title=\"BO(business object) 业务对象\"></a>BO(business object) 业务对象</h3><blockquote>\n<p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p>\n</blockquote>\n<h3 id=\"POJO-plain-ordinary-java-object-简单无规则-java-对象\"><a href=\"#POJO-plain-ordinary-java-object-简单无规则-java-对象\" class=\"headerlink\" title=\"POJO(plain ordinary java object) 简单无规则 java 对象\"></a>POJO(plain ordinary java object) 简单无规则 java 对象</h3><blockquote>\n<p>纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。</p>\n</blockquote>\n<h3 id=\"DAO-data-access-object-数据访问对象\"><a href=\"#DAO-data-access-object-数据访问对象\" class=\"headerlink\" title=\"DAO(data access object) 数据访问对象\"></a>DAO(data access object) 数据访问对象</h3><blockquote>\n<p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p>\n</blockquote>\n<h3 id=\"O-R-Mapper-对象-关系-映射\"><a href=\"#O-R-Mapper-对象-关系-映射\" class=\"headerlink\" title=\"O/R Mapper 对象/关系 映射\"></a>O/R Mapper 对象/关系 映射</h3><blockquote>\n<p>定义好所有的mapping之后,这个O/R Mapper可以帮我们做很多的工作.通过这些mappings,这个O/R Mapper可以生成所有的关于对象保存,删除,读取的SQL语句,我们不再需要写那么多行的DAL代码了.</p>\n</blockquote>\n<blockquote>\n<p>实体Model(实体模式)</p>\n</blockquote>\n<blockquote>\n<p>DAL(数据访问层)</p>\n</blockquote>\n<blockquote>\n<p>IDAL(接口层)</p>\n</blockquote>\n<blockquote>\n<p>DALFactory(类工厂)</p>\n</blockquote>\n<blockquote>\n<p>BLL(业务逻辑层)</p>\n</blockquote>\n<blockquote>\n<p>BOF    Business Object Framework      业务对象框架</p>\n</blockquote>\n<blockquote>\n<p>SOA    Service Orient Architecture    面向服务的设计</p>\n</blockquote>\n<blockquote>\n<p>EMF    Eclipse Model Framework        Eclipse建模框架</p>\n</blockquote>\n"},{"title":"使用MySQL管理型数据库实现不定列数据存储","date":"2020-12-08T16:00:00.000Z","index_img":"/images/mysql/index.png","banner_img":"/images/post_banner.jpeg","_content":"\n# 使用MySQL管理型数据库实现不定列数据存储\n\n> 有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，\n但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据\n\n\n>  就对于这个需求呢，我在MySQL中设计了三张表， 表中重点字段为：\n\n> 只列举重要字段\n\n> 第一张表sample字段为：\n\n```sql\nsample_number（样本编号 - 生成策略当前上传的日期然后另外加入4位数的自增从0001开始例如第一个202012090001）、sample_name（上传excel的名字）、excel_url（上传excel存储在服务器的地址）\n```\n\n> 第二张表sample_field字段 （存储列名）\n\n```sql\nsample_number（样本编号）、field_name（字段名称）、field_type（STRING、INT、DATE）（字段类型）、is_primary（是否为主键）、field_index（字段排列顺序）\n```\n\n> 第三张表sample_data 字段（存储数据）：\n\n```sql\nsample_number（样本编号）、field_name（字段名称）、row_id（行id，用来区分哪些数据是属于同一行）、field_value（具体的列的值，因为字段已经表示了类型，\n所以存储的时候直接都存储字符串，根据需要的时候在去做转换）\n```\n\n# 错误起源\n\n> 所以，有了上面三张表之后，那就需要查询数据了，在查询数据的过程中呢，因为需要分页和条件筛选，按照逻辑进行组织了SQL，出错了\n\n###  错误提示\n\n```\nThis version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'\n```\n\n### 在官网中找到了这个限制和解决方式\n\nhttps://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\n\n### 解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题 \n\n```\nMySQL permits a subquery to refer to a stored function that has data-modifying side effects such as inserting rows into a table. For example, if f() inserts rows, the following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior is an extension to the SQL standard. In MySQL, it can produce nondeterministic results because f() might be executed a different number of times for different executions of a given query depending on how the optimizer chooses to handle it.\n\nFor statement-based or mixed-format replication, one implication of this indeterminism is that such a query can produce different results on the source and its slaves.\n```\n\n## 最终实现SQL\n\n```sql\nSELECT\n\thsd.row_id,\n\thsd.sample_number,\n\thsd.field_name,\n\thsd.field_value \nFROM\n\thwcss_sample_data AS hsd \nWHERE\n\tEXISTS (\n\tSELECT\n\t\trow_id \n\tFROM\n\t\t( SELECT row_id FROM hwcss_sample_data phsd WHERE del_flag = 0\n\t\t\t \tAND EXISTS (SELECT row_id FROM hwcss_sample_data WHERE field_name = 'S_Serial' AND field_value = '1001' AND  phsd.row_id = row_id ) \n\t\t\t\tAND EXISTS (SELECT row_id FROM hwcss_sample_data WHERE field_name = 'ID' AND field_value = 'B112527' AND  phsd.row_id = row_id )\n\t\t\t\t# TODO 可以再加入筛选条件\n\t\t\tGROUP BY row_id LIMIT 10 OFFSET 1 ) AS ihsd \n\tWHERE\n\t\thsd.row_id = ihsd.row_id \n\t) \nORDER BY\n\thsd.row_id\n```\n\n### 索引优化\n\n```\n在 row_id 和 field_name 上面做了索引优化，使用B+TREE索引，索引类型为 NORMAL\n```\n\n附录：\n\n> MySQL单表数据限制：https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html","source":"_posts/mysql/mysql_implment_indeterminate_column.md","raw":"---\ntitle: 使用MySQL管理型数据库实现不定列数据存储\ndate: 2020-12-09\ntags: Java,MySQL,IN,EXISTS,SQL优化,Design\nindex_img: /images/mysql/index.png # 缩略图\nbanner_img: /images/post_banner.jpeg # 文章banner图\ncategories: MySQL\n---\n\n# 使用MySQL管理型数据库实现不定列数据存储\n\n> 有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，\n但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据\n\n\n>  就对于这个需求呢，我在MySQL中设计了三张表， 表中重点字段为：\n\n> 只列举重要字段\n\n> 第一张表sample字段为：\n\n```sql\nsample_number（样本编号 - 生成策略当前上传的日期然后另外加入4位数的自增从0001开始例如第一个202012090001）、sample_name（上传excel的名字）、excel_url（上传excel存储在服务器的地址）\n```\n\n> 第二张表sample_field字段 （存储列名）\n\n```sql\nsample_number（样本编号）、field_name（字段名称）、field_type（STRING、INT、DATE）（字段类型）、is_primary（是否为主键）、field_index（字段排列顺序）\n```\n\n> 第三张表sample_data 字段（存储数据）：\n\n```sql\nsample_number（样本编号）、field_name（字段名称）、row_id（行id，用来区分哪些数据是属于同一行）、field_value（具体的列的值，因为字段已经表示了类型，\n所以存储的时候直接都存储字符串，根据需要的时候在去做转换）\n```\n\n# 错误起源\n\n> 所以，有了上面三张表之后，那就需要查询数据了，在查询数据的过程中呢，因为需要分页和条件筛选，按照逻辑进行组织了SQL，出错了\n\n###  错误提示\n\n```\nThis version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'\n```\n\n### 在官网中找到了这个限制和解决方式\n\nhttps://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\n\n### 解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题 \n\n```\nMySQL permits a subquery to refer to a stored function that has data-modifying side effects such as inserting rows into a table. For example, if f() inserts rows, the following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior is an extension to the SQL standard. In MySQL, it can produce nondeterministic results because f() might be executed a different number of times for different executions of a given query depending on how the optimizer chooses to handle it.\n\nFor statement-based or mixed-format replication, one implication of this indeterminism is that such a query can produce different results on the source and its slaves.\n```\n\n## 最终实现SQL\n\n```sql\nSELECT\n\thsd.row_id,\n\thsd.sample_number,\n\thsd.field_name,\n\thsd.field_value \nFROM\n\thwcss_sample_data AS hsd \nWHERE\n\tEXISTS (\n\tSELECT\n\t\trow_id \n\tFROM\n\t\t( SELECT row_id FROM hwcss_sample_data phsd WHERE del_flag = 0\n\t\t\t \tAND EXISTS (SELECT row_id FROM hwcss_sample_data WHERE field_name = 'S_Serial' AND field_value = '1001' AND  phsd.row_id = row_id ) \n\t\t\t\tAND EXISTS (SELECT row_id FROM hwcss_sample_data WHERE field_name = 'ID' AND field_value = 'B112527' AND  phsd.row_id = row_id )\n\t\t\t\t# TODO 可以再加入筛选条件\n\t\t\tGROUP BY row_id LIMIT 10 OFFSET 1 ) AS ihsd \n\tWHERE\n\t\thsd.row_id = ihsd.row_id \n\t) \nORDER BY\n\thsd.row_id\n```\n\n### 索引优化\n\n```\n在 row_id 和 field_name 上面做了索引优化，使用B+TREE索引，索引类型为 NORMAL\n```\n\n附录：\n\n> MySQL单表数据限制：https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html","slug":"mysql/mysql_implment_indeterminate_column","published":1,"updated":"2022-02-19T17:33:58.733Z","_id":"ckztv25xa0000wiw145tm22mx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"使用MySQL管理型数据库实现不定列数据存储\"><a href=\"#使用MySQL管理型数据库实现不定列数据存储\" class=\"headerlink\" title=\"使用MySQL管理型数据库实现不定列数据存储\"></a>使用MySQL管理型数据库实现不定列数据存储</h1><blockquote>\n<p>有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，<br>但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据</p>\n</blockquote>\n<blockquote>\n<p> 就对于这个需求呢，我在MySQL中设计了三张表， 表中重点字段为：</p>\n</blockquote>\n<blockquote>\n<p>只列举重要字段</p>\n</blockquote>\n<blockquote>\n<p>第一张表sample字段为：</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号 - 生成策略当前上传的日期然后另外加入4位数的自增从0001开始例如第一个202012090001）、sample_name（上传excel的名字）、excel_url（上传excel存储在服务器的地址）</code></pre>\n\n<blockquote>\n<p>第二张表sample_field字段 （存储列名）</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号）、field_name（字段名称）、field_type（STRING、INT、DATE）（字段类型）、is_primary（是否为主键）、field_index（字段排列顺序）</code></pre>\n\n<blockquote>\n<p>第三张表sample_data 字段（存储数据）：</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号）、field_name（字段名称）、row_id（行id，用来区分哪些数据是属于同一行）、field_value（具体的列的值，因为字段已经表示了类型，\n所以存储的时候直接都存储字符串，根据需要的时候在去做转换）</code></pre>\n\n<h1 id=\"错误起源\"><a href=\"#错误起源\" class=\"headerlink\" title=\"错误起源\"></a>错误起源</h1><blockquote>\n<p>所以，有了上面三张表之后，那就需要查询数据了，在查询数据的过程中呢，因为需要分页和条件筛选，按照逻辑进行组织了SQL，出错了</p>\n</blockquote>\n<h3 id=\"错误提示\"><a href=\"#错误提示\" class=\"headerlink\" title=\"错误提示\"></a>错误提示</h3><pre><code class=\"hljs pgsql\">This <span class=\"hljs-keyword\">version</span> <span class=\"hljs-keyword\">of</span> MySQL doesn<span class=\"hljs-string\">&#x27;t yet support &#x27;</span><span class=\"hljs-keyword\">LIMIT</span> &amp; <span class=\"hljs-keyword\">IN</span>/<span class=\"hljs-keyword\">ALL</span>/<span class=\"hljs-keyword\">ANY</span>/<span class=\"hljs-keyword\">SOME</span> subquery<span class=\"hljs-string\">&#x27;</span></code></pre>\n\n<h3 id=\"在官网中找到了这个限制和解决方式\"><a href=\"#在官网中找到了这个限制和解决方式\" class=\"headerlink\" title=\"在官网中找到了这个限制和解决方式\"></a>在官网中找到了这个限制和解决方式</h3><p><a href=\"https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\">https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html</a></p>\n<h3 id=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"><a href=\"#解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\" class=\"headerlink\" title=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"></a>解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题</h3><pre><code class=\"hljs applescript\">MySQL permits a subquery <span class=\"hljs-keyword\">to</span> refer <span class=\"hljs-keyword\">to</span> a stored function <span class=\"hljs-keyword\">that</span> has data-modifying side effects such <span class=\"hljs-keyword\">as</span> inserting rows <span class=\"hljs-keyword\">into</span> a table. For example, <span class=\"hljs-keyword\">if</span> f() inserts rows, <span class=\"hljs-keyword\">the</span> following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior <span class=\"hljs-keyword\">is</span> an extension <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">the</span> SQL standard. In MySQL, <span class=\"hljs-keyword\">it</span> can produce nondeterministic results because f() might be executed a different <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">times</span> <span class=\"hljs-keyword\">for</span> different executions <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">given</span> query depending <span class=\"hljs-keyword\">on</span> how <span class=\"hljs-keyword\">the</span> optimizer chooses <span class=\"hljs-keyword\">to</span> handle <span class=\"hljs-keyword\">it</span>.\n\nFor statement-based <span class=\"hljs-keyword\">or</span> mixed-format replication, one implication <span class=\"hljs-keyword\">of</span> this indeterminism <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">that</span> such a query can produce different results <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">the</span> source <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">its</span> slaves.</code></pre>\n\n<h2 id=\"最终实现SQL\"><a href=\"#最终实现SQL\" class=\"headerlink\" title=\"最终实现SQL\"></a>最终实现SQL</h2><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>\n\thsd.row_id,\n\thsd.sample_number,\n\thsd.field_name,\n\thsd.field_value \n<span class=\"hljs-keyword\">FROM</span>\n\thwcss_sample_data <span class=\"hljs-keyword\">AS</span> hsd \n<span class=\"hljs-keyword\">WHERE</span>\n\t<span class=\"hljs-keyword\">EXISTS</span> (\n\t<span class=\"hljs-keyword\">SELECT</span>\n\t\trow_id \n\t<span class=\"hljs-keyword\">FROM</span>\n\t\t( <span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data phsd <span class=\"hljs-keyword\">WHERE</span> del_flag = <span class=\"hljs-number\">0</span>\n\t\t\t \t<span class=\"hljs-keyword\">AND</span> <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data <span class=\"hljs-keyword\">WHERE</span> field_name = <span class=\"hljs-string\">&#x27;S_Serial&#x27;</span> <span class=\"hljs-keyword\">AND</span> field_value = <span class=\"hljs-string\">&#x27;1001&#x27;</span> <span class=\"hljs-keyword\">AND</span>  phsd.row_id = row_id ) \n\t\t\t\t<span class=\"hljs-keyword\">AND</span> <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data <span class=\"hljs-keyword\">WHERE</span> field_name = <span class=\"hljs-string\">&#x27;ID&#x27;</span> <span class=\"hljs-keyword\">AND</span> field_value = <span class=\"hljs-string\">&#x27;B112527&#x27;</span> <span class=\"hljs-keyword\">AND</span>  phsd.row_id = row_id )\n\t\t\t\t<span class=\"hljs-comment\"># TODO 可以再加入筛选条件</span>\n\t\t\t<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> row_id <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">OFFSET</span> <span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">AS</span> ihsd \n\t<span class=\"hljs-keyword\">WHERE</span>\n\t\thsd.row_id = ihsd.row_id \n\t) \n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span>\n\thsd.row_id</code></pre>\n\n<h3 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h3><pre><code class=\"hljs dos\">在 row_id 和 field_name 上面做了索引优化，使用B+<span class=\"hljs-built_in\">TREE</span>索引，索引类型为 NORMAL</code></pre>\n\n<p>附录：</p>\n<blockquote>\n<p>MySQL单表数据限制：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html\">https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用MySQL管理型数据库实现不定列数据存储\"><a href=\"#使用MySQL管理型数据库实现不定列数据存储\" class=\"headerlink\" title=\"使用MySQL管理型数据库实现不定列数据存储\"></a>使用MySQL管理型数据库实现不定列数据存储</h1><blockquote>\n<p>有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，<br>但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据</p>\n</blockquote>\n<blockquote>\n<p> 就对于这个需求呢，我在MySQL中设计了三张表， 表中重点字段为：</p>\n</blockquote>\n<blockquote>\n<p>只列举重要字段</p>\n</blockquote>\n<blockquote>\n<p>第一张表sample字段为：</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号 - 生成策略当前上传的日期然后另外加入4位数的自增从0001开始例如第一个202012090001）、sample_name（上传excel的名字）、excel_url（上传excel存储在服务器的地址）</code></pre>\n\n<blockquote>\n<p>第二张表sample_field字段 （存储列名）</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号）、field_name（字段名称）、field_type（STRING、INT、DATE）（字段类型）、is_primary（是否为主键）、field_index（字段排列顺序）</code></pre>\n\n<blockquote>\n<p>第三张表sample_data 字段（存储数据）：</p>\n</blockquote>\n<pre><code class=\"hljs sql\">sample_number（样本编号）、field_name（字段名称）、row_id（行id，用来区分哪些数据是属于同一行）、field_value（具体的列的值，因为字段已经表示了类型，\n所以存储的时候直接都存储字符串，根据需要的时候在去做转换）</code></pre>\n\n<h1 id=\"错误起源\"><a href=\"#错误起源\" class=\"headerlink\" title=\"错误起源\"></a>错误起源</h1><blockquote>\n<p>所以，有了上面三张表之后，那就需要查询数据了，在查询数据的过程中呢，因为需要分页和条件筛选，按照逻辑进行组织了SQL，出错了</p>\n</blockquote>\n<h3 id=\"错误提示\"><a href=\"#错误提示\" class=\"headerlink\" title=\"错误提示\"></a>错误提示</h3><pre><code class=\"hljs pgsql\">This <span class=\"hljs-keyword\">version</span> <span class=\"hljs-keyword\">of</span> MySQL doesn<span class=\"hljs-string\">&#x27;t yet support &#x27;</span><span class=\"hljs-keyword\">LIMIT</span> &amp; <span class=\"hljs-keyword\">IN</span>/<span class=\"hljs-keyword\">ALL</span>/<span class=\"hljs-keyword\">ANY</span>/<span class=\"hljs-keyword\">SOME</span> subquery<span class=\"hljs-string\">&#x27;</span></code></pre>\n\n<h3 id=\"在官网中找到了这个限制和解决方式\"><a href=\"#在官网中找到了这个限制和解决方式\" class=\"headerlink\" title=\"在官网中找到了这个限制和解决方式\"></a>在官网中找到了这个限制和解决方式</h3><p><a href=\"https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\">https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html</a></p>\n<h3 id=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"><a href=\"#解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\" class=\"headerlink\" title=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"></a>解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题</h3><pre><code class=\"hljs applescript\">MySQL permits a subquery <span class=\"hljs-keyword\">to</span> refer <span class=\"hljs-keyword\">to</span> a stored function <span class=\"hljs-keyword\">that</span> has data-modifying side effects such <span class=\"hljs-keyword\">as</span> inserting rows <span class=\"hljs-keyword\">into</span> a table. For example, <span class=\"hljs-keyword\">if</span> f() inserts rows, <span class=\"hljs-keyword\">the</span> following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior <span class=\"hljs-keyword\">is</span> an extension <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">the</span> SQL standard. In MySQL, <span class=\"hljs-keyword\">it</span> can produce nondeterministic results because f() might be executed a different <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">times</span> <span class=\"hljs-keyword\">for</span> different executions <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">given</span> query depending <span class=\"hljs-keyword\">on</span> how <span class=\"hljs-keyword\">the</span> optimizer chooses <span class=\"hljs-keyword\">to</span> handle <span class=\"hljs-keyword\">it</span>.\n\nFor statement-based <span class=\"hljs-keyword\">or</span> mixed-format replication, one implication <span class=\"hljs-keyword\">of</span> this indeterminism <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">that</span> such a query can produce different results <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">the</span> source <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">its</span> slaves.</code></pre>\n\n<h2 id=\"最终实现SQL\"><a href=\"#最终实现SQL\" class=\"headerlink\" title=\"最终实现SQL\"></a>最终实现SQL</h2><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span>\n\thsd.row_id,\n\thsd.sample_number,\n\thsd.field_name,\n\thsd.field_value \n<span class=\"hljs-keyword\">FROM</span>\n\thwcss_sample_data <span class=\"hljs-keyword\">AS</span> hsd \n<span class=\"hljs-keyword\">WHERE</span>\n\t<span class=\"hljs-keyword\">EXISTS</span> (\n\t<span class=\"hljs-keyword\">SELECT</span>\n\t\trow_id \n\t<span class=\"hljs-keyword\">FROM</span>\n\t\t( <span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data phsd <span class=\"hljs-keyword\">WHERE</span> del_flag = <span class=\"hljs-number\">0</span>\n\t\t\t \t<span class=\"hljs-keyword\">AND</span> <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data <span class=\"hljs-keyword\">WHERE</span> field_name = <span class=\"hljs-string\">&#x27;S_Serial&#x27;</span> <span class=\"hljs-keyword\">AND</span> field_value = <span class=\"hljs-string\">&#x27;1001&#x27;</span> <span class=\"hljs-keyword\">AND</span>  phsd.row_id = row_id ) \n\t\t\t\t<span class=\"hljs-keyword\">AND</span> <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> row_id <span class=\"hljs-keyword\">FROM</span> hwcss_sample_data <span class=\"hljs-keyword\">WHERE</span> field_name = <span class=\"hljs-string\">&#x27;ID&#x27;</span> <span class=\"hljs-keyword\">AND</span> field_value = <span class=\"hljs-string\">&#x27;B112527&#x27;</span> <span class=\"hljs-keyword\">AND</span>  phsd.row_id = row_id )\n\t\t\t\t<span class=\"hljs-comment\"># TODO 可以再加入筛选条件</span>\n\t\t\t<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> row_id <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">OFFSET</span> <span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">AS</span> ihsd \n\t<span class=\"hljs-keyword\">WHERE</span>\n\t\thsd.row_id = ihsd.row_id \n\t) \n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span>\n\thsd.row_id</code></pre>\n\n<h3 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h3><pre><code class=\"hljs dos\">在 row_id 和 field_name 上面做了索引优化，使用B+<span class=\"hljs-built_in\">TREE</span>索引，索引类型为 NORMAL</code></pre>\n\n<p>附录：</p>\n<blockquote>\n<p>MySQL单表数据限制：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html\">https://dev.mysql.com/doc/refman/8.0/en/table-size-limit.html</a></p>\n</blockquote>\n"},{"title":"MySQL不支持在IN和EXISTS里面加入LIMIT","date":"2020-12-08T16:00:00.000Z","index_img":"/images/mysql/index.png","banner_img":"/images/post_banner.jpeg","_content":"\n# MySQL不支持在IN和EXISTS里面加入LIMIT\n\n> 有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，\n但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据\n\n> 在子查询里面使用了LIMIT，因为需要分页\n\n### 在官网中找到了这个限制和解决方式\n\nhttps://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\n\n### 解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题 \n\n```\nMySQL permits a subquery to refer to a stored function that has data-modifying side effects such as inserting rows into a table. For example, if f() inserts rows, the following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior is an extension to the SQL standard. In MySQL, it can produce nondeterministic results because f() might be executed a different number of times for different executions of a given query depending on how the optimizer chooses to handle it.\n\nFor statement-based or mixed-format replication, one implication of this indeterminism is that such a query can produce different results on the source and its slaves.\n```","source":"_posts/mysql/mysql_inner_not_limit.md","raw":"---\ntitle: MySQL不支持在IN和EXISTS里面加入LIMIT\ndate: 2020-12-09\ntags: Java,MySQL,IN,EXISTS,SQL优化\nindex_img: /images/mysql/index.png # 缩略图\nbanner_img: /images/post_banner.jpeg # 文章banner图\ncategories: MySQL\n---\n\n# MySQL不支持在IN和EXISTS里面加入LIMIT\n\n> 有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，\n但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据\n\n> 在子查询里面使用了LIMIT，因为需要分页\n\n### 在官网中找到了这个限制和解决方式\n\nhttps://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\n\n### 解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题 \n\n```\nMySQL permits a subquery to refer to a stored function that has data-modifying side effects such as inserting rows into a table. For example, if f() inserts rows, the following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior is an extension to the SQL standard. In MySQL, it can produce nondeterministic results because f() might be executed a different number of times for different executions of a given query depending on how the optimizer chooses to handle it.\n\nFor statement-based or mixed-format replication, one implication of this indeterminism is that such a query can produce different results on the source and its slaves.\n```","slug":"mysql/mysql_inner_not_limit","published":1,"updated":"2022-02-19T17:33:55.339Z","_id":"ckztv25xe0001wiw1bfjs44pf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL不支持在IN和EXISTS里面加入LIMIT\"><a href=\"#MySQL不支持在IN和EXISTS里面加入LIMIT\" class=\"headerlink\" title=\"MySQL不支持在IN和EXISTS里面加入LIMIT\"></a>MySQL不支持在IN和EXISTS里面加入LIMIT</h1><blockquote>\n<p>有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，<br>但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据</p>\n</blockquote>\n<blockquote>\n<p>在子查询里面使用了LIMIT，因为需要分页</p>\n</blockquote>\n<h3 id=\"在官网中找到了这个限制和解决方式\"><a href=\"#在官网中找到了这个限制和解决方式\" class=\"headerlink\" title=\"在官网中找到了这个限制和解决方式\"></a>在官网中找到了这个限制和解决方式</h3><p><a href=\"https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\">https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html</a></p>\n<h3 id=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"><a href=\"#解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\" class=\"headerlink\" title=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"></a>解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题</h3><pre><code class=\"hljs applescript\">MySQL permits a subquery <span class=\"hljs-keyword\">to</span> refer <span class=\"hljs-keyword\">to</span> a stored function <span class=\"hljs-keyword\">that</span> has data-modifying side effects such <span class=\"hljs-keyword\">as</span> inserting rows <span class=\"hljs-keyword\">into</span> a table. For example, <span class=\"hljs-keyword\">if</span> f() inserts rows, <span class=\"hljs-keyword\">the</span> following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior <span class=\"hljs-keyword\">is</span> an extension <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">the</span> SQL standard. In MySQL, <span class=\"hljs-keyword\">it</span> can produce nondeterministic results because f() might be executed a different <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">times</span> <span class=\"hljs-keyword\">for</span> different executions <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">given</span> query depending <span class=\"hljs-keyword\">on</span> how <span class=\"hljs-keyword\">the</span> optimizer chooses <span class=\"hljs-keyword\">to</span> handle <span class=\"hljs-keyword\">it</span>.\n\nFor statement-based <span class=\"hljs-keyword\">or</span> mixed-format replication, one implication <span class=\"hljs-keyword\">of</span> this indeterminism <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">that</span> such a query can produce different results <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">the</span> source <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">its</span> slaves.</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL不支持在IN和EXISTS里面加入LIMIT\"><a href=\"#MySQL不支持在IN和EXISTS里面加入LIMIT\" class=\"headerlink\" title=\"MySQL不支持在IN和EXISTS里面加入LIMIT\"></a>MySQL不支持在IN和EXISTS里面加入LIMIT</h1><blockquote>\n<p>有一需求是需要上传一个excel之后进行查看，但是Excel的列是不固定的，还可以进行反复上传，<br>但是Excel中有一列是必须要有的那就是ID列，这个列可以用来判断第二次上传是更新还是有新加入的数据</p>\n</blockquote>\n<blockquote>\n<p>在子查询里面使用了LIMIT，因为需要分页</p>\n</blockquote>\n<h3 id=\"在官网中找到了这个限制和解决方式\"><a href=\"#在官网中找到了这个限制和解决方式\" class=\"headerlink\" title=\"在官网中找到了这个限制和解决方式\"></a>在官网中找到了这个限制和解决方式</h3><p><a href=\"https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html\">https://dev.mysql.com/doc/mysql-reslimits-excerpt/8.0/en/subquery-restrictions.html</a></p>\n<h3 id=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"><a href=\"#解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\" class=\"headerlink\" title=\"解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题\"></a>解决方案：在子查询里面在加入一个孙子查询，把LIMIT进行实现了，就可以规避这个问题</h3><pre><code class=\"hljs applescript\">MySQL permits a subquery <span class=\"hljs-keyword\">to</span> refer <span class=\"hljs-keyword\">to</span> a stored function <span class=\"hljs-keyword\">that</span> has data-modifying side effects such <span class=\"hljs-keyword\">as</span> inserting rows <span class=\"hljs-keyword\">into</span> a table. For example, <span class=\"hljs-keyword\">if</span> f() inserts rows, <span class=\"hljs-keyword\">the</span> following query can modify data:\n\nSELECT ... WHERE x IN (SELECT f() ...);\nThis behavior <span class=\"hljs-keyword\">is</span> an extension <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">the</span> SQL standard. In MySQL, <span class=\"hljs-keyword\">it</span> can produce nondeterministic results because f() might be executed a different <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">times</span> <span class=\"hljs-keyword\">for</span> different executions <span class=\"hljs-keyword\">of</span> a <span class=\"hljs-keyword\">given</span> query depending <span class=\"hljs-keyword\">on</span> how <span class=\"hljs-keyword\">the</span> optimizer chooses <span class=\"hljs-keyword\">to</span> handle <span class=\"hljs-keyword\">it</span>.\n\nFor statement-based <span class=\"hljs-keyword\">or</span> mixed-format replication, one implication <span class=\"hljs-keyword\">of</span> this indeterminism <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">that</span> such a query can produce different results <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">the</span> source <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">its</span> slaves.</code></pre>"},{"title":"Maven 打包Java应用的时候动态传输打包后jar包的名称","date":"2020-10-28T16:00:00.000Z","_content":"\n# Maven 打包Java应用的时候动态传输打包后jar包的名称\n\n## 设置最终名称\n\n```xml\n<build>\n    <finalName>share-cloud-1.0.0</finalName>\n    ...\n</build>\n```\n\n打包之后的名称就是share-cloud-1.0.0.jar\n\n> 但是我不想每次需要修改pom文件的版本，改为自动传入可不可以，直接执行命令\n\n## 那我们可以写一个sh命令，来传入参数执行\n\n> 直接传入参数到finalName中是不行的，需要中转一下\n\n### 第一步：设置打包的时候可以传入的参数 -D\n\n-D是把参数放入properties\n\n```xml\n<properties>\n    <share.cloud.version>1.0.0</share.cloud.version>\n</properties>\n```\n\n然后设置finalName获取整个version\n\n```xml\n<build>\n    <finalName>share-cloud-${share.cloud.version}</finalName>\n    ...\n</build>\n```\n\n然后打包的时候就可以直接传入\n\n```\nmvn clean compile package -Pdev -Dshare.cloud.version=$1\n```\n\n> -P 是设置profile的环境的","source":"_posts/maven/maven-auto-package.md","raw":"---\ntitle: Maven 打包Java应用的时候动态传输打包后jar包的名称\ndate: 2020-10-29\ntags: Java,devops,auto,package,Maven,Linux\n---\n\n# Maven 打包Java应用的时候动态传输打包后jar包的名称\n\n## 设置最终名称\n\n```xml\n<build>\n    <finalName>share-cloud-1.0.0</finalName>\n    ...\n</build>\n```\n\n打包之后的名称就是share-cloud-1.0.0.jar\n\n> 但是我不想每次需要修改pom文件的版本，改为自动传入可不可以，直接执行命令\n\n## 那我们可以写一个sh命令，来传入参数执行\n\n> 直接传入参数到finalName中是不行的，需要中转一下\n\n### 第一步：设置打包的时候可以传入的参数 -D\n\n-D是把参数放入properties\n\n```xml\n<properties>\n    <share.cloud.version>1.0.0</share.cloud.version>\n</properties>\n```\n\n然后设置finalName获取整个version\n\n```xml\n<build>\n    <finalName>share-cloud-${share.cloud.version}</finalName>\n    ...\n</build>\n```\n\n然后打包的时候就可以直接传入\n\n```\nmvn clean compile package -Pdev -Dshare.cloud.version=$1\n```\n\n> -P 是设置profile的环境的","slug":"maven/maven-auto-package","published":1,"updated":"2022-02-19T12:57:57.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckztv25xj0003wiw16p7pdzbc","content":"<h1 id=\"Maven-打包Java应用的时候动态传输打包后jar包的名称\"><a href=\"#Maven-打包Java应用的时候动态传输打包后jar包的名称\" class=\"headerlink\" title=\"Maven 打包Java应用的时候动态传输打包后jar包的名称\"></a>Maven 打包Java应用的时候动态传输打包后jar包的名称</h1><h2 id=\"设置最终名称\"><a href=\"#设置最终名称\" class=\"headerlink\" title=\"设置最终名称\"></a>设置最终名称</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">finalName</span>&gt;</span>share-cloud-1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">finalName</span>&gt;</span>\n    ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n\n<p>打包之后的名称就是share-cloud-1.0.0.jar</p>\n<blockquote>\n<p>但是我不想每次需要修改pom文件的版本，改为自动传入可不可以，直接执行命令</p>\n</blockquote>\n<h2 id=\"那我们可以写一个sh命令，来传入参数执行\"><a href=\"#那我们可以写一个sh命令，来传入参数执行\" class=\"headerlink\" title=\"那我们可以写一个sh命令，来传入参数执行\"></a>那我们可以写一个sh命令，来传入参数执行</h2><blockquote>\n<p>直接传入参数到finalName中是不行的，需要中转一下</p>\n</blockquote>\n<h3 id=\"第一步：设置打包的时候可以传入的参数-D\"><a href=\"#第一步：设置打包的时候可以传入的参数-D\" class=\"headerlink\" title=\"第一步：设置打包的时候可以传入的参数 -D\"></a>第一步：设置打包的时候可以传入的参数 -D</h3><p>-D是把参数放入properties</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">share.cloud.version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">share.cloud.version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></code></pre>\n\n<p>然后设置finalName获取整个version</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">finalName</span>&gt;</span>share-cloud-$&#123;share.cloud.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">finalName</span>&gt;</span>\n    ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n\n<p>然后打包的时候就可以直接传入</p>\n<pre><code class=\"hljs ada\">mvn clean compile <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">-Pdev -Dshare.cloud.version=$1</span></code></pre>\n\n<blockquote>\n<p>-P 是设置profile的环境的</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Maven-打包Java应用的时候动态传输打包后jar包的名称\"><a href=\"#Maven-打包Java应用的时候动态传输打包后jar包的名称\" class=\"headerlink\" title=\"Maven 打包Java应用的时候动态传输打包后jar包的名称\"></a>Maven 打包Java应用的时候动态传输打包后jar包的名称</h1><h2 id=\"设置最终名称\"><a href=\"#设置最终名称\" class=\"headerlink\" title=\"设置最终名称\"></a>设置最终名称</h2><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">finalName</span>&gt;</span>share-cloud-1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">finalName</span>&gt;</span>\n    ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n\n<p>打包之后的名称就是share-cloud-1.0.0.jar</p>\n<blockquote>\n<p>但是我不想每次需要修改pom文件的版本，改为自动传入可不可以，直接执行命令</p>\n</blockquote>\n<h2 id=\"那我们可以写一个sh命令，来传入参数执行\"><a href=\"#那我们可以写一个sh命令，来传入参数执行\" class=\"headerlink\" title=\"那我们可以写一个sh命令，来传入参数执行\"></a>那我们可以写一个sh命令，来传入参数执行</h2><blockquote>\n<p>直接传入参数到finalName中是不行的，需要中转一下</p>\n</blockquote>\n<h3 id=\"第一步：设置打包的时候可以传入的参数-D\"><a href=\"#第一步：设置打包的时候可以传入的参数-D\" class=\"headerlink\" title=\"第一步：设置打包的时候可以传入的参数 -D\"></a>第一步：设置打包的时候可以传入的参数 -D</h3><p>-D是把参数放入properties</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">share.cloud.version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">share.cloud.version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></code></pre>\n\n<p>然后设置finalName获取整个version</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">finalName</span>&gt;</span>share-cloud-$&#123;share.cloud.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">finalName</span>&gt;</span>\n    ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></code></pre>\n\n<p>然后打包的时候就可以直接传入</p>\n<pre><code class=\"hljs ada\">mvn clean compile <span class=\"hljs-keyword\">package</span> <span class=\"hljs-title\">-Pdev -Dshare.cloud.version=$1</span></code></pre>\n\n<blockquote>\n<p>-P 是设置profile的环境的</p>\n</blockquote>\n"},{"title":"ThreadPoolExecutor 参数设置 [转载]","date":"2020-10-19T16:00:00.000Z","_content":"\n一、ThreadPoolExecutor的重要参数\n\n    1、corePoolSize：核心线程数\n        * 核心线程会一直存活，及时没有任务需要执行\n        * 当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理\n        * 设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭\n\n    2、queueCapacity：任务队列容量（阻塞队列）\n        * 当核心线程数达到最大时，新任务会放在队列中排队等待执行\n\n    3、maxPoolSize：最大线程数\n        * 当线程数>=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务\n        * 当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常\n\n    4、 keepAliveTime：线程空闲时间\n        * 当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize\n        * 如果allowCoreThreadTimeout=true，则会直到线程数量=0\n\n    5、allowCoreThreadTimeout：允许核心线程超时\n    6、rejectedExecutionHandler：任务拒绝处理器\n        * 两种情况会拒绝处理任务：\n            - 当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务\n            - 当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务\n        * 线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常\n        * ThreadPoolExecutor类有几个内部实现类来处理这类情况：\n            - AbortPolicy 丢弃任务，抛运行时异常\n            - CallerRunsPolicy 执行任务\n            - DiscardPolicy 忽视，什么都不会发生\n            - DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务\n        * 实现RejectedExecutionHandler接口，可自定义处理器\n二、ThreadPoolExecutor执行顺序\n\n        线程池按以下行为执行任务\n    1. 当线程数小于核心线程数时，创建线程。\n    2. 当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。\n    3. 当线程数大于等于核心线程数，且任务队列已满\n        - 若线程数小于最大线程数，创建线程\n        - 若线程数等于最大线程数，抛出异常，拒绝任务\n三、如何设置参数\n\n    1、默认值\n        * corePoolSize=1\n        * queueCapacity=Integer.MAX_VALUE\n        * maxPoolSize=Integer.MAX_VALUE\n        * keepAliveTime=60s\n        * allowCoreThreadTimeout=false\n        * rejectedExecutionHandler=AbortPolicy()\n\n    2、如何来设置\n        * 需要根据几个值来决定\n            - tasks ：每秒的任务数，假设为500~1000\n            - taskcost：每个任务花费时间，假设为0.1s\n            - responsetime：系统允许容忍的最大响应时间，假设为1s\n        * 做几个计算\n            - corePoolSize = 每秒需要多少个线程处理？ \n                * threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500~1000)*0.1 = 50~100 个线程。corePoolSize设置应该大于50\n                * 根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可\n            - queueCapacity = (coreSizePool/taskcost)*responsetime\n                * 计算可得 queueCapacity = 80/0.1*1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行\n                * 切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。\n            - maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)\n                * 计算可得 maxPoolSize = (1000-80)/10 = 92\n                * （最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数\n            - rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理\n            - keepAliveTime和allowCoreThreadTimeout采用默认通常能满足\n\n    3、 以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。","source":"_posts/java/thread/thread_pool_settings.md","raw":"---\ntitle: ThreadPoolExecutor 参数设置 [转载]\ndate: 2020-10-20\ntags: ThreadPoolExecutor, Java,ThreadPool,线程池,高并发\ncategories: Java Base\n---\n\n一、ThreadPoolExecutor的重要参数\n\n    1、corePoolSize：核心线程数\n        * 核心线程会一直存活，及时没有任务需要执行\n        * 当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理\n        * 设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭\n\n    2、queueCapacity：任务队列容量（阻塞队列）\n        * 当核心线程数达到最大时，新任务会放在队列中排队等待执行\n\n    3、maxPoolSize：最大线程数\n        * 当线程数>=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务\n        * 当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常\n\n    4、 keepAliveTime：线程空闲时间\n        * 当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize\n        * 如果allowCoreThreadTimeout=true，则会直到线程数量=0\n\n    5、allowCoreThreadTimeout：允许核心线程超时\n    6、rejectedExecutionHandler：任务拒绝处理器\n        * 两种情况会拒绝处理任务：\n            - 当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务\n            - 当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务\n        * 线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常\n        * ThreadPoolExecutor类有几个内部实现类来处理这类情况：\n            - AbortPolicy 丢弃任务，抛运行时异常\n            - CallerRunsPolicy 执行任务\n            - DiscardPolicy 忽视，什么都不会发生\n            - DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务\n        * 实现RejectedExecutionHandler接口，可自定义处理器\n二、ThreadPoolExecutor执行顺序\n\n        线程池按以下行为执行任务\n    1. 当线程数小于核心线程数时，创建线程。\n    2. 当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。\n    3. 当线程数大于等于核心线程数，且任务队列已满\n        - 若线程数小于最大线程数，创建线程\n        - 若线程数等于最大线程数，抛出异常，拒绝任务\n三、如何设置参数\n\n    1、默认值\n        * corePoolSize=1\n        * queueCapacity=Integer.MAX_VALUE\n        * maxPoolSize=Integer.MAX_VALUE\n        * keepAliveTime=60s\n        * allowCoreThreadTimeout=false\n        * rejectedExecutionHandler=AbortPolicy()\n\n    2、如何来设置\n        * 需要根据几个值来决定\n            - tasks ：每秒的任务数，假设为500~1000\n            - taskcost：每个任务花费时间，假设为0.1s\n            - responsetime：系统允许容忍的最大响应时间，假设为1s\n        * 做几个计算\n            - corePoolSize = 每秒需要多少个线程处理？ \n                * threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500~1000)*0.1 = 50~100 个线程。corePoolSize设置应该大于50\n                * 根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可\n            - queueCapacity = (coreSizePool/taskcost)*responsetime\n                * 计算可得 queueCapacity = 80/0.1*1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行\n                * 切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。\n            - maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)\n                * 计算可得 maxPoolSize = (1000-80)/10 = 92\n                * （最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数\n            - rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理\n            - keepAliveTime和allowCoreThreadTimeout采用默认通常能满足\n\n    3、 以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。","slug":"java/thread/thread_pool_settings","published":1,"updated":"2022-02-19T17:19:22.269Z","_id":"ckztv25xl0004wiw1ffb742eb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、ThreadPoolExecutor的重要参数</p>\n<pre><code>1、corePoolSize：核心线程数\n    * 核心线程会一直存活，及时没有任务需要执行\n    * 当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理\n    * 设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭\n\n2、queueCapacity：任务队列容量（阻塞队列）\n    * 当核心线程数达到最大时，新任务会放在队列中排队等待执行\n\n3、maxPoolSize：最大线程数\n    * 当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务\n    * 当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常\n\n4、 keepAliveTime：线程空闲时间\n    * 当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize\n    * 如果allowCoreThreadTimeout=true，则会直到线程数量=0\n\n5、allowCoreThreadTimeout：允许核心线程超时\n6、rejectedExecutionHandler：任务拒绝处理器\n    * 两种情况会拒绝处理任务：\n        - 当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务\n        - 当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务\n    * 线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常\n    * ThreadPoolExecutor类有几个内部实现类来处理这类情况：\n        - AbortPolicy 丢弃任务，抛运行时异常\n        - CallerRunsPolicy 执行任务\n        - DiscardPolicy 忽视，什么都不会发生\n        - DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务\n    * 实现RejectedExecutionHandler接口，可自定义处理器</code></pre>\n<p>二、ThreadPoolExecutor执行顺序</p>\n<pre><code>    线程池按以下行为执行任务\n1. 当线程数小于核心线程数时，创建线程。\n2. 当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。\n3. 当线程数大于等于核心线程数，且任务队列已满\n    - 若线程数小于最大线程数，创建线程\n    - 若线程数等于最大线程数，抛出异常，拒绝任务</code></pre>\n<p>三、如何设置参数</p>\n<pre><code>1、默认值\n    * corePoolSize=1\n    * queueCapacity=Integer.MAX_VALUE\n    * maxPoolSize=Integer.MAX_VALUE\n    * keepAliveTime=60s\n    * allowCoreThreadTimeout=false\n    * rejectedExecutionHandler=AbortPolicy()\n\n2、如何来设置\n    * 需要根据几个值来决定\n        - tasks ：每秒的任务数，假设为500~1000\n        - taskcost：每个任务花费时间，假设为0.1s\n        - responsetime：系统允许容忍的最大响应时间，假设为1s\n    * 做几个计算\n        - corePoolSize = 每秒需要多少个线程处理？ \n            * threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500~1000)*0.1 = 50~100 个线程。corePoolSize设置应该大于50\n            * 根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可\n        - queueCapacity = (coreSizePool/taskcost)*responsetime\n            * 计算可得 queueCapacity = 80/0.1*1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行\n            * 切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。\n        - maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)\n            * 计算可得 maxPoolSize = (1000-80)/10 = 92\n            * （最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数\n        - rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理\n        - keepAliveTime和allowCoreThreadTimeout采用默认通常能满足\n\n3、 以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>一、ThreadPoolExecutor的重要参数</p>\n<pre><code>1、corePoolSize：核心线程数\n    * 核心线程会一直存活，及时没有任务需要执行\n    * 当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理\n    * 设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭\n\n2、queueCapacity：任务队列容量（阻塞队列）\n    * 当核心线程数达到最大时，新任务会放在队列中排队等待执行\n\n3、maxPoolSize：最大线程数\n    * 当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务\n    * 当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常\n\n4、 keepAliveTime：线程空闲时间\n    * 当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize\n    * 如果allowCoreThreadTimeout=true，则会直到线程数量=0\n\n5、allowCoreThreadTimeout：允许核心线程超时\n6、rejectedExecutionHandler：任务拒绝处理器\n    * 两种情况会拒绝处理任务：\n        - 当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务\n        - 当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务\n    * 线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常\n    * ThreadPoolExecutor类有几个内部实现类来处理这类情况：\n        - AbortPolicy 丢弃任务，抛运行时异常\n        - CallerRunsPolicy 执行任务\n        - DiscardPolicy 忽视，什么都不会发生\n        - DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务\n    * 实现RejectedExecutionHandler接口，可自定义处理器</code></pre>\n<p>二、ThreadPoolExecutor执行顺序</p>\n<pre><code>    线程池按以下行为执行任务\n1. 当线程数小于核心线程数时，创建线程。\n2. 当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。\n3. 当线程数大于等于核心线程数，且任务队列已满\n    - 若线程数小于最大线程数，创建线程\n    - 若线程数等于最大线程数，抛出异常，拒绝任务</code></pre>\n<p>三、如何设置参数</p>\n<pre><code>1、默认值\n    * corePoolSize=1\n    * queueCapacity=Integer.MAX_VALUE\n    * maxPoolSize=Integer.MAX_VALUE\n    * keepAliveTime=60s\n    * allowCoreThreadTimeout=false\n    * rejectedExecutionHandler=AbortPolicy()\n\n2、如何来设置\n    * 需要根据几个值来决定\n        - tasks ：每秒的任务数，假设为500~1000\n        - taskcost：每个任务花费时间，假设为0.1s\n        - responsetime：系统允许容忍的最大响应时间，假设为1s\n    * 做几个计算\n        - corePoolSize = 每秒需要多少个线程处理？ \n            * threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500~1000)*0.1 = 50~100 个线程。corePoolSize设置应该大于50\n            * 根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可\n        - queueCapacity = (coreSizePool/taskcost)*responsetime\n            * 计算可得 queueCapacity = 80/0.1*1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行\n            * 切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。\n        - maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)\n            * 计算可得 maxPoolSize = (1000-80)/10 = 92\n            * （最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数\n        - rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理\n        - keepAliveTime和allowCoreThreadTimeout采用默认通常能满足\n\n3、 以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。</code></pre>\n"},{"title":"MySQL分区可行性调研","date":"2021-11-16T16:00:00.000Z","index_img":"/images/mysql/index.png","banner_img":"/images/post_banner.jpeg","_content":"\n# MySQL分区可行性调研\n\n## 一、什么是分区\n### 1、MySQL存储原理\n\nMySQL是支持ACID事务的，其中一个D就是持久化，持久化就代表了：插入MySQL的数据最终还是要落到磁盘中，这样才能做到真正的持久化。\n\nMySQL存储文件在磁盘中，每一个数据库里面有很多存储文件：\n\n针对InnoDB引擎来说\n\n数据库配置信息文件（.opt）\n\n表元数据文件（.frm）、表数据文件（ibd）；\n\n#### .opt文件\n\n包含数据库配置信息的文件。\n\n#### .frm 文件\n\n包含元数据的文件，例如 MySQL 表的表定义。\n\n对于备份，您必须始终将完整的.frm文件集与备份数据一起保留 ，以便能够恢复备份后更改或删除的表。\n\n尽管每个InnoDB表都有一个 .frm文件，InnoDB 但在系统表空间中维护自己的表元数据 。\n\n#### .ibd文件\n\n保存了数据库的数据信息和关联索引信息。\n\nfile-per-table 表空间和通用表空间 的数据文件 。File-per-table 表空间 .ibd文件包含单个表和关联的索引数据。通用表空间 .ibd文件可能包含多个表的表和索引数据。MySQL 5.7.6 中引入了通用表空间。\n\n该.ibd文件的扩展名不适用于 系统表空间，它由一个或多个ibdata文件。\n如果使用该DATA DIRECTORY =子句创建 file-per-table 表空间或通用表空间，则该 .ibd文件位于指定路径，在正常数据目录之外，并由.isl 文件指向 。\n​\n\n![](/images/mysql/partition/index.png)\n\n\n### 2、MySQL分区原理\n\n官方详细文档：https://dev.mysql.com/doc/refman/5.7/en/partitioning.html\n从 MySQL 5.7.17 开始，MySQL 服务器中的通用分区处理程序已弃用，并在 MySQL 8.0 中删除，因为用于给定表的存储引擎预计会提供自己的（“本机”）分区处理程序。目前，只有InnoDB和 NDB存储引擎可以做到这一点。\n\n要准备迁移到 MySQL 8.0，任何具有非本机分区的表都应更改为使用提供本机分区的引擎，或者设为非分区。例如，要将表更改为InnoDB，请执行以下语句：\n\n```sql\nALTER TABLE table_name ENGINE = INNODB;\n```\n设置分区之后会在磁盘中产生用#分隔开的独立的分区文件\n\n还有独立一个文件为pre的分区信息表，类似磁盘分区的一个mbr分区文件\n\n分区键的数据类型。 分区键必须是整数列或解析为整数的表达式。ENUM不能使用使用列的表达式 。列或表达式值也可能是NULL. \n\n最大分区数。  不使用NDB存储引擎的给定表的最大可能分区数是 8192。这个数字包括子分区。\n\n#### 2.1、分区类型\n\n##### 2.1.1、 范围划分\n\n分段划分： 1-10  11-20 数据落在哪个区间，则在哪个分区中。 （是一组连续的区间）\n分区值为固定值\n​\n\n![](/images/mysql/partition/range.png)\n\n##### 2.1.2、 LIST 分区\n\n类似于分区 by RANGE，不同之处在于分区是根据几个离散的值，例如 5 、6 、8 、9是一个分区\n分区值为固定值\n​\n\n![](/images/mysql/partition/list.png)\n\n#### 2.1.4、列分区\n所有整数类型：TINYINT、 SMALLINT、 MEDIUMINT、 INT ( INTEGER) 和 BIGINT。\nDATE和 DATETIME。\n\n下面的字符串类型： CHAR， VARCHAR， BINARY，和 VARBINARY。\n\n分区值设置为列名，根据选择列对应的数据进行分区，例如时间分区\n\n##### 2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\n\n① 不接受表达式，只接受列名。\n\n② 接受一列或多列的列表。\n\n③ 分区基于 元组（列值列表）之间的比较，而不是标量值之间的比较。\n\n⑤ 分区列不限于整数列；字符串， DATE并且 DATETIME列也可以作为分区列。\n\n```sql\nCREATE TABLE table_namePARTITION BY RANGE COLUMNS(column_list) (    PARTITION partition_name VALUES LESS THAN (value_list)[,    PARTITION partition_name VALUES LESS THAN (value_list)][,    ...])\n```\n\n##### 2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\n\n```sql\nCREATE TABLE customers_1 (    first_name VARCHAR(25),    last_name VARCHAR(25),    street_1 VARCHAR(30),    street_2 VARCHAR(30),    city VARCHAR(15),    renewal DATE)PARTITION BY LIST COLUMNS(city) (    PARTITION pRegion_1 VALUES IN('Oskarshamn', 'Högsby', 'Mönsterås'),    PARTITION pRegion_2 VALUES IN('Vimmerby', 'Hultsfred', 'Västervik'),    PARTITION pRegion_3 VALUES IN('Nässjö', 'Eksjö', 'Vetlanda'),    PARTITION pRegion_4 VALUES IN('Uppvidinge', 'Alvesta', 'Växjo'));\n```\n\n##### 2.1.5、 HASH 分区\n\n 使用这种类型的分区，根据用户定义的表达式返回的值选择分区，该表达式对要插入表的行中的列值进行操作。该函数可以由任何在 MySQL 中有效的表达式组成，该表达式产生一个非负整数值。LINEAR HASH也可以使用此类型的扩展名。\n​\n\n![](/images/mysql/partition/hash.png)\n\n##### 2.1.6、 KEY分区\n\n这种类型的分区类似于分区 by HASH，只是只提供了一个或多个要评估的列，并且 MySQL 服务器提供了自己的散列函数。这些列可以包含非整数值，因为 MySQL 提供的散列函数保证整数结果，而不管列数据类型如何。LINEAR KEY也可以使用此类型的扩展名 。\n​\n\n![](/images/mysql/partition/key.png)\n\n\n数据库分区的一个非常常见的用途是按日期分隔数据。一些数据库系统支持显式日期分区，MySQL 在 5.7 中没有实现。但是，在 MySQL 中创建基于DATE、 TIME、 或 DATETIME列或基于使用这些列的表达式的分区方案并不困难 。\n\n按KEY或分区时LINEAR KEY，可以使用DATE、 TIME、 或 DATETIME列作为分区列，而无需对列值进行任何修改。\n\n##### 2.1.7、 子分区\n\n类似嵌套分区，每一个分区下面再加一个分区\n​\n\n![](/images/mysql/partition/child.png)\n\n#### 2.7 MySQL 分区如何处理 NULL\n\nNULL会被认为比任何值都小的分区里面放置\n\n具体详细使用方式为：https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html\n\n## 二、分区与分表的区别\n\n分表：分表是从物理上分开，一张表分为多张表\n\n分区：分区是从逻辑上分开，一张表还是一张表，只是里面按照固定字段或者设定值来进行分不同的存储区\n\n## 三、分区的优点\n\n1、分区之后，查询只查询单个区，或者几个区，查询数据量总体减少，提高查询性能\n\n2、分区在逻辑上进行拆分表数据，实际上还是同一张表\n\n3、分区可以设置多个磁盘进行分区存储，比单个磁盘分区容量更大\n\n4、插入数据不需要手动的去处理插入哪个表的问题，增删改不需要修改\n\n5、不需要引入第三方中间件，有效降低开发难度\n\n> 官方给出优点：\n\n分区使得在一个表中存储的数据比单个磁盘或文件系统分区上存储的数据更多成为可能。\n通过删除仅包含该数据的分区（或多个分区），通常可以轻松地从分区表中删除失去其用处的数据。相反，在某些情况下，通过添加一个或多个新分区来专门存储该数据，可以极大地促进添加新数据的过程。\n\n某些查询可以极大地优化，因为满足给定WHERE子句的数据只能存储在一个或多个分区上，这会自动从搜索中排除任何剩余的分区。由于在创建分区表后可以更改分区，因此您可以重新组织数据以增强在首次设置分区方案时可能不经常使用的频繁查询。这种排除不匹配分区（以及它们包含的任何行）的能力通常称为 分区修剪。\n\n出处：https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html\n\n## 四、分区的缺点\n\n1、表可访问性。 有时，服务器 SQL 模式的更改可能会使分区表无法使用。\n\n2、分区可能在MySQL版本上会有所差异，该问题不可控。\n\n3、存储引擎。 使用表进行分区操作、查询和更新操作通常MyISAM 比使用InnoDB或 NDB表更快。（对于有事务的表不太适合分区）\n\n4、全文索引。 分区表不支持FULLTEXT 索引或搜索，即使是使用InnoDB或 MyISAM存储引擎的分区表 。\n\n5、临时表。 临时表不能分区。\n\n6、InnoDB外键和 MySQL 分区不兼容。分区 InnoDB表不能有外键引用，也不能有外键引用的列。InnoDB具有或被外键引用的表不能被分区。InnoDB不支持将多个磁盘用于子分区。（目前仅支持此功能 MyISAM。）\n\n      6.1、InnoDB使用用户定义分区 的表的定义不得包含外键引用；不能InnoDB对定义包含外键引用的表进行分区。\n\n     6.2、任何InnoDB表定义都不能包含对用户分区表的外键引用；任何 InnoDB具有用户定义分区的表都不能包含由外键引用的列。\n\n7、不支持查询缓存。 分区表不支持查询缓存，并且对于涉及分区表的查询会自动禁用。无法为此类查询启用查询缓存。\n","source":"_posts/mysql/mysql_partition_research.md","raw":"---\ntitle: MySQL分区可行性调研\ndate: 2021-11-17\ntags: Java,MySQL,Partition\nindex_img: /images/mysql/index.png # 缩略图\nbanner_img: /images/post_banner.jpeg # 文章banner图\ncategories: MySQL\n---\n\n# MySQL分区可行性调研\n\n## 一、什么是分区\n### 1、MySQL存储原理\n\nMySQL是支持ACID事务的，其中一个D就是持久化，持久化就代表了：插入MySQL的数据最终还是要落到磁盘中，这样才能做到真正的持久化。\n\nMySQL存储文件在磁盘中，每一个数据库里面有很多存储文件：\n\n针对InnoDB引擎来说\n\n数据库配置信息文件（.opt）\n\n表元数据文件（.frm）、表数据文件（ibd）；\n\n#### .opt文件\n\n包含数据库配置信息的文件。\n\n#### .frm 文件\n\n包含元数据的文件，例如 MySQL 表的表定义。\n\n对于备份，您必须始终将完整的.frm文件集与备份数据一起保留 ，以便能够恢复备份后更改或删除的表。\n\n尽管每个InnoDB表都有一个 .frm文件，InnoDB 但在系统表空间中维护自己的表元数据 。\n\n#### .ibd文件\n\n保存了数据库的数据信息和关联索引信息。\n\nfile-per-table 表空间和通用表空间 的数据文件 。File-per-table 表空间 .ibd文件包含单个表和关联的索引数据。通用表空间 .ibd文件可能包含多个表的表和索引数据。MySQL 5.7.6 中引入了通用表空间。\n\n该.ibd文件的扩展名不适用于 系统表空间，它由一个或多个ibdata文件。\n如果使用该DATA DIRECTORY =子句创建 file-per-table 表空间或通用表空间，则该 .ibd文件位于指定路径，在正常数据目录之外，并由.isl 文件指向 。\n​\n\n![](/images/mysql/partition/index.png)\n\n\n### 2、MySQL分区原理\n\n官方详细文档：https://dev.mysql.com/doc/refman/5.7/en/partitioning.html\n从 MySQL 5.7.17 开始，MySQL 服务器中的通用分区处理程序已弃用，并在 MySQL 8.0 中删除，因为用于给定表的存储引擎预计会提供自己的（“本机”）分区处理程序。目前，只有InnoDB和 NDB存储引擎可以做到这一点。\n\n要准备迁移到 MySQL 8.0，任何具有非本机分区的表都应更改为使用提供本机分区的引擎，或者设为非分区。例如，要将表更改为InnoDB，请执行以下语句：\n\n```sql\nALTER TABLE table_name ENGINE = INNODB;\n```\n设置分区之后会在磁盘中产生用#分隔开的独立的分区文件\n\n还有独立一个文件为pre的分区信息表，类似磁盘分区的一个mbr分区文件\n\n分区键的数据类型。 分区键必须是整数列或解析为整数的表达式。ENUM不能使用使用列的表达式 。列或表达式值也可能是NULL. \n\n最大分区数。  不使用NDB存储引擎的给定表的最大可能分区数是 8192。这个数字包括子分区。\n\n#### 2.1、分区类型\n\n##### 2.1.1、 范围划分\n\n分段划分： 1-10  11-20 数据落在哪个区间，则在哪个分区中。 （是一组连续的区间）\n分区值为固定值\n​\n\n![](/images/mysql/partition/range.png)\n\n##### 2.1.2、 LIST 分区\n\n类似于分区 by RANGE，不同之处在于分区是根据几个离散的值，例如 5 、6 、8 、9是一个分区\n分区值为固定值\n​\n\n![](/images/mysql/partition/list.png)\n\n#### 2.1.4、列分区\n所有整数类型：TINYINT、 SMALLINT、 MEDIUMINT、 INT ( INTEGER) 和 BIGINT。\nDATE和 DATETIME。\n\n下面的字符串类型： CHAR， VARCHAR， BINARY，和 VARBINARY。\n\n分区值设置为列名，根据选择列对应的数据进行分区，例如时间分区\n\n##### 2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\n\n① 不接受表达式，只接受列名。\n\n② 接受一列或多列的列表。\n\n③ 分区基于 元组（列值列表）之间的比较，而不是标量值之间的比较。\n\n⑤ 分区列不限于整数列；字符串， DATE并且 DATETIME列也可以作为分区列。\n\n```sql\nCREATE TABLE table_namePARTITION BY RANGE COLUMNS(column_list) (    PARTITION partition_name VALUES LESS THAN (value_list)[,    PARTITION partition_name VALUES LESS THAN (value_list)][,    ...])\n```\n\n##### 2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\n\n```sql\nCREATE TABLE customers_1 (    first_name VARCHAR(25),    last_name VARCHAR(25),    street_1 VARCHAR(30),    street_2 VARCHAR(30),    city VARCHAR(15),    renewal DATE)PARTITION BY LIST COLUMNS(city) (    PARTITION pRegion_1 VALUES IN('Oskarshamn', 'Högsby', 'Mönsterås'),    PARTITION pRegion_2 VALUES IN('Vimmerby', 'Hultsfred', 'Västervik'),    PARTITION pRegion_3 VALUES IN('Nässjö', 'Eksjö', 'Vetlanda'),    PARTITION pRegion_4 VALUES IN('Uppvidinge', 'Alvesta', 'Växjo'));\n```\n\n##### 2.1.5、 HASH 分区\n\n 使用这种类型的分区，根据用户定义的表达式返回的值选择分区，该表达式对要插入表的行中的列值进行操作。该函数可以由任何在 MySQL 中有效的表达式组成，该表达式产生一个非负整数值。LINEAR HASH也可以使用此类型的扩展名。\n​\n\n![](/images/mysql/partition/hash.png)\n\n##### 2.1.6、 KEY分区\n\n这种类型的分区类似于分区 by HASH，只是只提供了一个或多个要评估的列，并且 MySQL 服务器提供了自己的散列函数。这些列可以包含非整数值，因为 MySQL 提供的散列函数保证整数结果，而不管列数据类型如何。LINEAR KEY也可以使用此类型的扩展名 。\n​\n\n![](/images/mysql/partition/key.png)\n\n\n数据库分区的一个非常常见的用途是按日期分隔数据。一些数据库系统支持显式日期分区，MySQL 在 5.7 中没有实现。但是，在 MySQL 中创建基于DATE、 TIME、 或 DATETIME列或基于使用这些列的表达式的分区方案并不困难 。\n\n按KEY或分区时LINEAR KEY，可以使用DATE、 TIME、 或 DATETIME列作为分区列，而无需对列值进行任何修改。\n\n##### 2.1.7、 子分区\n\n类似嵌套分区，每一个分区下面再加一个分区\n​\n\n![](/images/mysql/partition/child.png)\n\n#### 2.7 MySQL 分区如何处理 NULL\n\nNULL会被认为比任何值都小的分区里面放置\n\n具体详细使用方式为：https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html\n\n## 二、分区与分表的区别\n\n分表：分表是从物理上分开，一张表分为多张表\n\n分区：分区是从逻辑上分开，一张表还是一张表，只是里面按照固定字段或者设定值来进行分不同的存储区\n\n## 三、分区的优点\n\n1、分区之后，查询只查询单个区，或者几个区，查询数据量总体减少，提高查询性能\n\n2、分区在逻辑上进行拆分表数据，实际上还是同一张表\n\n3、分区可以设置多个磁盘进行分区存储，比单个磁盘分区容量更大\n\n4、插入数据不需要手动的去处理插入哪个表的问题，增删改不需要修改\n\n5、不需要引入第三方中间件，有效降低开发难度\n\n> 官方给出优点：\n\n分区使得在一个表中存储的数据比单个磁盘或文件系统分区上存储的数据更多成为可能。\n通过删除仅包含该数据的分区（或多个分区），通常可以轻松地从分区表中删除失去其用处的数据。相反，在某些情况下，通过添加一个或多个新分区来专门存储该数据，可以极大地促进添加新数据的过程。\n\n某些查询可以极大地优化，因为满足给定WHERE子句的数据只能存储在一个或多个分区上，这会自动从搜索中排除任何剩余的分区。由于在创建分区表后可以更改分区，因此您可以重新组织数据以增强在首次设置分区方案时可能不经常使用的频繁查询。这种排除不匹配分区（以及它们包含的任何行）的能力通常称为 分区修剪。\n\n出处：https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html\n\n## 四、分区的缺点\n\n1、表可访问性。 有时，服务器 SQL 模式的更改可能会使分区表无法使用。\n\n2、分区可能在MySQL版本上会有所差异，该问题不可控。\n\n3、存储引擎。 使用表进行分区操作、查询和更新操作通常MyISAM 比使用InnoDB或 NDB表更快。（对于有事务的表不太适合分区）\n\n4、全文索引。 分区表不支持FULLTEXT 索引或搜索，即使是使用InnoDB或 MyISAM存储引擎的分区表 。\n\n5、临时表。 临时表不能分区。\n\n6、InnoDB外键和 MySQL 分区不兼容。分区 InnoDB表不能有外键引用，也不能有外键引用的列。InnoDB具有或被外键引用的表不能被分区。InnoDB不支持将多个磁盘用于子分区。（目前仅支持此功能 MyISAM。）\n\n      6.1、InnoDB使用用户定义分区 的表的定义不得包含外键引用；不能InnoDB对定义包含外键引用的表进行分区。\n\n     6.2、任何InnoDB表定义都不能包含对用户分区表的外键引用；任何 InnoDB具有用户定义分区的表都不能包含由外键引用的列。\n\n7、不支持查询缓存。 分区表不支持查询缓存，并且对于涉及分区表的查询会自动禁用。无法为此类查询启用查询缓存。\n","slug":"mysql/mysql_partition_research","published":1,"updated":"2022-02-19T17:34:01.760Z","_id":"ckztwibsl0000gvw1dvz73yf2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL分区可行性调研\"><a href=\"#MySQL分区可行性调研\" class=\"headerlink\" title=\"MySQL分区可行性调研\"></a>MySQL分区可行性调研</h1><h2 id=\"一、什么是分区\"><a href=\"#一、什么是分区\" class=\"headerlink\" title=\"一、什么是分区\"></a>一、什么是分区</h2><h3 id=\"1、MySQL存储原理\"><a href=\"#1、MySQL存储原理\" class=\"headerlink\" title=\"1、MySQL存储原理\"></a>1、MySQL存储原理</h3><p>MySQL是支持ACID事务的，其中一个D就是持久化，持久化就代表了：插入MySQL的数据最终还是要落到磁盘中，这样才能做到真正的持久化。</p>\n<p>MySQL存储文件在磁盘中，每一个数据库里面有很多存储文件：</p>\n<p>针对InnoDB引擎来说</p>\n<p>数据库配置信息文件（.opt）</p>\n<p>表元数据文件（.frm）、表数据文件（ibd）；</p>\n<h4 id=\"opt文件\"><a href=\"#opt文件\" class=\"headerlink\" title=\".opt文件\"></a>.opt文件</h4><p>包含数据库配置信息的文件。</p>\n<h4 id=\"frm-文件\"><a href=\"#frm-文件\" class=\"headerlink\" title=\".frm 文件\"></a>.frm 文件</h4><p>包含元数据的文件，例如 MySQL 表的表定义。</p>\n<p>对于备份，您必须始终将完整的.frm文件集与备份数据一起保留 ，以便能够恢复备份后更改或删除的表。</p>\n<p>尽管每个InnoDB表都有一个 .frm文件，InnoDB 但在系统表空间中维护自己的表元数据 。</p>\n<h4 id=\"ibd文件\"><a href=\"#ibd文件\" class=\"headerlink\" title=\".ibd文件\"></a>.ibd文件</h4><p>保存了数据库的数据信息和关联索引信息。</p>\n<p>file-per-table 表空间和通用表空间 的数据文件 。File-per-table 表空间 .ibd文件包含单个表和关联的索引数据。通用表空间 .ibd文件可能包含多个表的表和索引数据。MySQL 5.7.6 中引入了通用表空间。</p>\n<p>该.ibd文件的扩展名不适用于 系统表空间，它由一个或多个ibdata文件。<br>如果使用该DATA DIRECTORY =子句创建 file-per-table 表空间或通用表空间，则该 .ibd文件位于指定路径，在正常数据目录之外，并由.isl 文件指向 。<br>​</p>\n<p><img src=\"/images/mysql/partition/index.png\"></p>\n<h3 id=\"2、MySQL分区原理\"><a href=\"#2、MySQL分区原理\" class=\"headerlink\" title=\"2、MySQL分区原理\"></a>2、MySQL分区原理</h3><p>官方详细文档：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning.html</a><br>从 MySQL 5.7.17 开始，MySQL 服务器中的通用分区处理程序已弃用，并在 MySQL 8.0 中删除，因为用于给定表的存储引擎预计会提供自己的（“本机”）分区处理程序。目前，只有InnoDB和 NDB存储引擎可以做到这一点。</p>\n<p>要准备迁移到 MySQL 8.0，任何具有非本机分区的表都应更改为使用提供本机分区的引擎，或者设为非分区。例如，要将表更改为InnoDB，请执行以下语句：</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">INNODB</span>;</code></pre>\n<p>设置分区之后会在磁盘中产生用#分隔开的独立的分区文件</p>\n<p>还有独立一个文件为pre的分区信息表，类似磁盘分区的一个mbr分区文件</p>\n<p>分区键的数据类型。 分区键必须是整数列或解析为整数的表达式。ENUM不能使用使用列的表达式 。列或表达式值也可能是NULL. </p>\n<p>最大分区数。  不使用NDB存储引擎的给定表的最大可能分区数是 8192。这个数字包括子分区。</p>\n<h4 id=\"2-1、分区类型\"><a href=\"#2-1、分区类型\" class=\"headerlink\" title=\"2.1、分区类型\"></a>2.1、分区类型</h4><h5 id=\"2-1-1、-范围划分\"><a href=\"#2-1-1、-范围划分\" class=\"headerlink\" title=\"2.1.1、 范围划分\"></a>2.1.1、 范围划分</h5><p>分段划分： 1-10  11-20 数据落在哪个区间，则在哪个分区中。 （是一组连续的区间）<br>分区值为固定值<br>​</p>\n<p><img src=\"/images/mysql/partition/range.png\"></p>\n<h5 id=\"2-1-2、-LIST-分区\"><a href=\"#2-1-2、-LIST-分区\" class=\"headerlink\" title=\"2.1.2、 LIST 分区\"></a>2.1.2、 LIST 分区</h5><p>类似于分区 by RANGE，不同之处在于分区是根据几个离散的值，例如 5 、6 、8 、9是一个分区<br>分区值为固定值<br>​</p>\n<p><img src=\"/images/mysql/partition/list.png\"></p>\n<h4 id=\"2-1-4、列分区\"><a href=\"#2-1-4、列分区\" class=\"headerlink\" title=\"2.1.4、列分区\"></a>2.1.4、列分区</h4><p>所有整数类型：TINYINT、 SMALLINT、 MEDIUMINT、 INT ( INTEGER) 和 BIGINT。<br>DATE和 DATETIME。</p>\n<p>下面的字符串类型： CHAR， VARCHAR， BINARY，和 VARBINARY。</p>\n<p>分区值设置为列名，根据选择列对应的数据进行分区，例如时间分区</p>\n<h5 id=\"2-1-4-1、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\"><a href=\"#2-1-4-1、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\" class=\"headerlink\" title=\"2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\"></a>2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同</h5><p>① 不接受表达式，只接受列名。</p>\n<p>② 接受一列或多列的列表。</p>\n<p>③ 分区基于 元组（列值列表）之间的比较，而不是标量值之间的比较。</p>\n<p>⑤ 分区列不限于整数列；字符串， DATE并且 DATETIME列也可以作为分区列。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_namePARTITION <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-keyword\">RANGE</span> <span class=\"hljs-keyword\">COLUMNS</span>(column_list) (    <span class=\"hljs-keyword\">PARTITION</span> partition_name <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">LESS</span> <span class=\"hljs-keyword\">THAN</span> (value_list)[,    <span class=\"hljs-keyword\">PARTITION</span> partition_name <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">LESS</span> <span class=\"hljs-keyword\">THAN</span> (value_list)][,    ...])</code></pre>\n\n<h5 id=\"2-1-4-2、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\"><a href=\"#2-1-4-2、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\" class=\"headerlink\" title=\"2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\"></a>2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同</h5><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> customers_1 (    first_name <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">25</span>),    last_name <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">25</span>),    street_1 <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">30</span>),    street_2 <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">30</span>),    city <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">15</span>),    renewal <span class=\"hljs-built_in\">DATE</span>)<span class=\"hljs-keyword\">PARTITION</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-keyword\">LIST</span> <span class=\"hljs-keyword\">COLUMNS</span>(city) (    <span class=\"hljs-keyword\">PARTITION</span> pRegion_1 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Oskarshamn&#x27;</span>, <span class=\"hljs-string\">&#x27;Högsby&#x27;</span>, <span class=\"hljs-string\">&#x27;Mönsterås&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_2 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Vimmerby&#x27;</span>, <span class=\"hljs-string\">&#x27;Hultsfred&#x27;</span>, <span class=\"hljs-string\">&#x27;Västervik&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_3 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Nässjö&#x27;</span>, <span class=\"hljs-string\">&#x27;Eksjö&#x27;</span>, <span class=\"hljs-string\">&#x27;Vetlanda&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_4 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Uppvidinge&#x27;</span>, <span class=\"hljs-string\">&#x27;Alvesta&#x27;</span>, <span class=\"hljs-string\">&#x27;Växjo&#x27;</span>));</code></pre>\n\n<h5 id=\"2-1-5、-HASH-分区\"><a href=\"#2-1-5、-HASH-分区\" class=\"headerlink\" title=\"2.1.5、 HASH 分区\"></a>2.1.5、 HASH 分区</h5><p> 使用这种类型的分区，根据用户定义的表达式返回的值选择分区，该表达式对要插入表的行中的列值进行操作。该函数可以由任何在 MySQL 中有效的表达式组成，该表达式产生一个非负整数值。LINEAR HASH也可以使用此类型的扩展名。<br>​</p>\n<p><img src=\"/images/mysql/partition/hash.png\"></p>\n<h5 id=\"2-1-6、-KEY分区\"><a href=\"#2-1-6、-KEY分区\" class=\"headerlink\" title=\"2.1.6、 KEY分区\"></a>2.1.6、 KEY分区</h5><p>这种类型的分区类似于分区 by HASH，只是只提供了一个或多个要评估的列，并且 MySQL 服务器提供了自己的散列函数。这些列可以包含非整数值，因为 MySQL 提供的散列函数保证整数结果，而不管列数据类型如何。LINEAR KEY也可以使用此类型的扩展名 。<br>​</p>\n<p><img src=\"/images/mysql/partition/key.png\"></p>\n<p>数据库分区的一个非常常见的用途是按日期分隔数据。一些数据库系统支持显式日期分区，MySQL 在 5.7 中没有实现。但是，在 MySQL 中创建基于DATE、 TIME、 或 DATETIME列或基于使用这些列的表达式的分区方案并不困难 。</p>\n<p>按KEY或分区时LINEAR KEY，可以使用DATE、 TIME、 或 DATETIME列作为分区列，而无需对列值进行任何修改。</p>\n<h5 id=\"2-1-7、-子分区\"><a href=\"#2-1-7、-子分区\" class=\"headerlink\" title=\"2.1.7、 子分区\"></a>2.1.7、 子分区</h5><p>类似嵌套分区，每一个分区下面再加一个分区<br>​</p>\n<p><img src=\"/images/mysql/partition/child.png\"></p>\n<h4 id=\"2-7-MySQL-分区如何处理-NULL\"><a href=\"#2-7-MySQL-分区如何处理-NULL\" class=\"headerlink\" title=\"2.7 MySQL 分区如何处理 NULL\"></a>2.7 MySQL 分区如何处理 NULL</h4><p>NULL会被认为比任何值都小的分区里面放置</p>\n<p>具体详细使用方式为：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html</a></p>\n<h2 id=\"二、分区与分表的区别\"><a href=\"#二、分区与分表的区别\" class=\"headerlink\" title=\"二、分区与分表的区别\"></a>二、分区与分表的区别</h2><p>分表：分表是从物理上分开，一张表分为多张表</p>\n<p>分区：分区是从逻辑上分开，一张表还是一张表，只是里面按照固定字段或者设定值来进行分不同的存储区</p>\n<h2 id=\"三、分区的优点\"><a href=\"#三、分区的优点\" class=\"headerlink\" title=\"三、分区的优点\"></a>三、分区的优点</h2><p>1、分区之后，查询只查询单个区，或者几个区，查询数据量总体减少，提高查询性能</p>\n<p>2、分区在逻辑上进行拆分表数据，实际上还是同一张表</p>\n<p>3、分区可以设置多个磁盘进行分区存储，比单个磁盘分区容量更大</p>\n<p>4、插入数据不需要手动的去处理插入哪个表的问题，增删改不需要修改</p>\n<p>5、不需要引入第三方中间件，有效降低开发难度</p>\n<blockquote>\n<p>官方给出优点：</p>\n</blockquote>\n<p>分区使得在一个表中存储的数据比单个磁盘或文件系统分区上存储的数据更多成为可能。<br>通过删除仅包含该数据的分区（或多个分区），通常可以轻松地从分区表中删除失去其用处的数据。相反，在某些情况下，通过添加一个或多个新分区来专门存储该数据，可以极大地促进添加新数据的过程。</p>\n<p>某些查询可以极大地优化，因为满足给定WHERE子句的数据只能存储在一个或多个分区上，这会自动从搜索中排除任何剩余的分区。由于在创建分区表后可以更改分区，因此您可以重新组织数据以增强在首次设置分区方案时可能不经常使用的频繁查询。这种排除不匹配分区（以及它们包含的任何行）的能力通常称为 分区修剪。</p>\n<p>出处：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html</a></p>\n<h2 id=\"四、分区的缺点\"><a href=\"#四、分区的缺点\" class=\"headerlink\" title=\"四、分区的缺点\"></a>四、分区的缺点</h2><p>1、表可访问性。 有时，服务器 SQL 模式的更改可能会使分区表无法使用。</p>\n<p>2、分区可能在MySQL版本上会有所差异，该问题不可控。</p>\n<p>3、存储引擎。 使用表进行分区操作、查询和更新操作通常MyISAM 比使用InnoDB或 NDB表更快。（对于有事务的表不太适合分区）</p>\n<p>4、全文索引。 分区表不支持FULLTEXT 索引或搜索，即使是使用InnoDB或 MyISAM存储引擎的分区表 。</p>\n<p>5、临时表。 临时表不能分区。</p>\n<p>6、InnoDB外键和 MySQL 分区不兼容。分区 InnoDB表不能有外键引用，也不能有外键引用的列。InnoDB具有或被外键引用的表不能被分区。InnoDB不支持将多个磁盘用于子分区。（目前仅支持此功能 MyISAM。）</p>\n<pre><code>  6.1、InnoDB使用用户定义分区 的表的定义不得包含外键引用；不能InnoDB对定义包含外键引用的表进行分区。\n\n 6.2、任何InnoDB表定义都不能包含对用户分区表的外键引用；任何 InnoDB具有用户定义分区的表都不能包含由外键引用的列。</code></pre>\n<p>7、不支持查询缓存。 分区表不支持查询缓存，并且对于涉及分区表的查询会自动禁用。无法为此类查询启用查询缓存。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL分区可行性调研\"><a href=\"#MySQL分区可行性调研\" class=\"headerlink\" title=\"MySQL分区可行性调研\"></a>MySQL分区可行性调研</h1><h2 id=\"一、什么是分区\"><a href=\"#一、什么是分区\" class=\"headerlink\" title=\"一、什么是分区\"></a>一、什么是分区</h2><h3 id=\"1、MySQL存储原理\"><a href=\"#1、MySQL存储原理\" class=\"headerlink\" title=\"1、MySQL存储原理\"></a>1、MySQL存储原理</h3><p>MySQL是支持ACID事务的，其中一个D就是持久化，持久化就代表了：插入MySQL的数据最终还是要落到磁盘中，这样才能做到真正的持久化。</p>\n<p>MySQL存储文件在磁盘中，每一个数据库里面有很多存储文件：</p>\n<p>针对InnoDB引擎来说</p>\n<p>数据库配置信息文件（.opt）</p>\n<p>表元数据文件（.frm）、表数据文件（ibd）；</p>\n<h4 id=\"opt文件\"><a href=\"#opt文件\" class=\"headerlink\" title=\".opt文件\"></a>.opt文件</h4><p>包含数据库配置信息的文件。</p>\n<h4 id=\"frm-文件\"><a href=\"#frm-文件\" class=\"headerlink\" title=\".frm 文件\"></a>.frm 文件</h4><p>包含元数据的文件，例如 MySQL 表的表定义。</p>\n<p>对于备份，您必须始终将完整的.frm文件集与备份数据一起保留 ，以便能够恢复备份后更改或删除的表。</p>\n<p>尽管每个InnoDB表都有一个 .frm文件，InnoDB 但在系统表空间中维护自己的表元数据 。</p>\n<h4 id=\"ibd文件\"><a href=\"#ibd文件\" class=\"headerlink\" title=\".ibd文件\"></a>.ibd文件</h4><p>保存了数据库的数据信息和关联索引信息。</p>\n<p>file-per-table 表空间和通用表空间 的数据文件 。File-per-table 表空间 .ibd文件包含单个表和关联的索引数据。通用表空间 .ibd文件可能包含多个表的表和索引数据。MySQL 5.7.6 中引入了通用表空间。</p>\n<p>该.ibd文件的扩展名不适用于 系统表空间，它由一个或多个ibdata文件。<br>如果使用该DATA DIRECTORY =子句创建 file-per-table 表空间或通用表空间，则该 .ibd文件位于指定路径，在正常数据目录之外，并由.isl 文件指向 。<br>​</p>\n<p><img src=\"/images/mysql/partition/index.png\"></p>\n<h3 id=\"2、MySQL分区原理\"><a href=\"#2、MySQL分区原理\" class=\"headerlink\" title=\"2、MySQL分区原理\"></a>2、MySQL分区原理</h3><p>官方详细文档：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning.html</a><br>从 MySQL 5.7.17 开始，MySQL 服务器中的通用分区处理程序已弃用，并在 MySQL 8.0 中删除，因为用于给定表的存储引擎预计会提供自己的（“本机”）分区处理程序。目前，只有InnoDB和 NDB存储引擎可以做到这一点。</p>\n<p>要准备迁移到 MySQL 8.0，任何具有非本机分区的表都应更改为使用提供本机分区的引擎，或者设为非分区。例如，要将表更改为InnoDB，请执行以下语句：</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">INNODB</span>;</code></pre>\n<p>设置分区之后会在磁盘中产生用#分隔开的独立的分区文件</p>\n<p>还有独立一个文件为pre的分区信息表，类似磁盘分区的一个mbr分区文件</p>\n<p>分区键的数据类型。 分区键必须是整数列或解析为整数的表达式。ENUM不能使用使用列的表达式 。列或表达式值也可能是NULL. </p>\n<p>最大分区数。  不使用NDB存储引擎的给定表的最大可能分区数是 8192。这个数字包括子分区。</p>\n<h4 id=\"2-1、分区类型\"><a href=\"#2-1、分区类型\" class=\"headerlink\" title=\"2.1、分区类型\"></a>2.1、分区类型</h4><h5 id=\"2-1-1、-范围划分\"><a href=\"#2-1-1、-范围划分\" class=\"headerlink\" title=\"2.1.1、 范围划分\"></a>2.1.1、 范围划分</h5><p>分段划分： 1-10  11-20 数据落在哪个区间，则在哪个分区中。 （是一组连续的区间）<br>分区值为固定值<br>​</p>\n<p><img src=\"/images/mysql/partition/range.png\"></p>\n<h5 id=\"2-1-2、-LIST-分区\"><a href=\"#2-1-2、-LIST-分区\" class=\"headerlink\" title=\"2.1.2、 LIST 分区\"></a>2.1.2、 LIST 分区</h5><p>类似于分区 by RANGE，不同之处在于分区是根据几个离散的值，例如 5 、6 、8 、9是一个分区<br>分区值为固定值<br>​</p>\n<p><img src=\"/images/mysql/partition/list.png\"></p>\n<h4 id=\"2-1-4、列分区\"><a href=\"#2-1-4、列分区\" class=\"headerlink\" title=\"2.1.4、列分区\"></a>2.1.4、列分区</h4><p>所有整数类型：TINYINT、 SMALLINT、 MEDIUMINT、 INT ( INTEGER) 和 BIGINT。<br>DATE和 DATETIME。</p>\n<p>下面的字符串类型： CHAR， VARCHAR， BINARY，和 VARBINARY。</p>\n<p>分区值设置为列名，根据选择列对应的数据进行分区，例如时间分区</p>\n<h5 id=\"2-1-4-1、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\"><a href=\"#2-1-4-1、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\" class=\"headerlink\" title=\"2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\"></a>2.1.4.1、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同</h5><p>① 不接受表达式，只接受列名。</p>\n<p>② 接受一列或多列的列表。</p>\n<p>③ 分区基于 元组（列值列表）之间的比较，而不是标量值之间的比较。</p>\n<p>⑤ 分区列不限于整数列；字符串， DATE并且 DATETIME列也可以作为分区列。</p>\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_namePARTITION <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-keyword\">RANGE</span> <span class=\"hljs-keyword\">COLUMNS</span>(column_list) (    <span class=\"hljs-keyword\">PARTITION</span> partition_name <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">LESS</span> <span class=\"hljs-keyword\">THAN</span> (value_list)[,    <span class=\"hljs-keyword\">PARTITION</span> partition_name <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">LESS</span> <span class=\"hljs-keyword\">THAN</span> (value_list)][,    ...])</code></pre>\n\n<h5 id=\"2-1-4-2、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\"><a href=\"#2-1-4-2、RANGE-COLUMNS分区RANGE在以下方面与分区有很大不同\" class=\"headerlink\" title=\"2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同\"></a>2.1.4.2、RANGE COLUMNS分区RANGE在以下方面与分区有很大不同</h5><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> customers_1 (    first_name <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">25</span>),    last_name <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">25</span>),    street_1 <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">30</span>),    street_2 <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">30</span>),    city <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">15</span>),    renewal <span class=\"hljs-built_in\">DATE</span>)<span class=\"hljs-keyword\">PARTITION</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-keyword\">LIST</span> <span class=\"hljs-keyword\">COLUMNS</span>(city) (    <span class=\"hljs-keyword\">PARTITION</span> pRegion_1 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Oskarshamn&#x27;</span>, <span class=\"hljs-string\">&#x27;Högsby&#x27;</span>, <span class=\"hljs-string\">&#x27;Mönsterås&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_2 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Vimmerby&#x27;</span>, <span class=\"hljs-string\">&#x27;Hultsfred&#x27;</span>, <span class=\"hljs-string\">&#x27;Västervik&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_3 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Nässjö&#x27;</span>, <span class=\"hljs-string\">&#x27;Eksjö&#x27;</span>, <span class=\"hljs-string\">&#x27;Vetlanda&#x27;</span>),    <span class=\"hljs-keyword\">PARTITION</span> pRegion_4 <span class=\"hljs-keyword\">VALUES</span> <span class=\"hljs-keyword\">IN</span>(<span class=\"hljs-string\">&#x27;Uppvidinge&#x27;</span>, <span class=\"hljs-string\">&#x27;Alvesta&#x27;</span>, <span class=\"hljs-string\">&#x27;Växjo&#x27;</span>));</code></pre>\n\n<h5 id=\"2-1-5、-HASH-分区\"><a href=\"#2-1-5、-HASH-分区\" class=\"headerlink\" title=\"2.1.5、 HASH 分区\"></a>2.1.5、 HASH 分区</h5><p> 使用这种类型的分区，根据用户定义的表达式返回的值选择分区，该表达式对要插入表的行中的列值进行操作。该函数可以由任何在 MySQL 中有效的表达式组成，该表达式产生一个非负整数值。LINEAR HASH也可以使用此类型的扩展名。<br>​</p>\n<p><img src=\"/images/mysql/partition/hash.png\"></p>\n<h5 id=\"2-1-6、-KEY分区\"><a href=\"#2-1-6、-KEY分区\" class=\"headerlink\" title=\"2.1.6、 KEY分区\"></a>2.1.6、 KEY分区</h5><p>这种类型的分区类似于分区 by HASH，只是只提供了一个或多个要评估的列，并且 MySQL 服务器提供了自己的散列函数。这些列可以包含非整数值，因为 MySQL 提供的散列函数保证整数结果，而不管列数据类型如何。LINEAR KEY也可以使用此类型的扩展名 。<br>​</p>\n<p><img src=\"/images/mysql/partition/key.png\"></p>\n<p>数据库分区的一个非常常见的用途是按日期分隔数据。一些数据库系统支持显式日期分区，MySQL 在 5.7 中没有实现。但是，在 MySQL 中创建基于DATE、 TIME、 或 DATETIME列或基于使用这些列的表达式的分区方案并不困难 。</p>\n<p>按KEY或分区时LINEAR KEY，可以使用DATE、 TIME、 或 DATETIME列作为分区列，而无需对列值进行任何修改。</p>\n<h5 id=\"2-1-7、-子分区\"><a href=\"#2-1-7、-子分区\" class=\"headerlink\" title=\"2.1.7、 子分区\"></a>2.1.7、 子分区</h5><p>类似嵌套分区，每一个分区下面再加一个分区<br>​</p>\n<p><img src=\"/images/mysql/partition/child.png\"></p>\n<h4 id=\"2-7-MySQL-分区如何处理-NULL\"><a href=\"#2-7-MySQL-分区如何处理-NULL\" class=\"headerlink\" title=\"2.7 MySQL 分区如何处理 NULL\"></a>2.7 MySQL 分区如何处理 NULL</h4><p>NULL会被认为比任何值都小的分区里面放置</p>\n<p>具体详细使用方式为：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning-handling-nulls.html</a></p>\n<h2 id=\"二、分区与分表的区别\"><a href=\"#二、分区与分表的区别\" class=\"headerlink\" title=\"二、分区与分表的区别\"></a>二、分区与分表的区别</h2><p>分表：分表是从物理上分开，一张表分为多张表</p>\n<p>分区：分区是从逻辑上分开，一张表还是一张表，只是里面按照固定字段或者设定值来进行分不同的存储区</p>\n<h2 id=\"三、分区的优点\"><a href=\"#三、分区的优点\" class=\"headerlink\" title=\"三、分区的优点\"></a>三、分区的优点</h2><p>1、分区之后，查询只查询单个区，或者几个区，查询数据量总体减少，提高查询性能</p>\n<p>2、分区在逻辑上进行拆分表数据，实际上还是同一张表</p>\n<p>3、分区可以设置多个磁盘进行分区存储，比单个磁盘分区容量更大</p>\n<p>4、插入数据不需要手动的去处理插入哪个表的问题，增删改不需要修改</p>\n<p>5、不需要引入第三方中间件，有效降低开发难度</p>\n<blockquote>\n<p>官方给出优点：</p>\n</blockquote>\n<p>分区使得在一个表中存储的数据比单个磁盘或文件系统分区上存储的数据更多成为可能。<br>通过删除仅包含该数据的分区（或多个分区），通常可以轻松地从分区表中删除失去其用处的数据。相反，在某些情况下，通过添加一个或多个新分区来专门存储该数据，可以极大地促进添加新数据的过程。</p>\n<p>某些查询可以极大地优化，因为满足给定WHERE子句的数据只能存储在一个或多个分区上，这会自动从搜索中排除任何剩余的分区。由于在创建分区表后可以更改分区，因此您可以重新组织数据以增强在首次设置分区方案时可能不经常使用的频繁查询。这种排除不匹配分区（以及它们包含的任何行）的能力通常称为 分区修剪。</p>\n<p>出处：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html\">https://dev.mysql.com/doc/refman/5.7/en/partitioning-overview.html</a></p>\n<h2 id=\"四、分区的缺点\"><a href=\"#四、分区的缺点\" class=\"headerlink\" title=\"四、分区的缺点\"></a>四、分区的缺点</h2><p>1、表可访问性。 有时，服务器 SQL 模式的更改可能会使分区表无法使用。</p>\n<p>2、分区可能在MySQL版本上会有所差异，该问题不可控。</p>\n<p>3、存储引擎。 使用表进行分区操作、查询和更新操作通常MyISAM 比使用InnoDB或 NDB表更快。（对于有事务的表不太适合分区）</p>\n<p>4、全文索引。 分区表不支持FULLTEXT 索引或搜索，即使是使用InnoDB或 MyISAM存储引擎的分区表 。</p>\n<p>5、临时表。 临时表不能分区。</p>\n<p>6、InnoDB外键和 MySQL 分区不兼容。分区 InnoDB表不能有外键引用，也不能有外键引用的列。InnoDB具有或被外键引用的表不能被分区。InnoDB不支持将多个磁盘用于子分区。（目前仅支持此功能 MyISAM。）</p>\n<pre><code>  6.1、InnoDB使用用户定义分区 的表的定义不得包含外键引用；不能InnoDB对定义包含外键引用的表进行分区。\n\n 6.2、任何InnoDB表定义都不能包含对用户分区表的外键引用；任何 InnoDB具有用户定义分区的表都不能包含由外键引用的列。</code></pre>\n<p>7、不支持查询缓存。 分区表不支持查询缓存，并且对于涉及分区表的查询会自动禁用。无法为此类查询启用查询缓存。</p>\n"},{"title":"深入分析MySQL replace 与 on duplicate key update 关键词","date":"2021-10-14T07:42:00.000Z","index_img":"/images/mysql/index.png","banner_img":"/images/post_banner.jpeg","_content":"\n# 深入分析MySQL replace 与 on duplicate key update 关键词\n\n## 建立一张数据表\n\n```sql \nCREATE TABLE `test`.`test_unique_key` (\n `id` varchar(32) NOT NULL,\n `name` varchar(255) NULL,\n `term_id` varchar(64) NULL,\n `class_id` varchar(64) NULL,\n `course_id` varchar(64) NULL,\n PRIMARY KEY (`id`),\n UNIQUE INDEX `unique`(`term_id`, `class_id`, `course_id`) USING BTREE\n);\n```\n\n查看REPLACE ...\n \n## 语句执行情况\n\n### 1、先测试主键一样，唯一键不一样\n```sql\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004');\n \nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', NULL );\n \nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', NULL );\n```\n\n> 执行结果，只剩一条数据 （按照主键进行了更新）\n​\n\n![](/images/mysql/insertupdate/1.png)\n\n### 2、主键不一样，唯一键一样\n```sql\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2005', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004' );\n\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2006', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004' );\n```\n\n> 由此看出，主键不一样，执行两次，最终剩余一条数据，所以是按照唯一键更新\n​\n\n![](/images/mysql/insertupdate/3.png)\n\n### 3、所以说明\n\n在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新\n如果存在主键和唯一索引，主键和唯一索引有一个相同的则被看做唯一标识，所以官方说明的是或者的关系\n官方原文说明\n\n> except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted.\n\n### 4、语句优点\n\n书写比较简单，就是把插入语句的insert关键字修改replace即可\n\n### 5、语句缺点\n\n但是replace实现原理为如果找到匹配的，是先删除后重新插入\n\n### 6、权限说明\n要使用REPLACE，您必须同时拥有表的INSERT和 DELETE权限。\n\n## 再看看INSERT ... ON DUPLICATE KEY UPDATE 语句\n \n### 1、主键相同，唯一索引不同\n```sql\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES\n ( '17b2ee26583000163e0b2e12010c2011', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三'\n-- 第二次执行，主键相同\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES\n ( '17b2ee26583000163e0b2e12010c2011', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三'\n```\n\n> 执行结果，因为不存在，则直接插入\n​\n\n![](/images/mysql/insertupdate/4.png)\n\n\n![](/images/mysql/insertupdate/5.png)\n\n### 2、唯一索引相同，主键不同\n```sql\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES( '17b2ee26583000163e0b2e12010c2012', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三1'\n```\n\n> 主键不同，唯一索引，也是更新数据\n​\n\n![](/images/mysql/insertupdate/6.png)\n\n### 3、综上所述\n在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新 主键与唯一索引也为或者关系\n\n### 4、语句优点\n实际执行，则不存在为insert操作，如果存在则是update操作\n\n### 5、语句缺点\n该语句书写起来比较麻烦，相当于是一个插入语句与更新语句的结合体\n只是不需要书写update 的 where提交，然后MySQL会根据唯一索引或者主键进行判断\n\n### 6、权限说明\n要使用on duplicate key update 您必须同时拥有表的INSERT和 UPDATE权限。","source":"_posts/mysql/mysql_insert_update.md","raw":"---\ntitle: 深入分析MySQL replace 与 on duplicate key update 关键词\ndate: 2021-10-14 15:42:00\ntags: replace, duplicate, on duplicate key update, insert and update, mysql\nindex_img: /images/mysql/index.png # 缩略图\nbanner_img: /images/post_banner.jpeg # 文章banner图\ncategories: MySQL\n---\n\n# 深入分析MySQL replace 与 on duplicate key update 关键词\n\n## 建立一张数据表\n\n```sql \nCREATE TABLE `test`.`test_unique_key` (\n `id` varchar(32) NOT NULL,\n `name` varchar(255) NULL,\n `term_id` varchar(64) NULL,\n `class_id` varchar(64) NULL,\n `course_id` varchar(64) NULL,\n PRIMARY KEY (`id`),\n UNIQUE INDEX `unique`(`term_id`, `class_id`, `course_id`) USING BTREE\n);\n```\n\n查看REPLACE ...\n \n## 语句执行情况\n\n### 1、先测试主键一样，唯一键不一样\n```sql\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004');\n \nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', NULL );\n \nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2001', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', NULL );\n```\n\n> 执行结果，只剩一条数据 （按照主键进行了更新）\n​\n\n![](/images/mysql/insertupdate/1.png)\n\n### 2、主键不一样，唯一键一样\n```sql\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2005', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004' );\n\nREPLACE INTO test_unique_key ( id, NAME, term_id, class_id, course_id )\nVALUES( '17b2ee26583000163e0b2e12010c2006', '您好', '17b2ee26583000163e0b2e12010c2002', '17b2ee26583000163e0b2e12010c2003', '17b2ee26583000163e0b2e12010c2004' );\n```\n\n> 由此看出，主键不一样，执行两次，最终剩余一条数据，所以是按照唯一键更新\n​\n\n![](/images/mysql/insertupdate/3.png)\n\n### 3、所以说明\n\n在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新\n如果存在主键和唯一索引，主键和唯一索引有一个相同的则被看做唯一标识，所以官方说明的是或者的关系\n官方原文说明\n\n> except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted.\n\n### 4、语句优点\n\n书写比较简单，就是把插入语句的insert关键字修改replace即可\n\n### 5、语句缺点\n\n但是replace实现原理为如果找到匹配的，是先删除后重新插入\n\n### 6、权限说明\n要使用REPLACE，您必须同时拥有表的INSERT和 DELETE权限。\n\n## 再看看INSERT ... ON DUPLICATE KEY UPDATE 语句\n \n### 1、主键相同，唯一索引不同\n```sql\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES\n ( '17b2ee26583000163e0b2e12010c2011', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三'\n-- 第二次执行，主键相同\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES\n ( '17b2ee26583000163e0b2e12010c2011', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三'\n```\n\n> 执行结果，因为不存在，则直接插入\n​\n\n![](/images/mysql/insertupdate/4.png)\n\n\n![](/images/mysql/insertupdate/5.png)\n\n### 2、唯一索引相同，主键不同\n```sql\nINSERT INTO test_unique_key ( `id`, `NAME`, `term_id`, `class_id`, `course_id` )\nVALUES( '17b2ee26583000163e0b2e12010c2012', '您好Duplicate', '17b2ee26583000163e0b2e12010c2012', '17b2ee26583000163e0b2e12010c20010', '17b2ee26583000163e0b2e12010c2011' ) \nON DUPLICATE KEY UPDATE name = '张三1'\n```\n\n> 主键不同，唯一索引，也是更新数据\n​\n\n![](/images/mysql/insertupdate/6.png)\n\n### 3、综上所述\n在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新 主键与唯一索引也为或者关系\n\n### 4、语句优点\n实际执行，则不存在为insert操作，如果存在则是update操作\n\n### 5、语句缺点\n该语句书写起来比较麻烦，相当于是一个插入语句与更新语句的结合体\n只是不需要书写update 的 where提交，然后MySQL会根据唯一索引或者主键进行判断\n\n### 6、权限说明\n要使用on duplicate key update 您必须同时拥有表的INSERT和 UPDATE权限。","slug":"mysql/mysql_insert_update","published":1,"updated":"2022-02-19T17:33:52.253Z","_id":"ckztxybbq00006gw1369f8ij0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"深入分析MySQL-replace-与-on-duplicate-key-update-关键词\"><a href=\"#深入分析MySQL-replace-与-on-duplicate-key-update-关键词\" class=\"headerlink\" title=\"深入分析MySQL replace 与 on duplicate key update 关键词\"></a>深入分析MySQL replace 与 on duplicate key update 关键词</h1><h2 id=\"建立一张数据表\"><a href=\"#建立一张数据表\" class=\"headerlink\" title=\"建立一张数据表\"></a>建立一张数据表</h2><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`test`</span>.<span class=\"hljs-string\">`test_unique_key`</span> (\n <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">32</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`term_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`class_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`course_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-string\">`unique`</span>(<span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span>) <span class=\"hljs-keyword\">USING</span> BTREE\n);</code></pre>\n\n<p>查看REPLACE …</p>\n<h2 id=\"语句执行情况\"><a href=\"#语句执行情况\" class=\"headerlink\" title=\"语句执行情况\"></a>语句执行情况</h2><h3 id=\"1、先测试主键一样，唯一键不一样\"><a href=\"#1、先测试主键一样，唯一键不一样\" class=\"headerlink\" title=\"1、先测试主键一样，唯一键不一样\"></a>1、先测试主键一样，唯一键不一样</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span>);\n \n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-literal\">NULL</span> );\n \n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-literal\">NULL</span> );</code></pre>\n\n<blockquote>\n<p>执行结果，只剩一条数据 （按照主键进行了更新）<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/1.png\"></p>\n<h3 id=\"2、主键不一样，唯一键一样\"><a href=\"#2、主键不一样，唯一键一样\" class=\"headerlink\" title=\"2、主键不一样，唯一键一样\"></a>2、主键不一样，唯一键一样</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2005&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span> );\n\n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2006&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span> );</code></pre>\n\n<blockquote>\n<p>由此看出，主键不一样，执行两次，最终剩余一条数据，所以是按照唯一键更新<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/3.png\"></p>\n<h3 id=\"3、所以说明\"><a href=\"#3、所以说明\" class=\"headerlink\" title=\"3、所以说明\"></a>3、所以说明</h3><p>在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新<br>如果存在主键和唯一索引，主键和唯一索引有一个相同的则被看做唯一标识，所以官方说明的是或者的关系<br>官方原文说明</p>\n<blockquote>\n<p>except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted.</p>\n</blockquote>\n<h3 id=\"4、语句优点\"><a href=\"#4、语句优点\" class=\"headerlink\" title=\"4、语句优点\"></a>4、语句优点</h3><p>书写比较简单，就是把插入语句的insert关键字修改replace即可</p>\n<h3 id=\"5、语句缺点\"><a href=\"#5、语句缺点\" class=\"headerlink\" title=\"5、语句缺点\"></a>5、语句缺点</h3><p>但是replace实现原理为如果找到匹配的，是先删除后重新插入</p>\n<h3 id=\"6、权限说明\"><a href=\"#6、权限说明\" class=\"headerlink\" title=\"6、权限说明\"></a>6、权限说明</h3><p>要使用REPLACE，您必须同时拥有表的INSERT和 DELETE权限。</p>\n<h2 id=\"再看看INSERT-…-ON-DUPLICATE-KEY-UPDATE-语句\"><a href=\"#再看看INSERT-…-ON-DUPLICATE-KEY-UPDATE-语句\" class=\"headerlink\" title=\"再看看INSERT … ON DUPLICATE KEY UPDATE 语句\"></a>再看看INSERT … ON DUPLICATE KEY UPDATE 语句</h2><h3 id=\"1、主键相同，唯一索引不同\"><a href=\"#1、主键相同，唯一索引不同\" class=\"headerlink\" title=\"1、主键相同，唯一索引不同\"></a>1、主键相同，唯一索引不同</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>\n ( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三&#x27;</span>\n<span class=\"hljs-comment\">-- 第二次执行，主键相同</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>\n ( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三&#x27;</span></code></pre>\n\n<blockquote>\n<p>执行结果，因为不存在，则直接插入<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/4.png\"></p>\n<p><img src=\"/images/mysql/insertupdate/5.png\"></p>\n<h3 id=\"2、唯一索引相同，主键不同\"><a href=\"#2、唯一索引相同，主键不同\" class=\"headerlink\" title=\"2、唯一索引相同，主键不同\"></a>2、唯一索引相同，主键不同</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三1&#x27;</span></code></pre>\n\n<blockquote>\n<p>主键不同，唯一索引，也是更新数据<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/6.png\"></p>\n<h3 id=\"3、综上所述\"><a href=\"#3、综上所述\" class=\"headerlink\" title=\"3、综上所述\"></a>3、综上所述</h3><p>在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新 主键与唯一索引也为或者关系</p>\n<h3 id=\"4、语句优点-1\"><a href=\"#4、语句优点-1\" class=\"headerlink\" title=\"4、语句优点\"></a>4、语句优点</h3><p>实际执行，则不存在为insert操作，如果存在则是update操作</p>\n<h3 id=\"5、语句缺点-1\"><a href=\"#5、语句缺点-1\" class=\"headerlink\" title=\"5、语句缺点\"></a>5、语句缺点</h3><p>该语句书写起来比较麻烦，相当于是一个插入语句与更新语句的结合体<br>只是不需要书写update 的 where提交，然后MySQL会根据唯一索引或者主键进行判断</p>\n<h3 id=\"6、权限说明-1\"><a href=\"#6、权限说明-1\" class=\"headerlink\" title=\"6、权限说明\"></a>6、权限说明</h3><p>要使用on duplicate key update 您必须同时拥有表的INSERT和 UPDATE权限。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入分析MySQL-replace-与-on-duplicate-key-update-关键词\"><a href=\"#深入分析MySQL-replace-与-on-duplicate-key-update-关键词\" class=\"headerlink\" title=\"深入分析MySQL replace 与 on duplicate key update 关键词\"></a>深入分析MySQL replace 与 on duplicate key update 关键词</h1><h2 id=\"建立一张数据表\"><a href=\"#建立一张数据表\" class=\"headerlink\" title=\"建立一张数据表\"></a>建立一张数据表</h2><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`test`</span>.<span class=\"hljs-string\">`test_unique_key`</span> (\n <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">32</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`name`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`term_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`class_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n <span class=\"hljs-string\">`course_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-literal\">NULL</span>,\n PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-string\">`unique`</span>(<span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span>) <span class=\"hljs-keyword\">USING</span> BTREE\n);</code></pre>\n\n<p>查看REPLACE …</p>\n<h2 id=\"语句执行情况\"><a href=\"#语句执行情况\" class=\"headerlink\" title=\"语句执行情况\"></a>语句执行情况</h2><h3 id=\"1、先测试主键一样，唯一键不一样\"><a href=\"#1、先测试主键一样，唯一键不一样\" class=\"headerlink\" title=\"1、先测试主键一样，唯一键不一样\"></a>1、先测试主键一样，唯一键不一样</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span>);\n \n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-literal\">NULL</span> );\n \n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2001&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-literal\">NULL</span> );</code></pre>\n\n<blockquote>\n<p>执行结果，只剩一条数据 （按照主键进行了更新）<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/1.png\"></p>\n<h3 id=\"2、主键不一样，唯一键一样\"><a href=\"#2、主键不一样，唯一键一样\" class=\"headerlink\" title=\"2、主键不一样，唯一键一样\"></a>2、主键不一样，唯一键一样</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2005&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span> );\n\n<span class=\"hljs-keyword\">REPLACE</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-keyword\">id</span>, <span class=\"hljs-keyword\">NAME</span>, term_id, class_id, course_id )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2006&#x27;</span>, <span class=\"hljs-string\">&#x27;您好&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2002&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2003&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2004&#x27;</span> );</code></pre>\n\n<blockquote>\n<p>由此看出，主键不一样，执行两次，最终剩余一条数据，所以是按照唯一键更新<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/3.png\"></p>\n<h3 id=\"3、所以说明\"><a href=\"#3、所以说明\" class=\"headerlink\" title=\"3、所以说明\"></a>3、所以说明</h3><p>在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新<br>如果存在主键和唯一索引，主键和唯一索引有一个相同的则被看做唯一标识，所以官方说明的是或者的关系<br>官方原文说明</p>\n<blockquote>\n<p>except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted.</p>\n</blockquote>\n<h3 id=\"4、语句优点\"><a href=\"#4、语句优点\" class=\"headerlink\" title=\"4、语句优点\"></a>4、语句优点</h3><p>书写比较简单，就是把插入语句的insert关键字修改replace即可</p>\n<h3 id=\"5、语句缺点\"><a href=\"#5、语句缺点\" class=\"headerlink\" title=\"5、语句缺点\"></a>5、语句缺点</h3><p>但是replace实现原理为如果找到匹配的，是先删除后重新插入</p>\n<h3 id=\"6、权限说明\"><a href=\"#6、权限说明\" class=\"headerlink\" title=\"6、权限说明\"></a>6、权限说明</h3><p>要使用REPLACE，您必须同时拥有表的INSERT和 DELETE权限。</p>\n<h2 id=\"再看看INSERT-…-ON-DUPLICATE-KEY-UPDATE-语句\"><a href=\"#再看看INSERT-…-ON-DUPLICATE-KEY-UPDATE-语句\" class=\"headerlink\" title=\"再看看INSERT … ON DUPLICATE KEY UPDATE 语句\"></a>再看看INSERT … ON DUPLICATE KEY UPDATE 语句</h2><h3 id=\"1、主键相同，唯一索引不同\"><a href=\"#1、主键相同，唯一索引不同\" class=\"headerlink\" title=\"1、主键相同，唯一索引不同\"></a>1、主键相同，唯一索引不同</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>\n ( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三&#x27;</span>\n<span class=\"hljs-comment\">-- 第二次执行，主键相同</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>\n ( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三&#x27;</span></code></pre>\n\n<blockquote>\n<p>执行结果，因为不存在，则直接插入<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/4.png\"></p>\n<p><img src=\"/images/mysql/insertupdate/5.png\"></p>\n<h3 id=\"2、唯一索引相同，主键不同\"><a href=\"#2、唯一索引相同，主键不同\" class=\"headerlink\" title=\"2、唯一索引相同，主键不同\"></a>2、唯一索引相同，主键不同</h3><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> test_unique_key ( <span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`NAME`</span>, <span class=\"hljs-string\">`term_id`</span>, <span class=\"hljs-string\">`class_id`</span>, <span class=\"hljs-string\">`course_id`</span> )\n<span class=\"hljs-keyword\">VALUES</span>( <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;您好Duplicate&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2012&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c20010&#x27;</span>, <span class=\"hljs-string\">&#x27;17b2ee26583000163e0b2e12010c2011&#x27;</span> ) \n<span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DUPLICATE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">name</span> = <span class=\"hljs-string\">&#x27;张三1&#x27;</span></code></pre>\n\n<blockquote>\n<p>主键不同，唯一索引，也是更新数据<br>​</p>\n</blockquote>\n<p><img src=\"/images/mysql/insertupdate/6.png\"></p>\n<h3 id=\"3、综上所述\"><a href=\"#3、综上所述\" class=\"headerlink\" title=\"3、综上所述\"></a>3、综上所述</h3><p>在主键相同唯一键不同时，则使用主键更新，唯一键相同主键不同时使用唯一键更新 主键与唯一索引也为或者关系</p>\n<h3 id=\"4、语句优点-1\"><a href=\"#4、语句优点-1\" class=\"headerlink\" title=\"4、语句优点\"></a>4、语句优点</h3><p>实际执行，则不存在为insert操作，如果存在则是update操作</p>\n<h3 id=\"5、语句缺点-1\"><a href=\"#5、语句缺点-1\" class=\"headerlink\" title=\"5、语句缺点\"></a>5、语句缺点</h3><p>该语句书写起来比较麻烦，相当于是一个插入语句与更新语句的结合体<br>只是不需要书写update 的 where提交，然后MySQL会根据唯一索引或者主键进行判断</p>\n<h3 id=\"6、权限说明-1\"><a href=\"#6、权限说明-1\" class=\"headerlink\" title=\"6、权限说明\"></a>6、权限说明</h3><p>要使用on duplicate key update 您必须同时拥有表的INSERT和 UPDATE权限。</p>\n"},{"title":"Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError： IGNORE_DEPRECATIONS，解决方案","date":"2020-10-21T16:00:00.000Z","_content":"\n\n# Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案 \n\n### 启动的时候爆出异常信息：\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'restHighLevelClient' defined in com.example.demo.MyHighLevelEsRestDemoApplication: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method 'restHighLevelClient' threw exception; nested exception is java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1176) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.main(MyHighLevelEsRestDemoApplication.java:23) [classes/:na]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method 'restHighLevelClient' threw exception; nested exception is java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    ... 19 common frames omitted\nCaused by: java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.elasticsearch.client.RestHighLevelClient.<clinit>(RestHighLevelClient.java:1911) ~[elasticsearch-rest-high-level-client-7.8.1.jar:7.8.1]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.restHighLevelClient(MyHighLevelEsRestDemoApplication.java:29) [classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.CGLIB$restHighLevelClient$1(<generated>) ~[classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42$$FastClassBySpringCGLIB$$c395303f.invoke(<generated>) ~[classes/:na]\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.restHighLevelClient(<generated>) ~[classes/:na]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_242]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_242]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_242]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_242]\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    ... 20 common frames omitted\n\n```\n\n### 这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\n\n> 需要修改导入依赖包去掉version\n\n```\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\n    <version>7.8.1</version>\n</dependency>\n```\n\n修改为\n\n```\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\n</dependency>\n```","source":"_posts/bigdata/elasticsearch/springboot-elasticsearch.md","raw":"---\ntitle: Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError： IGNORE_DEPRECATIONS，解决方案\ndate: 2020-10-22\ntags: Java,springboot,Spring,Linux,Bigdata,NoSQL,Elasticsearch\n---\n\n\n# Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案 \n\n### 启动的时候爆出异常信息：\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'restHighLevelClient' defined in com.example.demo.MyHighLevelEsRestDemoApplication: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method 'restHighLevelClient' threw exception; nested exception is java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1176) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.2.RELEASE.jar:2.3.2.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.main(MyHighLevelEsRestDemoApplication.java:23) [classes/:na]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method 'restHighLevelClient' threw exception; nested exception is java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    ... 19 common frames omitted\nCaused by: java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.elasticsearch.client.RestHighLevelClient.<clinit>(RestHighLevelClient.java:1911) ~[elasticsearch-rest-high-level-client-7.8.1.jar:7.8.1]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.restHighLevelClient(MyHighLevelEsRestDemoApplication.java:29) [classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.CGLIB$restHighLevelClient$1(<generated>) ~[classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42$$FastClassBySpringCGLIB$$c395303f.invoke(<generated>) ~[classes/:na]\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.restHighLevelClient(<generated>) ~[classes/:na]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_242]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_242]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_242]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_242]\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.8.RELEASE.jar:5.2.8.RELEASE]\n    ... 20 common frames omitted\n\n```\n\n### 这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\n\n> 需要修改导入依赖包去掉version\n\n```\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\n    <version>7.8.1</version>\n</dependency>\n```\n\n修改为\n\n```\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\n</dependency>\n```","slug":"bigdata/elasticsearch/springboot-elasticsearch","published":1,"updated":"2022-02-19T16:41:32.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzu3cyra00013yw1h5ph9qgy","content":"<h1 id=\"Spring-Boot-整合-Elasticsearch-客户端出现异常-NoSuchFieldError-IGNORE-DEPRECATIONS，解决方案\"><a href=\"#Spring-Boot-整合-Elasticsearch-客户端出现异常-NoSuchFieldError-IGNORE-DEPRECATIONS，解决方案\" class=\"headerlink\" title=\"Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案\"></a>Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案</h1><h3 id=\"启动的时候爆出异常信息：\"><a href=\"#启动的时候爆出异常信息：\" class=\"headerlink\" title=\"启动的时候爆出异常信息：\"></a>启动的时候爆出异常信息：</h3><pre><code class=\"hljs angelscript\">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> defined <span class=\"hljs-keyword\">in</span> com.example.demo.MyHighLevelEsRestDemoApplication: Bean instantiation via factory method failed; nested exception <span class=\"hljs-keyword\">is</span> org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> threw exception; nested exception <span class=\"hljs-keyword\">is</span> java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class=\"hljs-number\">655</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:<span class=\"hljs-number\">483</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">1336</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">1176</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">556</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">516</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class=\"hljs-number\">0</span>(AbstractBeanFactory.java:<span class=\"hljs-number\">324</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class=\"hljs-number\">226</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class=\"hljs-number\">322</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class=\"hljs-number\">202</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class=\"hljs-number\">897</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class=\"hljs-number\">879</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.<span class=\"hljs-built_in\">ref</span>resh(AbstractApplicationContext.java:<span class=\"hljs-number\">551</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>resh(SpringApplication.java:<span class=\"hljs-number\">758</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>resh(SpringApplication.java:<span class=\"hljs-number\">750</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>reshContext(SpringApplication.java:<span class=\"hljs-number\">397</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">315</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">1237</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">1226</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.main(MyHighLevelEsRestDemoApplication.java:<span class=\"hljs-number\">23</span>) [classes/:na]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> threw exception; nested exception <span class=\"hljs-keyword\">is</span> java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class=\"hljs-number\">185</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class=\"hljs-number\">650</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    ... <span class=\"hljs-number\">19</span> common frames omitted\nCaused by: java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.elasticsearch.client.RestHighLevelClient.&lt;clinit&gt;(RestHighLevelClient.java:<span class=\"hljs-number\">1911</span>) ~[elasticsearch-rest-high-level-client<span class=\"hljs-number\">-7.8</span><span class=\"hljs-number\">.1</span>.jar:<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.1</span>]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.restHighLevelClient(MyHighLevelEsRestDemoApplication.java:<span class=\"hljs-number\">29</span>) [classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.CGLIB$restHighLevelClient$<span class=\"hljs-number\">1</span>(&lt;generated&gt;) ~[classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42$$FastClassBySpringCGLIB$$c395303f.invoke(&lt;generated&gt;) ~[classes/:na]\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:<span class=\"hljs-number\">244</span>) ~[spring-core<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.<span class=\"hljs-built_in\">int</span>ercept(ConfigurationClassEnhancer.java:<span class=\"hljs-number\">331</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.restHighLevelClient(&lt;generated&gt;) ~[classes/:na]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"hljs-number\">43</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at java.lang.<span class=\"hljs-built_in\">ref</span>lect.Method.invoke(Method.java:<span class=\"hljs-number\">498</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class=\"hljs-number\">154</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    ... <span class=\"hljs-number\">20</span> common frames omitted\n</code></pre>\n\n<h3 id=\"这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\"><a href=\"#这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\" class=\"headerlink\" title=\"这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\"></a>这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题</h3><blockquote>\n<p>需要修改导入依赖包去掉version</p>\n</blockquote>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>7.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<p>修改为</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Boot-整合-Elasticsearch-客户端出现异常-NoSuchFieldError-IGNORE-DEPRECATIONS，解决方案\"><a href=\"#Spring-Boot-整合-Elasticsearch-客户端出现异常-NoSuchFieldError-IGNORE-DEPRECATIONS，解决方案\" class=\"headerlink\" title=\"Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案\"></a>Spring Boot 整合 Elasticsearch 客户端出现异常 NoSuchFieldError: IGNORE_DEPRECATIONS，解决方案</h1><h3 id=\"启动的时候爆出异常信息：\"><a href=\"#启动的时候爆出异常信息：\" class=\"headerlink\" title=\"启动的时候爆出异常信息：\"></a>启动的时候爆出异常信息：</h3><pre><code class=\"hljs angelscript\">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> defined <span class=\"hljs-keyword\">in</span> com.example.demo.MyHighLevelEsRestDemoApplication: Bean instantiation via factory method failed; nested exception <span class=\"hljs-keyword\">is</span> org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> threw exception; nested exception <span class=\"hljs-keyword\">is</span> java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class=\"hljs-number\">655</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:<span class=\"hljs-number\">483</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">1336</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">1176</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">556</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class=\"hljs-number\">516</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class=\"hljs-number\">0</span>(AbstractBeanFactory.java:<span class=\"hljs-number\">324</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class=\"hljs-number\">226</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class=\"hljs-number\">322</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class=\"hljs-number\">202</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class=\"hljs-number\">897</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class=\"hljs-number\">879</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.support.AbstractApplicationContext.<span class=\"hljs-built_in\">ref</span>resh(AbstractApplicationContext.java:<span class=\"hljs-number\">551</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>resh(SpringApplication.java:<span class=\"hljs-number\">758</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>resh(SpringApplication.java:<span class=\"hljs-number\">750</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.<span class=\"hljs-built_in\">ref</span>reshContext(SpringApplication.java:<span class=\"hljs-number\">397</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">315</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">1237</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class=\"hljs-number\">1226</span>) [spring-boot<span class=\"hljs-number\">-2.3</span><span class=\"hljs-number\">.2</span>.RELEASE.jar:<span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.2</span>.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.main(MyHighLevelEsRestDemoApplication.java:<span class=\"hljs-number\">23</span>) [classes/:na]\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.elasticsearch.client.RestHighLevelClient]: Factory method <span class=\"hljs-string\">&#x27;restHighLevelClient&#x27;</span> threw exception; nested exception <span class=\"hljs-keyword\">is</span> java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class=\"hljs-number\">185</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:<span class=\"hljs-number\">650</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    ... <span class=\"hljs-number\">19</span> common frames omitted\nCaused by: java.lang.NoSuchFieldError: IGNORE_DEPRECATIONS\n    at org.elasticsearch.client.RestHighLevelClient.&lt;clinit&gt;(RestHighLevelClient.java:<span class=\"hljs-number\">1911</span>) ~[elasticsearch-rest-high-level-client<span class=\"hljs-number\">-7.8</span><span class=\"hljs-number\">.1</span>.jar:<span class=\"hljs-number\">7.8</span><span class=\"hljs-number\">.1</span>]\n    at com.example.demo.MyHighLevelEsRestDemoApplication.restHighLevelClient(MyHighLevelEsRestDemoApplication.java:<span class=\"hljs-number\">29</span>) [classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.CGLIB$restHighLevelClient$<span class=\"hljs-number\">1</span>(&lt;generated&gt;) ~[classes/:na]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42$$FastClassBySpringCGLIB$$c395303f.invoke(&lt;generated&gt;) ~[classes/:na]\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:<span class=\"hljs-number\">244</span>) ~[spring-core<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.<span class=\"hljs-built_in\">int</span>ercept(ConfigurationClassEnhancer.java:<span class=\"hljs-number\">331</span>) ~[spring-context<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    at com.example.demo.MyHighLevelEsRestDemoApplication$$EnhancerBySpringCGLIB$$a7cdbb42.restHighLevelClient(&lt;generated&gt;) ~[classes/:na]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at sun.<span class=\"hljs-built_in\">ref</span>lect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"hljs-number\">43</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at java.lang.<span class=\"hljs-built_in\">ref</span>lect.Method.invoke(Method.java:<span class=\"hljs-number\">498</span>) ~[na:<span class=\"hljs-number\">1.8</span><span class=\"hljs-number\">.0</span>_242]\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class=\"hljs-number\">154</span>) ~[spring-beans<span class=\"hljs-number\">-5.2</span><span class=\"hljs-number\">.8</span>.RELEASE.jar:<span class=\"hljs-number\">5.2</span><span class=\"hljs-number\">.8</span>.RELEASE]\n    ... <span class=\"hljs-number\">20</span> common frames omitted\n</code></pre>\n\n<h3 id=\"这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\"><a href=\"#这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\" class=\"headerlink\" title=\"这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题\"></a>这是SpringBoot的elasticsearch版本冲突，导致的无法找到的问题</h3><blockquote>\n<p>需要修改导入依赖包去掉version</p>\n</blockquote>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>7.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n\n<p>修改为</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckztv25xl0004wiw1ffb742eb","category_id":"ckzu3ypo30000haw13f0hfw3p","_id":"ckzu3ypo80001haw1h8ql0p51"},{"post_id":"ckztxybbq00006gw1369f8ij0","category_id":"ckzu48zib0000tew1d2baf8ow","_id":"ckzu48zic0001tew1aa7eg6ci"},{"post_id":"ckztwibsl0000gvw1dvz73yf2","category_id":"ckzu48zib0000tew1d2baf8ow","_id":"ckzu4apq80000ujw18dv26yhz"},{"post_id":"ckztv25xe0001wiw1bfjs44pf","category_id":"ckzu48zib0000tew1d2baf8ow","_id":"ckzu4asbh0001ujw1hin8dufm"},{"post_id":"ckztv25xa0000wiw145tm22mx","category_id":"ckzu48zib0000tew1d2baf8ow","_id":"ckzu4ateq0002ujw191qa3g5r"}],"PostTag":[{"post_id":"ckgdhp5cx00013zfyfypwd9kb","tag_id":"ckgdhp5d100033zfy2v661xa9","_id":"ckgdhp5d700053zfy8mjr189k"},{"post_id":"ckgdhp5cz00023zfy1idwhm7z","tag_id":"ckgdhp5d600043zfy52yv3s11","_id":"ckgdhp5d700063zfyfe7pbskk"},{"post_id":"ckggpzfu900000ufy78z44npa","tag_id":"ckggpzfug00010ufygqgwh3rd","_id":"ckggpzful00040ufy6mpq0joj"},{"post_id":"ckggpzfuh00020ufydh42ezkz","tag_id":"ckggpzful00030ufyefv5756e","_id":"ckggpzfum00050ufy6xmza8i2"},{"post_id":"ckghepvog0000p4fy96b70qav","tag_id":"ckghepvon0002p4fy70vj808t","_id":"ckghepvot0007p4fy0vpscpah"},{"post_id":"ckghepvol0001p4fy542u9fqd","tag_id":"ckghepvos0006p4fy8f4422gh","_id":"ckghepvow000cp4fyhy6xcx4p"},{"post_id":"ckghepvop0003p4fy2myp4kup","tag_id":"ckghepvov000ap4fyc32vemze","_id":"ckghepvox000ep4fyex7u5qrj"},{"post_id":"ckghepvoq0004p4fyeho6ap17","tag_id":"ckghepvow000dp4fyaai1h15h","_id":"ckghepvox000gp4fy38yy3b1t"},{"post_id":"ckghepvor0005p4fydl73b239","tag_id":"ckghepvox000fp4fy7b3c734r","_id":"ckghepvoy000ip4fy2hd51d0j"},{"post_id":"ckghepvot0008p4fyfxyedlbb","tag_id":"ckghepvox000hp4fycjlb4i4y","_id":"ckghepvoy000kp4fy8x76dcnd"},{"post_id":"ckghepvou0009p4fy95qp11eu","tag_id":"ckghepvoy000jp4fy191p95pi","_id":"ckghepvoz000mp4fych4s10bo"},{"post_id":"ckghepvov000bp4fy9xs70jsj","tag_id":"ckghepvoy000lp4fy2t3n75f1","_id":"ckghepvoz000np4fy662mclto"},{"post_id":"ckztv25xa0000wiw145tm22mx","tag_id":"ckztv25xg0002wiw13gc5e9j3","_id":"ckztv25xn0006wiw10zncb1qt"},{"post_id":"ckztv25xe0001wiw1bfjs44pf","tag_id":"ckztv25xm0005wiw1ekx96h4o","_id":"ckztv25xo0008wiw1eo1ndrhz"},{"post_id":"ckztv25xj0003wiw16p7pdzbc","tag_id":"ckztv25xn0007wiw19z261cm5","_id":"ckztv25xo000awiw109sncfj5"},{"post_id":"ckztv25xl0004wiw1ffb742eb","tag_id":"ckztv25xo0009wiw10kbka6ed","_id":"ckztv25xp000bwiw1092w2sat"},{"post_id":"ckztwibsl0000gvw1dvz73yf2","tag_id":"ckztxe96c0000hqw1bvw68s10","_id":"ckztxe96h0001hqw1havw0ndq"},{"post_id":"ckztxybbq00006gw1369f8ij0","tag_id":"ckztxybbw00016gw1efn83m9a","_id":"ckztxybc100026gw13c9khcci"},{"post_id":"ckzu3cyra00013yw1h5ph9qgy","tag_id":"ckzu3cyre00033yw1fodqelp9","_id":"ckzu3cyrj00043yw1b3sa2jgj"}],"Tag":[{"name":"ClickHouse,BigData,Java","_id":"ckgdhp5d100033zfy2v661xa9"},{"name":"Security,Spring Security,OAuth2,Resource Server,Java","_id":"ckgdhp5d600043zfy52yv3s11"},{"name":"docker,docker compose,start,Linux","_id":"ckggpzfug00010ufygqgwh3rd"},{"name":"SpringBoot,Logging,Log4J2,Java","_id":"ckggpzful00030ufyefv5756e"},{"name":"github, andot, blog, hexo","_id":"ckghepvon0002p4fy70vj808t"},{"name":"Shiro, Spring Security","_id":"ckghepvos0006p4fy8f4422gh"},{"name":"druid, springboot, java","_id":"ckghepvov000ap4fyc32vemze"},{"name":"GitHub, Hexo, nodejs, javascript","_id":"ckghepvow000dp4fyaai1h15h"},{"name":"java, annotation","_id":"ckghepvox000fp4fy7b3c734r"},{"name":"python, java, urlib2, json, list","_id":"ckghepvox000hp4fycjlb4i4y"},{"name":"spring, p, <p>","_id":"ckghepvoy000jp4fy191p95pi"},{"name":"Java, package","_id":"ckghepvoy000lp4fy2t3n75f1"},{"name":"Java,MySQL,IN,EXISTS,SQL优化,Design","_id":"ckztv25xg0002wiw13gc5e9j3"},{"name":"Java,MySQL,IN,EXISTS,SQL优化","_id":"ckztv25xm0005wiw1ekx96h4o"},{"name":"Java,devops,auto,package,Maven,Linux","_id":"ckztv25xn0007wiw19z261cm5"},{"name":"ThreadPoolExecutor, Java,ThreadPool,线程池,高并发","_id":"ckztv25xo0009wiw10kbka6ed"},{"name":"Java,MySQL,Partition","_id":"ckztxe96c0000hqw1bvw68s10"},{"name":"replace, duplicate, on duplicate key update, insert and update, mysql","_id":"ckztxybbw00016gw1efn83m9a"},{"name":"Java,springboot,Spring,Linux,Bigdata,NoSQL,Elasticsearch","_id":"ckzu3cyre00033yw1fodqelp9"}]}}